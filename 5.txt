Chapter 5. Introducing the ex Editor





If this is a book on vi, why would we include a chapter on another editor? Well, ex is not really another editor. vi is the visual mode of the more general, underlying line editor, which is ex. Some ex commands can be useful to you while you are working in vi, since they can save you a lot of editing time. Most of these commands can be used without ever leaving vi.[18]

You already know how to think of files as a sequence of numbered lines. ex gives you editing commands with greater mobility and scope. With ex, you can move easily between files and transfer text from one file to another in a variety of ways. You can quickly edit blocks of text larger than a single screen. And with global replacement you can make substitutions throughout a file for a given pattern.

This chapter introduces ex and its commands. You will learn how to:

Move around a file by using line numbers



Use ex commands to copy, move, and delete blocks of text



Save files and parts of files



Work with multiple files (reading in text or commands, traveling between files)





ex Commands





Long before vi or any other screen editor was invented, people communicated with computers on printing terminals, rather than on today’s CRTs (or bitmapped screens with pointing devices and terminal emulation programs). Line numbers were a way to quickly identify a part of a file to be worked on, and line editors evolved to edit those files. A programmer or other computer user would typically print out a line (or lines) on the printing terminal, give the editing commands to change just that line, and then reprint to check the edited line.

People don’t edit files on printing terminals anymore, but some ex line editor commands are still useful to users of the more sophisticated visual editor built on top of ex. Although it is simpler to make most edits with vi, the line orientation of ex gives it an advantage when you want to make large-scale changes to more than one part of a file.





Note


Many of the commands we’ll see in this chapter have filename arguments. Although it’s possible, it is usually a very bad idea to have spaces in your files’ names. ex will be confused to no end, and you will go to more trouble than it’s worth trying to get the filenames to be accepted. Use underscores, dashes, or periods to separate the components of your filenames, and you’ll be much happier.



Before you start off simply memorizing ex commands (or worse, ignoring them), let’s first take some of the mystery out of line editors. Seeing how ex works when it is invoked directly will help make sense of the sometimes obscure command syntax.

Open a file that is familiar to you and try a few ex commands. Just as you can invoke the vi editor on a file, you can invoke the ex line editor on a file. If you invoke ex, you will see a message about the total number of lines in the file, and a colon command prompt. For example:

$ex practice "practice" 6 lines, 320 characters :

You won’t see any lines in the file unless you give an ex command that causes one or more lines to be displayed.

ex commands consist of a line address (which can simply be a line number) plus a command; they are finished with a carriage return (by hitting ENTER). One of the most basic commands is p for print (to the screen). So, for example, if you type 1p at the prompt, you will see the first line of the file:

:1p With a screen editor you can :

In fact, you can leave off the p, because a line number by itself is equivalent to a print command for that line. To print more than one line, you can specify a range of line numbers (for example, 1,3—two numbers separated by a comma, with or without spaces in between). For example:

:1,3 With a screen editor you can scroll the page, move the cursor, delete lines, insert characters, and more,

A command without a line number is assumed to affect the current line. So, for example, the substitute command (s), which allows you to substitute one word for another, could be entered like this:

:1 With a screen editor you can :s/screen/line/ With a line editor you can

Notice that the changed line is reprinted after the command is issued. You could also make the same change like this:

:1s/screen/line/ With a line editor you can

Even though you will be invoking ex commands from vi and will not be using them directly, it is worthwhile to spend a few minutes in ex itself. You will get a feel for how you need to tell the editor which line (or lines) to work on, as well as which command to execute.

After you have given a few ex commands in your practice file, you should invoke vi on that same file, so that you can see it in the more familiar visual mode. The command :vi will get you from ex to vi.

To invoke an ex command from vi, you must type the special bottom-line character : (colon). Then type the command and press ENTER to execute it. So, for example, in the ex editor you move to a line simply by typing the number of the line at the colon prompt. To move to line 6 of a file using this command from within vi, enter:

:6

Press ENTER.

After the following exercise, we will discuss ex commands only as they are executed from vi.





Exercise: The ex Editor





At the Unix prompt, invoke the ex editor on a file called practice:

ex practice

A message appears:

"practice" 6 lines, 320 characters



Go to and print (display) the first line:

:1

Print (display) lines 1 through 3:

:1,3

Substitute screen for line on line 1:

:1s/screen/line

Invoke the vi editor on file:

:vi

Go to the first line:

:1





Problem Checklist





While editing in vi , you accidentally end up in the ex editor.

A Q in the command mode of vi invokes ex. Any time you are in ex, the command vi returns you to the vi editor.





* * *



[18] vile is different from the other clones in that many of the more advanced ex commands simply don’t work. Instead of noting each command here, we provide more details in Chapter 18.





Editing with ex





Many ex commands that perform normal editing operations have an equivalent in vi that does the job more simply. Obviously, you will use dw or dd to delete a single word or line rather than using the delete command in ex. However, when you want to make changes that affect numerous lines, you will find the ex commands more useful. They allow you to modify large blocks of text with a single command.

These ex commands are listed here, along with abbreviations for those commands. Remember that in vi, each ex command must be preceded with a colon. You can use the full command name or the abbreviation, whichever is easier to remember.

Full nameAbbreviationMeaning

delete d Delete lines

move m Move lines

copy co Copy lines

t Copy lines (a synonym for co)



You can separate the different elements of an ex command with spaces, if you find the command easier to read that way. For example, you can separate line addresses, patterns, and commands in this way. You cannot, however, use a space as a separator inside a pattern or at the end of a substitute command.





Line Addresses





For each ex editing command, you have to tell ex which line number(s) to edit. And for the exmove and copy commands, you also need to tell ex where to move or copy the text to.

You can specify line addresses in several ways:

With explicit line numbers



With symbols that help you specify line numbers relative to your current position in the file



With search patterns as addresses that identify the lines to be affected





Let’s look at some examples.





Defining a Range of Lines





You can use line numbers to explicitly define a line or range of lines. Addresses that use explicit numbers are called absolute line addresses. For example:

:3,18d

Delete lines 3 through 18.



:160,224m23

Move lines 160 through 224 to follow line 23. (Like delete and put in vi.)



:23,29co100

Copy lines 23 through 29 and put after line 100. (Like yank and put in vi.)





To make editing with line numbers easier, you can also display all line numbers on the left of the screen. The command:

:set number

or its abbreviation:

:set nu

displays line numbers. The file practice then appears:

1 With a screen editor 2 you can scroll the page, 3 move the cursor, delete lines, 4 insert characters and more



The displayed line numbers are not saved when you write a file, and they do not print if you print the file. Line numbers are displayed either until you quit the vi session or until you disable the set option:

:set nonumber

or:

:set nonu

To temporarily display the line numbers for a set of lines, you can use the # sign. For example:

:1,10#

would display the line numbers from line 1 to line 10.

As described in Chapter 3, you can also use the CTRL-G command to display the current line number. You can thus identify the line numbers corresponding to the start and end of a block of text by moving to the start of the block, typing CTRL-G, and then moving to the end of the block and typing CTRL-G again.

Yet another way to identify line numbers is with the ex= command:

:=

Print the total number of lines.



:.=

Print the line number of the current line.



:/ pattern /=

Print the line number of the first line that matches pattern.





Line Addressing Symbols





You can also use symbols for line addresses. A dot (.) stands for the current line; and $ stands for the last line of the file.% stands for every line in the file; it’s the same as the combination 1,$. These symbols can also be combined with absolute line addresses. For example:

:.,$d

Delete from current line to end of file.



:20,.m$

Move from line 20 through the current line to the end of the file.



:%d

Delete all the lines in a file.



:%t$

Copy all lines and place them at the end of the file (making a consecutive duplicate).





In addition to an absolute line address, you can specify an address relative to the current line. The symbols + and - work like arithmetic operators. When placed before a number, these symbols add or subtract the value that follows. For example:

:.,.+20d

Delete from current line through the next 20 lines.



:226,$m.-2

Move lines 226 through the end of the file to two lines above the current line.



:.,+20#

Display line numbers from the current line to 20 lines further on in the file.





In fact, you don’t need to type the dot (.) when you use + or - because the current line is the assumed starting position.

Without a number following them, + and - are equivalent to +1 and –1, respectively.[19] Similarly, ++ and -- each extend the range by an additional line, and so on. The + and - can also be used with search patterns, as shown in the next section.

The number 0 stands for the top of the file (imaginary line 0). 0 is equivalent to 1-, and both allow you to move or copy lines to the very start of a file, before the first line of existing text. For example:

:-,+t0

Copy three lines (the line above the cursor through the line below the cursor) and put them at the top of the file.





Search Patterns





Another way that ex can address lines is by using search patterns. For example:

:/ pattern /d

Delete the next line containing pattern.



:/ pattern /+d

Delete the line below the next line containing pattern. (You could also use +1 instead of + alone.)



:/ pattern1 /,/ pattern2 /d

Delete from the first line containing pattern1 through the first line containing pattern2.



:.,/ pattern /m23

Take the text from the current line (.) through the first line containing pattern and put it after line 23.





Note that a pattern is delimited by a slash both before and after.

If you make deletions by pattern with vi and ex, there is a difference in the way the two editors operate. Suppose your file practice contains the lines:

With a screen editor you can scroll the page, move the cursor,delete lines, insert characters and more, while seeing results of your edits as you make them.



KeystrokesResults

d/while With a screen editor you can scroll the page, move the cursor,while seeing results of your edits as you make them.

The vi delete to pattern command deletes from the cursor up to the word while, but leaves the remainder of both lines.



:.,/while/d With a screen editor you can scroll theof your edits as you make them.

The ex command deletes the entire range of addressed lines, in this case both the current line and the line containing the pattern. All lines are deleted in their entirety.





Redefining the Current Line Position





Sometimes, using a relative line address in a command can give you unexpected results. For example, suppose the cursor is on line 1 and you want to print line 100 plus the five lines below it. If you type:

:100,+5 p

you’ll get an error message saying, “First address exceeds second.” The reason the command fails is that the second address is calculated relative to the current cursor position (line 1), so your command is really saying this:

:100,6 p

What you need is some way to tell the command to think of line 100 as the “current line,” even though the cursor is on line 1.

ex provides such a way. When you use a semicolon instead of a comma, the first line address is recalculated as the current line. For example, the command:

:100;+5 p

prints the desired lines. The +5 is now calculated relative to line 100. A semicolon is useful with search patterns as well as absolute addresses. For example, to print the next line containing pattern, plus the 10 lines that follow it, enter the command:

:/pattern/;+10 p





Global Searches





You already know how to use / (slash) in vi to search for patterns of characters in your files. ex has a global command, g, that lets you search for a pattern and display all lines containing the pattern when it finds them. The command :g! does the opposite of :g. Use :g! (or its synonym, :v) to search for all lines that do not contain pattern.

You can use the global command on all lines in the file, or you can use line addresses to limit a global search to specified lines or to a range of lines.

:g/ pattern

Finds (moves to) the last occurrence of pattern in the file.



:g/ pattern /p

Finds and displays all lines in the file containing pattern.



:g!/ pattern /nu

Finds and displays all lines in the file that don’t contain pattern; also displays the line number for each line found.



:60,124g/ pattern /p

Finds and displays any lines between lines 60 and 124 containing pattern.





As you might expect, g can also be used for global replacements. We’ll talk about that in Chapter 6.





Combining ex Commands





You don’t always need to type a colon to begin a new ex command. In ex, the vertical bar (|) is a command separator, allowing you to combine multiple commands from the same ex prompt (in much the same way that a semicolon separates multiple commands at the Unix shell prompt). When you use the |, keep track of the line addresses you specify. If one command affects the order of lines in the file, the next command does its work using the new line positions. For example:

:1,3d | s/thier/their/

Delete lines 1 through 3 (leaving you now on the top line of the file), and then make a substitution on the current line (which was line 4 before you invoked the ex prompt).



:1,5 m 10 | g/pattern/nu

Move lines 1 through 5 after line 10, and then display all lines (with numbers) containing pattern.





Note the use of spaces to make the commands easier to read.





* * *



[19] In a relative address, you shouldn’t separate the plus or minus symbol from the number that follows it. For example, +10 means “10 lines following,” but + 10 means “11 lines following (1 + 10),” which is probably not what you mean (or want).





Saving and Exiting Files





You have learned the vi command ZZ to quit and write (save) your file. But you will frequently want to exit a file using ex commands, because these commands give you greater control. We’ve already mentioned some of these commands in passing. Now let’s take a more formal look:

:w

Writes (saves) the buffer to the file but does not exit. You can (and should) use :w throughout your editing session to protect your edits against system failure or a major editing error.



:q

Quits the editor (and returns to the Unix prompt).



:wq

Both writes the file and quits the editor. The write happens unconditionally, even if the file was not changed.



:x

Both writes the file and quits (exits) the editor. The file is written only if it has been modified.[20]





vi protects existing files and your edits in the buffer. For example, if you want to write your buffer to an existing file, vi gives you a warning. Likewise, if you have invoked vi on a file, made edits, and want to quit without saving the edits, vi gives you an error message such as:

No write since last change.

These warnings can prevent costly mistakes, but sometimes you want to proceed with the command anyway. An exclamation point (!) after your command overrides the warning:

:w! :q!

:w! can also be used to save edits in a file that was opened in read-only mode with vi-R or view (assuming you have write permission for the file).

:q! is an essential editing command that allows you to quit without affecting the original file, regardless of any changes you made in this session. The contents of the buffer are discarded.





Renaming the Buffer





You can also use :w to save the entire buffer (the copy of the file you are editing) under a new filename.

Suppose you have a file practice, which contains 600 lines. You open the file and make extensive edits. You want to quit but also save both the old version of practice and your new edits for comparison. To save the edited buffer in a file called practice.new, give the command:

:w practice.new

Your old version, in the file practice, remains unchanged (provided that you didn’t previously use :w). You can now quit editing the new version by typing :q.





Saving Part of a File





While editing, you will sometimes want to save just part of your file as a separate, new file. For example, you might have entered formatting codes and text that you want to use as a header for several files.

You can combine ex line addressing with the write command, w, to save part of a file. For example, if you are in the file practice and want to save part of practice as the file newfile, you could enter:

:230,$w newfile

Saves from line 230 to end of file in newfile.



:.,600w newfile

Saves from the current line to line 600 in newfile.





Appending to a Saved File





You can use the Unix redirect and append operator (>>) with w to append all or part of the contents of the buffer to an existing file. For example, if you entered:

:1,10wnewfile

and then:

:340,$w >>newfile

newfile would contain lines 1–10 and from line 340 to the end of the buffer.





* * *



[20] The difference between :wq and :x is important when editing source code and using make, which performs actions based upon file modification times.





Copying a File into Another File





Sometimes you want to copy text or data already entered on the system into the file you are editing. In vi, you can read in the contents of another file with the ex command:

:readfilename

or its abbreviation:

:rfilename

This command inserts the contents of filename starting on the line after the cursor position in the file. If you want to specify a line other than the one the cursor’s on, simply type the line number (or other line address) you want before the read or r command.

Let’s suppose you are editing the file practice and want to read in a file called data from another directory called /home/tim. Position the cursor one line above the line where you want the new data inserted, and enter:

:r /home/tim/data

The entire contents of /home/tim/data are read into practice, beginning below the line with the cursor.

To read in the same file and place it after line 185, you would enter:

:185r /home/tim/data

Here are other ways to read in a file:

:$r /home/tim/data

Place the read-in file at the end of the current file.



:0r /home/tim/data

Place the read-in file at the very beginning of the current file.



:/ pattern /r /home/tim/data

Place the read-in file in the current file, after the line containing pattern.





Editing Multiple Files





ex commands enable you to switch between multiple files. The advantage of editing multiple files is speed. If you are sharing the system with other users, it takes time to exit and reenter vi for each file you want to edit. Staying in the same editing session and traveling between files is not only faster for access, but you also save abbreviations and command sequences that you have defined (see Chapter 7), and you keep yank buffers so that you can copy text from one file to another.





Invoking vi on Multiple Files





When you first invoke vi, you can name more than one file to edit, and then use ex commands to travel between the files. For example:

$vi file1 file2

edits file1 first. After you have finished editing the first file, the ex command :w writes (saves) file1 and :n calls in the next file (file2).

Suppose you want to edit two files, practice and note:

KeystrokesResults

vi practice note With a screen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing

Open the two files practice and note. The first-named file, practice, appears on your screen. Perform any edits.



:w "practice" 6 lines, 328 characters

Save the edited file practice with the ex command w. Press ENTER.



:n Dear Mr. Henshaw: Thank you for the prompt . . .

Call in the next file, note, with the ex command n. Press ENTER. Perform any edits.



:x "note" 23 lines, 1343 characters

Save the second file, note, and quit the editing session.





Using the Argument List





ex actually lets you do more than just move to the next file in the argument list with :n. The :args command (abbreviated :ar) lists the files named on the command line, with the current file enclosed in brackets.

KeystrokesResults

vi practice note With a screen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing

Open the two files practice and note. The first-named file, practice, appears on your screen.



:args [practice] note

vi displays the argument list in the status line, with brackets around the current filename.





The :rewind (:rew) command resets the current file to be the first file named on the command line. elvis and Vim provide a corresponding :last command to move to the last file on the command line.





Calling in New Files





You don’t have to call in multiple files at the beginning of your editing session. You can switch to another file at any time with the ex command :e. If you want to edit another file within vi, you first need to save your current file (:w), then give the command:

:efilename

Suppose you are editing the file practice and want to edit the file letter, and then return to practice:

KeystrokesResults

:w "practice" 6 lines, 328 characters

Save practice with w and press ENTER. practice is saved and remains on the screen. You can now switch to another file, because your edits are saved.



:e letter "letter" 23 lines, 1344 characters

Call in the file letter with e and press ENTER. Perform any edits.





vi “remembers” two filenames at a time as the current and alternate filenames. These can be referred to by the symbols % (current filename) and # (alternate filename). # is particularly useful with :e, since it allows you to switch easily back and forth between two files. In the example just given, you could return to the first file, practice, by typing the command :e #. You could also read the file practice into the current file by typing:r #.

If you have not first saved the current file, vi will not allow you to switch files with :e or :n unless you tell it imperatively to do so by adding an exclamation point after the command.

For example, if after making some edits to letter, you wanted to discard the edits and return to practice, you could type :e! #.

The following command is also useful. It discards your edits and returns to the last saved version of the current file:

:e!

In contrast to the # symbol, % is useful mainly when writing out the contents of the current buffer to a new file. For example, in the earlier section Renaming the Buffer, we showed you how to save a second version of the file practice with the command:

:w practice.new

Since % stands for the current filename, that line could also have been typed:

:w %.new





Switching Files from vi





Since switching back to the previous file is something that you will tend to do a lot, you don’t have to move to the ex command line to do it. The vi command ^^ (the Ctrl key with the caret key) will do this for you. Using this command is the same as typing :e #. As with the :e command, if the current buffer has not been saved, vi will not let you switch back to the previous file.





Edits Between Files





When you give a yank buffer a one-letter name, you have a convenient way to move text from one file to another. Named buffers are not cleared when a new file is loaded into the vi buffer with the :e command. Thus, by yanking or deleting text from one file (into multiple named buffers if necessary), calling in a new file with :e, and putting the named buffer(s) into the new file, you can transfer material between files.

The following example illustrates how to transfer text from one file to another:

KeystrokesResults

"f4yy With ascreen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of the edits as you make them

Yank four lines into buffer f.



:w "practice" 6 lines, 238 characters

Save the file.



:e letter Dear Mr. Henshaw: I thought that you wouldbe interested to know that: Yours truly,

Enter the file letter with :e. Move the cursor to where the copied text will be placed.



"fp Dear Mr. Henshaw: I thought that you would be interested to know that:With a screen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of the edits as you make them Yours truly,

Place yanked text from named buffer f below the cursor.





Another way to move text from one file to another is to use the ex commands :ya (yank) and :pu (put). These commands work the same way as the equivalent vi commands y and p, but they are used with ex’s line-addressing capability and named buffers.

For example:

:160,224ya a

would yank (copy) lines 160 through 224 into buffer a. Next you would move with :e to the file where you want to put these lines. Place the cursor on the line where you want to put the yanked lines. Then type:

:pu a

to put the contents of buffer a after the current line.





