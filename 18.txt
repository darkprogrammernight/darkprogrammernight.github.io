Chapter 18. vile: vi Like Emacs





vile stands for “vi Like Emacs.” It started out as a copy of version 3.9 of MicroEMACS that was modified to have the “finger-feel” of vi. Thomas Dickey and Paul Fox are the maintainers. Over the years (since 1990), there have been other contributors, including Kevin Buettner and Clark Morgan.

The current version is 9.6, released late in 2007. The screenshots in this chapter were made with 9.5s (a pre-release beta). Until the late 1990s, version numbers advanced roughly one per year; starting with 1999, the scheme is about 0.1 per year—and someday will reach 10.

This chapter was written using vile.





Authors and History





Paul Fox describes the early vile history this way:

vile’s design goal has always been a little different than that of the other clones. vile has never really attempted to be a “clone” at all, though most people find it close enough. I started it because in 1990 I wanted to be able to edit multiple files in multiple windows, I had been using vi for 10 years already, and the sources to MicroEMACS came floating past my newsreader at a job where I had too much time on my hands. I started by changing the existing keymaps in the obvious way, and ran full-tilt into the “Hey! Where’s ‘insert’ mode?” problem. So I hacked a little more, and hacked a little more, and eventually released in ’91 or ’92. (Starting soon thereafter, major version numbers tracked the year of release: 7.3 was the third release in ’97.)

But my goal has always been to preserve finger-feel (as opposed to the display visuals), and, selfishly, to preserve finger-feel most for the commands I use. ☺ vile has quite an amazing ex mode, that works very well—it just looks really odd, and a couple of commands that are beyond the scope of the current parser are missing. For the same reasons, vile also won’t fully parse existing .exrc files, since I don’t really think that’s so important—it does simple ones, but more sophisticated ones need some tweaking. But when you toss in vile’s built-in command/macro language, you quickly forget you ever cared about .exrc.





Thomas Dickey started working on vile in December of 1992, initially just contributing patches, and later doing more significant features and extensions, such as line numbering, name completion, and animating the buffer list window. He explains: “Integrating features together is more important to my design goals than implementing a large number of features.”

In February of 1994, Kevin Buettner started working on vile. Initially, he supplied bug fixes for the X11 version, xvile, and then improvements, such as scrollbars. This evolved into support for the Motif, OpenLook, and Athena widget sets. Because the Athena widgets were, surprisingly, not “universally available in a bug-free form,” he wrote a version that used the raw Xt toolkit. This version ended up providing superior functionality to the Athena version. Kevin also contributed the initial support in vile for GNU Autoconf.

The Win32 GUI port, called winvile, started in 1997, and continued on with extensions, including an OLE server and a Visual Studio add-in.

In the current version of vile, the perl interface and major modes (discussed later) are stable. They are used as a basis for other features, such as a server (using the perl interface) and syntax highlighting based on the major modes. For the near term, future work will focus on improving the locale support.





Important Command-Line Arguments





Although vile does not expect to be invoked as either vi or ex, it can be invoked as view, in which case it will treat each file as read-only. Unlike the other clones, it does not have a line-editor mode.

Here are the important vile command-line arguments:

-c command

+ command

vile will execute the given ex-style command. Any number of -c options may be given.



-h

Invokes vile on the help file.



-R

Invokes vile in “read-only” mode; no writes are permitted while in this mode. (This will also be true if vile is invoked as view, or if readonly mode is set in the startup file.)



-t tag

Start editing at the specified tag. The -T option is equivalent and can be used when X11 option parsing eats the -t.



-v

Invokes vile in “view” mode; no changes are permitted to any buffer while in this mode.



-?

vile prints a short usage summary and then exits.



@ cmdfile

vile will run the specified file as its startup file, and will bypass any normal startup file (i.e., .vilerc) or environment variable (i.e., VILEINIT).





A few often-used options are obsolete since vile implements the POSIX -c (or +) option:

-g N

vile will begin editing on the first file at the specified line number. This can also be given as +N.



-s pattern

In the first file, vile will execute an initial search for the given pattern. This can also be given as +/pattern.





Online Help and Other Documentation





vile currently comes with a single (rather large) ASCII text file, vile.hlp. The :help command (which can be abbreviated to :h) opens a new window on that file. You can then search for information on a particular topic, using standard vi search techniques. Because it is a flat ASCII file, it is also easy to print out and read through.

In addition to the help file, vile has a number of built-in commands for displaying information about the facilities and state of the editor. Some of the most useful commands are:

:show-commands

Creates a new window that shows a complete list of all vile commands, with a brief description of each one. The information is placed in its own buffer that can be treated just like any other vile buffer. In particular, it is easy to write it out to a file for later printing.



:apropos

Shows all commands whose names contain a given substring. This is easier than just randomly searching through the help file to find information on a particular topic.



:describe-key

Prompts you for a key or key sequence, and then shows the description of that command. For instance, the x key implements the delete-next-character function.



:describe-function

Prompts you for a function name, and then shows the description of that function. For instance, the delete-next-character function deletes a given number of characters to the right of the current cursor position.





The :apropos, :describe-function, and :describe-key commands all give the descriptive information, plus all other synonyms (since a function may have more than one name, for convenience), all other keys that are bound to it (since many key sequences may be bound to the same function), and whether the command is a “motion” or an “operator.” A good example of this is the output of :describe-function next-line:

"next-line" ^J ^N j #-B or "down-arrow" or "down-line" or "forward-line" (motion: move down CNT lines )

This shows all four of its names and its key bindings. (The sequence #-B is vile’s terminal-independent representation of the up arrow—use :show-key-names for a complete list.)

The VILE_STARTUP_PATH environment variable can be set to a colon-separated search path for the help file.[58] The VILE_HELP_FILE environment variable can be used to override the name of the help file (typically vile.hlp).

The combination of online searchable help, built-in command and key descriptions, and command completion makes the help facility straightforward to use.





* * *



[58] The Win32 port uses a semicolon as a list-separator; the OpenVMS port uses commas.





Initialization





xvile performs extra initialization for its menus, before the other steps:

(xvile only.) Use the value of the XVILE_MENU environment variable for the name of the menu description file, if provided. Otherwise, it uses .vilemenu. This file sets the default menus for the X11 interface.[59]





After that, the different versions vile, xvile, and winvile perform the same two-stage initialization. The first stage uses a mixture of environment variables and files:

Execute the file named on the command line with @cmdfile options, if any. Bypass any other initialization steps that would otherwise be done.



If the VILEINIT environment variable exists, execute its value. Otherwise, look for an initialization file.



If the VILE_STARTUP_FILE environment variable exists, use that as the name of the startup file. If not, on Unix use .vilerc, and on other systems use vile.rc.



Look for the startup file in the current directory, and then in the user’s home directory. Use whichever one is found first.





The second stage uses the initialization commands:

Load the first file specified on the command line into a memory buffer.



Execute the commands given with -c options, applying them by default to the first file.





Like the other clones, vile lets you place common initialization actions into your .exrc file (i.e., options and commands for Unix vi and/or the other clones), and use your .vilerc file to execute :source .exrc before or after the vile-specific initializations.





* * *



[59] winvile’s menus are not configurable; they provide features that are supported only in Win32.





Multiwindow Editing





vile is somewhat different from the other clones. It started life as a version of MicroEMACS, and then was modified into an editor with the “finger-feel” of vi.

One of the things that versions of Emacs have always done is handle multiple windows and multiple files; as such, vile was the first vi-like program to provide multiple windows and editing buffers.

As in elvis and Vim, the :split command[60] creates a new window, and then you can use the ex command :efilename to edit a new file in the new window. After that, things become different; in particular, the vi command mode keys to switch among windows are very different.





Figure 18-1. Editing this chapter in vile



Figure 18-1 depicts a split screen that results from typing vile ch12.xml[61] followed by :split and :e !zcat chapter.xml.gz.

Like Vim, all windows share the bottom line for execution of ex commands. Each window has its own status line, with the current window indicated by filling its status line with equals signs. The status line also acquires an I in the second column when in insert mode, and [modified] is appended after the filename when the file has been changed but not yet written out.

vile is also like Emacs in that commands are bound to key sequences. Table 18-1 presents the commands and their key sequences. In some cases, two sets of key sequences do the same operation, for example, the delete-other-windows command.

Table 18-1. vile window management commands

Command

Key sequence(s)

Function



delete-other-windows ^O, ^X 1

Eliminate all windows except the current one.



delete-window ^K, ^X 0

Destroy the current window, unless it is the last one.



edit-file, E, e ^X e Bring given (or under-cursor, for ^X e) file or existing buffer into window.

find-file ^X e Like edit-file.

grow-window V

Increase the size of the current window by count lines.



move-next-window-down ^A ^E

Move next window down (or buffer up) by count lines.



move-next-window-up ^A ^Y

Move next window up (or buffer down) by count lines.



move-window-left ^X ^L

Scroll window to left by count columns, or a half screen if count is unspecified.



move-window-right ^X ^R

Scroll window to right by count columns, or a half screen if count is unspecified.



next-window ^X o

Move to the next window.



position-window z where

Reframe with cursor specified by where, as follows: center (., M, m), top (ENTER, H, t), or bottom (-, L, b).



previous-window ^X O

Move to the previous window.



resize-window Change the current window to count lines. count is supplied as a prefix argument.



restore-window Return to window saved with save-window.



save-window Mark a window for later return with restore-window.



scroll-next-window-down ^A ^D

Move next window down by count half screens. count is supplied as a prefix argument.



scroll-next-window-up ^A ^U

Move next window up by count half screens. count is supplied as a prefix argument.



shrink-window v

Decrease the size of the current window by count lines. count is supplied as a prefix argument.



split-current-window ^X 2

Split the window in half; a count of 1 or 2 chooses which becomes current. count is supplied as a prefix argument.



view-file Bring given file or existing buffer into window, and mark it “view-only.”



set-window Bring existing buffer into window.



historical-buffer _

Display a list of the first nine buffers. A digit moves to the given buffer; __ moves to the most recently edited file. Tab (and back-tab) rotate the list, making it simple to navigate in a list of long buffer names.



toggle-buffer-list *

Pop up/down a window showing all the vile buffers.





* * *



[60] That this works is an artifact of vile allowing you to abbreviate commands. The actual command name is split-current-window.



[61] The alert reader may have noticed that this is not Chapter 12. The chapters were renumbered during the development of the seventh edition.





GUI Interfaces





The screen shots and the explanation in this section were supplied by Kevin Buettner, Thomas Dickey, and Paul Fox. We thank them.

There are several X11 interfaces for vile, each utilizing a different toolkit based on the Xt library.There is a plain “No Toolkit” version that does not use a toolkit, but it has custom scrollbars and a bulletin board widget for geometry management. There are versions that use the Motif, Athena, or OpenLook toolkits.[62] The Motif and Athena versions are the best supported, and have menu support.

There is a “single” Win32 GUI—with variations to support OLE and Unicode. On the surface, they look the same.

Fortunately, the basic interface is the same for all versions. There is a single top-level window that can be split into two or more panes. The panes, in turn, may be used to display multiple views of a buffer, multiple buffers, or a mixture of both. In vile parlance these panes are called “windows,” but to avoid confusion, we will continue to call them “panes” in the following discussion.





Building xvile





Although there are binary packages for xvile, you may wish to compile it on a platform with no package support.

When building xvile, you have to choose which toolkit version to use. This is done when you configure vile with the configure command.[63] The relevant options are:

--with-screen= value

Specify terminal driver. The default is tcap, for the termcap/terminfo driver. Other values include curses, ncurses, ncursesw, X11, OpenLook, Motif, Athena, Xaw, Xaw3d, neXtaw, and ansi.



--with-x

Use the X Window System. This is the “No Toolkit” version.



--with-Xaw-scrollbars

Use Xaw scrollbars rather than the vile custom scrollbars.



--with-drag-extension

Use the drag/scrolling extension with Xaw.





xvile Basic Appearance and Functionality





The following figures show xvile’s Motif interface. It is similar to the Athena interface.





Figure 18-2. The xvile GUI window



Figure 18-2 shows three panes:

The manpage for vile, which shows the use of underlining and boldface.



A buffer misc.c, from tin, which shows syntax highlighting (this time with colors—grayscaled for printing—for preprocessor statements, comments, and keywords).



A three-line pane, which is active (noted by a darker status line), named [Completions], for filename completions. The pane is coordinated with the minibuffer (the colon command line): the first line reads Completions prefixed by /usr/build/in/tin-1.9.2+/src/m:, and the minibuffer reads Find file: m. The rest of the pane contains the actual filenames that match. The first line of [Completions] and the contents change as the user completes the filename (and presses TAB to tell vile to show the reduced set of choices).





Figure 18-3. Buffers and completions in vile



Figure 18-3 also shows three panes:

The [Help] pane, which of course shows the most important feature of an editor (how to exit without modifying your files). ☺



The [Buffer List], which indicates that charset.c is the # (previous) buffer. The % (current) buffer is not shown on the list, since only the “visible” buffers are displayed in this copy of [Buffer List]. Supplying an argument to the * command would have shown the invisible buffers as well. Buffers 0 and 2 are charset.c and misc.c. They have been loaded, so their sizes (12425 and 89340) are displayed in the [Buffer List]. Buffer 1 (<vile.1>) holds a formatted manpage generated by a macro and does not correspond to a file.[64] Buffer 3 (color.c) has not been loaded, so a u is displayed in the first column, and the size is shown as zero.



The [Completions] buffer is active. This time it displays tag completions for the partial match co, and the Completions prefixed message is not shown because the buffer is scrolled down, which is another side effect of pressing TAB: vile cycles through a scrolling action so that all of the choices will be shown, even when the window is small.[65]





Generated buffers such as [Help] and [Buffer List] are “scratch” buffers. When popped down, they are closed, and their content is discarded. There are other buffers, e.g., those containing scripts, which are “invisible.” Both are normally not shown in [Buffer List].





Scrollbars





At the right of each pane is a scrollbar that may be used in the customary fashion to move about in the buffer. Note, however, that the customary fashion varies from toolkit to toolkit. In the Athena and “No Toolkit” versions, the middle mouse button may be used to drag the “thumb” or visible indicator around. The left and right mouse buttons move down or up (respectively) in the buffer. The amount moved depends on the location of the mouse cursor on the scrollbar. Placing it near the top will scroll by as little as one line. When placed near the bottom, the text will scroll by as much as a full pane.

The Motif scrollbar is probably more familiar. The leftmost mouse button is used for all operations. Clicking on the little arrows will move up or down by one line. The scrollbar indicator may be dragged in order to move about, and scrolling up or down by an entire pane can be accomplished by clicking above or below the indicator.

In each version, there is a small handle above or below (i.e., between) scrollbars that may be used to adjust the size of two adjacent panes. In the “No Toolkit” version of xvile, the pane resize handle blends in with the status line of two adjacent panes. In the other versions, the resize handle is more distinguishable. But in each case, the mouse cursor will change to a heavy vertical double arrow when placed above the resize handle. The windows may be resized by clicking on and dragging the handle.

A pane can be split into two by holding the Ctrl key down and clicking the left mouse button on a scrollbar. Then you will have two views of a particular buffer. Other vile commands may be used to replace one of the views with another buffer if desired. A pane may be deleted by holding the Ctrl key down and clicking the middle mouse button. Sometimes after creating a lot of panes, you find yourself wanting to use all of the window real estate for just one pane. To do this, Ctrl-click the right mouse button; all other panes will be removed, leaving the entire xvile window containing only the pane on which you clicked. These actions are summarized in Table 18-2.

Table 18-2. vile pane management commands

CommandFunction

Ctrl-left button On a scrollbar, split the pane.



Ctrl-middle button Delete a pane.



Ctrl-right button Make the clicked pane the only pane.





Setting the cursor position and mouse motions





Within the text area of a pane, the cursor may be set by clicking the left mouse button. This not only sets the cursor position, but also sets the pane in which editing is being done. To set just the pane but preserve the old position, click on the status line below the text you wish to edit.

A mouse click is viewed as a motion, just like 4j is considered a motion. To delete five lines, you could enter d4j, which will delete the current line and the four below it. You can do the same thing with a mouse click. Position your cursor at the place you want to start deleting from and then press d. After this, click in the buffer at the point to which you wish to delete. Mouse clicks are real motions and may be used with other operators as well.





Selections





Selections may be made by holding the left mouse button down and dragging with the mouse. This is called the PRIMARY selection. Release of the mouse button causes the selection to be yanked and made available (if desired) for pasting. You can force the selected region to be rectangular by holding the Ctrl key down while dragging with the left button depressed. If the dragging motion goes out of the current window, text will be scrolled in the appropriate direction, if possible, to accommodate selections larger than the window. The speed at which the scrolling occurs will increase with the passage of time, making it practical to select large regions of text quickly.

Individual words or lines may be selected by double- or triple-clicking on them.

A selection may be extended by clicking the right mouse button. As with the left button, the selection can be adjusted or scrolled by holding the right button down and dragging with it. Selections may be extended in any window open to the same buffer as the one in which the selection was started. That is, if you have two views of a buffer (in two different panes), one containing the start of the buffer and the other the end, it is possible to select the entire buffer by clicking the left button at the beginning of the pane that shows the beginning of the buffer and then clicking the right button in the pane that shows the end of the buffer. Also, selections may be extended in a rectangular fashion by holding the Ctrl key down in conjunction with the right mouse button.

The middle button is used for pasting the selection. By default, it pastes at the last text cursor position. If the Shift key is held down while clicking the middle button, the paste occurs at the position of the mouse cursor.

A selection may be cleared (if owned by xvile) by double-clicking on one of the status lines.





Clipboard





Data may be exchanged between many X applications via the PRIMARY selection. This selection is set and manipulated as described previously.

Other applications use the CLIPBOARD selection to exchange data between applications. On many Sun keyboards, selected text is moved to the clipboard by pressing the COPY key and pasted by pressing the PASTE key. If you find that you cannot paste text selected in xvile into other applications (or vice versa), it may well be that these applications use the CLIPBOARD selection instead of the PRIMARY selection. (The other mechanism used among really old applications involves the use of a ring of cut buffers.)

xvile provides two commands for manipulating the clipboard: copy-to-clipboard and paste-from-clipboard. When copy-to-clipboard is executed, the contents of the current selection are copied to the special clipboard kill register (denoted by ; in the register list). When an application requests the clipboard selection, xvile gives it the contents of this kill register. The paste-from-clipboard command requests clipboard data from the current owner of the CLIPBOARD selection.

Users of Sun systems may want to put the following key bindings in their .vilerc file in order to make use of the COPY and PASTE keys found on their keyboards:

bind-key copy-to-clipboard #-^ bind-key paste-from-clipboard #-*

Key bindings are described in detail later in this chapter.





Resources





xvile has many resources that can be used to control appearance and behavior. Font choice is particularly important if you want italic or oblique fonts to be displayed properly. vile’s documentation has a complete list of resources, as well a sample set of .Xdefault entries.





Adding menus





The Motif and Athena versions have menu support. Menu items, which are user-definable, are read from the .vilemenu file, in the current or home directory.

xvile allows three types of menu items:

Built-in, i.e., specific to the menuing system, such as rereading the .vilerc file or spawning a new copy of xvile



Direct invocation of built-in commands (e.g., displaying the [Buffer List])



Invocation of arbitrary command strings (e.g., running interactive macros, such as a search command)





We make a distinction between the last two because the authors prefer making vile able to check the validity of commands before they are executed.





Building winvile





Binaries are available for each release of winvile, but you may wish to compile one of the interim patch versions. The sources provide makefiles for the Microsoft (makefile.wnt) and Borland (makefile.tbc) compilers. The former has more features, providing options for building with OLE, perl, and built-in syntax highlighting. The Win32 GUI can be built with either compiler environment.





winvile Basic Appearance and Functionality





Figures 18-4 and 18-5 show winvile’s Win32 GUI interface. On the surface, it is much like the “No Toolkit” X11 interface, having scrollbars. Underneath the surface—which is easily accessed—it is more elaborate than the Motif interface.





Figure 18-4. winvile with non-Unicode font



Figure 18-4 shows a view of winvile editing Unicode data:

The font dialog is initially set to the fixed-pitch system font. Like xvile, the font can be set when winvile is started, or via a script. It can also be set via an OLE server. Finally, as shown here, it can use the Win32 common controls.



The data is Unicode UTF-16, with no byte order mark. It is underlined, since the highlighting palette used underlining and cyan for coloring quoted strings.



The default system font cannot display the characters in the file. winvile sees that the font is small, and displays the Unicode data in hexadecimal form.





Figure 18-5. winvile with Unicode font



Figure 18-5 shows the result of selecting a more capable font. If you select the system font again, winvile will show the hexadecimal values again. If you prefer to see the wide characters as hexadecimal all the time, vile has an option setting for this purpose.





Figure 18-6. The winvile recent files menu



Figure 18-6 shows some of the winvile menu functions, which include:

winvile extends the system menu, which is accessed by right-clicking on the title bar of the window.

It also has the same selections on a right-click pop-up menu, eliminating the need to go up to the title bar. That is enabled by the “Menu” entry at the bottom.



The menus provide the open, save, print, and font operations typical of GUI applications. You can also set winvile’s current working directory with the CD entry.

The corresponding dialogs are also accessible from the Win32 console version, though without a menu.



winvile also allows you to browse the Windows Favorites folder.



The recent files (and recent folders) entries select from a user-configurable number of “recent” files (or folders). winvile saves the names in the user’s registry data, making them available for each instance of winvile that might be running.





* * *



[62] Sun Microsystems dropped support for OpenLook before releasing Solaris 9 in 2002.



[63] The configure script should work for any Unix (or similar) platform. For building on OpenVMS, use the vmsbuild.com script. Build instructions are in comments at the top of the script.



[64] The angle-brackets in the name <vile.1> are a convention to avoid naming conflicts, since two buffers are not allowed to have the same name.



[65] The [Completions] buffer is automatically sized, showing no more lines than necessary. If it is too large for the available space, vile borrows up to ¾ of the space from an adjacent pane.





Extended Regular Expressions





We introduced extended regular expressions earlier in the section Extended Regular Expressions. vile provides essentially the same facilities as nvi’s extended option. This includes the POSIX bracket expressions for character classes, [[:alnum::]], with some extensions (additional classes and abbreviations), and interval expressions, such as {,10}. The syntax is somewhat different from nvi, relying on additional backslash-escaped characters:

\|

Indicates alternation: house\|home.



\+

Matches one or more of the preceding regular expression.



\?

Matches zero or one of the preceding regular expression.



\(...\)

Provides grouping for *, \+, and \?, as well as making matched subtexts available in the replacement part of a substitute command (\1, \2, etc.).



\s, \S

Match whitespace and nonwhitespace characters, respectively.



\w, \W

Match “word-constituent” characters (alphanumerics and the underscore, “_”) and non-word-constituent characters, respectively. For example, \w\+ would match C/C++ identifiers and keywords.[66]



\d, \D

Match digits and nondigits, respectively.



\p, \P

Match printable and nonprintable characters, respectively. Whitespace is considered to be printable.





vile allows the escape sequences \b, \f, \r, \t, and \n to appear in the replacement part of a substitute command. They stand for backspace, form feed, carriage return, tab, and newline, respectively. Also, from the vile documentation:

Note that vile mimics perl’s handling of \u\L\1\E instead of vi’s. Given :s/\(abc\)/\u\L\1\E/, vi will replace with abc whereas vile and perl will replace with Abc. This is somewhat more useful for capitalizing words.





* * *



[66] For the pedantic among you, it also matches identifiers that start with a leading digit; usually this isn’t much of a problem.





Improved Editing Facilities





This section describes the features of vile that make simple text editing easier and more powerful.





Command-Line History and Completion





vile records your ex commands in a buffer named [History]. This feature is controlled with the history option, which is true by default. Turning it off disables the history feature and removes the [History] buffer. The command show-history splits the screen and displays the [History] buffer in a new window.

The colon command line is really a minibuffer. You can use it to recall lines from the [History] buffer and edit them.

You use the ↑ and ↓ keys to scroll backward and forward in the history, and ← and → to move around within the line. Your current delete character (usually BACKSPACE) can be used to delete characters. Any other characters you type will be inserted at the current cursor position.

You can toggle the minibuffer into vi mode by typing the mini-edit character (by default, ^G). When you do this, vile will highlight the minibuffer using the mechanism specified by the mini-hilite option. The default is reverse, for reverse video. In vi mode, you can use vi-style commands for positioning. You can also use other vile commands that are appropriate to editing within a single line, such as i, I, a, and A. vile decides which commands to accept based on its command tables, which allows your key bindings to work in the minibuffer, too.

An interesting feature is that vile will use the history to show you previous data that corresponds to the command you’re entering. For instance, after typing :set followed by a space, vile will prompt you with Global value:. At that point, you can use ↑ to see previous global variables that you have set, should you wish to change one of them.

The ex command line provides completion of various sorts. As you type the name of a command, you can hit the TAB key at any point. vile fills out the rest of the command name as much as possible. If you type a TAB a second time, vile creates a new window that shows you all the possible completions.

Completion applies to built-in and user-defined vile commands, tags, filenames, modes (described later in this chapter), variables, enumerated values (such as color names), and to the terminal characters (the character settings such as backspace, suspend, and so on, derived from your stty settings).

As a side note, this leads to an interesting phenomenon. In vi-style editors, commands may have long names, but they tend to be unique in the first few characters, since abbreviations are accepted. In Emacs-style editors, command names often are not unique in the first several characters, but command completion still allows you to get away with less typing.





Tag Stacks





Tag stacking is described earlier in the section Tag Stacks. In vile, tag stacking is available and straightforward. It is somewhat different than the other clones, most notably in the vi mode commands that are used for tag searching and popping the tag stack. Table 18-3 shows the vile tag commands.

Table 18-3. vile tag commands

CommandFunction

next-tag Continues searching through the tags file for more matches.



pop[!] Pops a cursor position off the stack, restoring the cursor to its previous position.



show-tagstack Creates a new window that displays the tag stack. The display changes as tags are pushed onto or popped off of the stack.



ta[g][!] [tagstring] Edit the file containing tagstring as defined in the tags file. The ! forces vile to switch to the new file if the current buffer has been modified but not saved.





The vi mode commands are described in Table 18-4.

Table 18-4. vile command mode tag commands

CommandFunction

^]

Look up the location of the identifier under the cursor in the tags file, and move to that location. The current location is automatically pushed onto the tag stack.



^T, ^X ^]

Return to the previous location in the tag stack, i.e., pop off one element.



^A ^]

Same as the :next-tag command.





As in the other editors, options control how vile manages the tag-related commands, as shown in Table 18-5.

Table 18-5. vile options for tag management

OptionFunction

pin-tagstack Makes tag searches and pop ups not change the current window, thereby “pinning” it. This option is false by default.



tagignorecase Makes tag searches ignore case. This option is false by default.



taglength Controls the number of significant characters in a tag that is to be looked up. The default value of zero indicates that all characters are significant.



tagrelative When using a tags file in another directory, filenames in that tags file are considered to be relative to the directory where the tags file is.



tags Can be set to a whitespace-separated list of tags files to use for looking up tags. vile loads all tags files into separate buffers that are hidden by default, but that can be edited if you wish. You can place environment variables and shell wildcards into tags.



tagword Uses the whole word under the cursor for the tag lookup, not just the subword starting at the current cursor position. This option is disabled by default, which keeps vile compatible with vi.





Infinite Undo





vile is similar in principle but different in practice from the other editors. Like elvis and Vim, you can set an undo limit, but like nvi, the . command will do the next undo or redo as appropriate. Separate vi mode commands implement successive undo and redo.

vile uses the undolimit option to control how many changes it will store. The default is 10, meaning that you can undo up to the 10 most recent changes. Setting it to zero allows true “infinite undo,” but this may consume a lot of memory.

To start an undo, first use either the u or ^X u commands. Then, each successive . command will do another undo. Like vi, two u commands just toggle the state of the change; however, each ^X u command does another undo.

The ^X r command does a redo. Typing . after the first ^X r will do successive redos. You can provide a count to the ^X u and ^X r commands, in which case vile performs the requested number of undos or redos.





Arbitrary Length Lines and Binary Data





vile can edit files with arbitrary length lines, and with an arbitrary number of lines.

vile automatically handles binary data. No special command lines or options are required. To enter 8-bit text, type ^V followed by an x and two hexadecimal digits, or a 0 and three octal digits, or three decimal digits.

You can also enter 16-bit Unicode values by typing ^V followed by a u and up to four hexadecimal digits. If the current buffer’s file-encoding option is one of the Unicode flavors (utf-8, utf-16, or utf-32), vile stores it directly as UTF-8, displaying it according to the capabilities of the terminal or display.

This leads us into the topic of localization.





Locale support





For many years, vile had only rudimentary locale support. In part this was because locale support on the various platforms was rudimentary (except for vendor Unix systems). It had its own character type tables (i.e., control, numeric, printable, punctuation, as well as application-specific filename, wildcard, shell), allowing you to specify which of those non-ASCII characters were printable.

Times change, and vile continues to evolve according to its users’ needs. Here is a brief summary of those changes, ordered logically rather than in the order they were developed:

Rather than having a fixed notion of the character types, vile imports the host’s character type tables and then provides commands to modify the data via scripts.[67]



vile regular expressions support POSIX character classes, as well as classes corresponding to vile’s own character types.



vile supports extraction of tokens from the screen, e.g., for tags, for scripting, etc. Once, these tokens were a mixture of character-type tests with special parsing logic. Now, they are purely regular expressions, with no need for the parsing logic.



Editing a file containing 8-bit data—e.g., data encoded in ISO-8859-7 (Greek)—when the host’s locale encoding uses UTF-8 can be challenging. When vile starts up, it checks whether the host locale ends with UTF-8 (or similar), e.g., el_GR.UTF-8. If so, it then supports editing in the corresponding 8-bit locale, e.g., el_GR.



Similarly, when editing files in a host environment supporting UTF-8, there are files encoded in UTF-8. In the newest release, you can tell vile to write a file in various Unicode encodings, and to read the same encodings. The 8-bit editing model is carried forward, translating to the 8-bit encoding for buffers that are marked as 8-bit, and directly editing (i.e., with no translation) the Unicode buffers.





These are all extensions; at each stage the older features are still retained.

There are other aspects of localization that are not addressed in vile, such as message formatting and text collating order.





File formats





When vile reads a file, it makes several guesses about its content, in order to present you with useful data:

It checks whether the file permissions allow you to write to the file.



It checks for line endings, which may be different flavors of CR, LF, or CR/LF.



It checks for Unicode byte order marks.



It checks for Unicode multibyte encodings.





Based on these checks, vile may set properties (called “modes”) of the newly read buffer that apply to that buffer. In addition, it may translate the data as it is read:

It removes the line endings from each line, remembering the associated recordseparator mode.



If the file is missing a final line ending, vile sets the nonewline option.



It translates UTF-16 and UTF-32 data into UTF-8, remembering the associated file-encoding option.





When you tell vile to write a buffer to a file, it uses these local option settings to reconstruct the file.





Incremental Searching





As mentioned earlier in the section Incremental Searching, you perform incremental searching in vile using the ^X S and ^X R commands. It is not necessary to set an option to enable incremental searching.

The cursor moves through the file as you type, always being placed on the first character of the text that matches. ^X S incrementally searches forward through the file, whereas ^X R incrementally searches backward.

You may wish to add the following commands (described later in The vile Editing Model) to your .vilerc file to make the more familiar / and ? search commands work incrementally:

bind-key incremental-search / bind-key reverse-incremental-search ?

Also of interest is the “visual match” facility, which highlights all occurrences of the matched expression. For a .vilerc file:

set visual-matches reverse

directs vile to use reverse video for visual matching. Since the highlighting can sometimes be visually distracting, the = command turns off any current highlighting until you enter a new search pattern.





Left-Right Scrolling





As mentioned earlier in the section Left-Right Scrolling, you enable left-right scrolling in vile using :set nolinewrap. Unlike the other editors, left-right scrolling is the default. Long lines are marked at the left and right edges with < and >. The value of sideways controls the number of characters by which vile shifts the screen when scrolling left to right. With sideways set to zero, each scroll moves the screen by one third. Otherwise, the screen scrolls by the desired number of characters.





Visual Mode





vile is different from elvis and Vim in the way you highlight the text you want to operate on. It uses the “quoted motion” command, q.

You enter q at the beginning of the region, any other vi motions to get to the opposite end of the region, and then another q to end the quoted motion. vile highlights the marked text.

Arguments to the q command determine what kind of highlighting it will do. 1q (same as q) does an exact highlighting, 2q does line-at-a-time highlighting, and 3q does rectangular highlighting.

Typically, you use a quoted motion in conjunction with an operator, such as d or y. Thus, d3qjjwq deletes the rectangle indicated by the motions. When used without an operator, the region is left highlighted. It can be referred to later using ^S. Thus, d ^S will delete the highlighted region.

In addition, rectangular regions can be indicated through the use of marks.[68] As you know, a mark can be used to refer to either a specific character (when referred to with `) or a specific line (when referred to with '). In addition, referring to the mark (say, a mark set with mb) with `b instead of 'b can change the nature of the operation being done—d'b will delete a set of lines, and d`b will delete two partial lines and the lines in between. Using the ` form of mark reference gives a more “exact” region than the ' form of mark reference.

vile adds a third form of mark reference. The \ command can be used as another way of referring to a mark. By itself, it behaves just like ` and moves the cursor to the character at which the mark was set. When combined with an operator, however, the behavior is quite different. The mark reference becomes “rectangular,” such that the action d\b will delete the rectangle of characters whose corners are marked by the cursor and the character that holds mark b:

KeystrokesResults

ma The 6th edition of <citetitle>Learning the vi Editor</citetitle> brings thebook into the late 1990&rsquo;s. In particular, besides the &ldquo;original&rdquo; version of <command>vi</command> that comes as a standard part of every Unix system, there are now a number of freely available &ldquo;clones&rdquo; or work-alike editors.



Set mark a at the b in book.



3jfr The 6th edition of <citetitle>Learning the vi Editor</citetitle> brings the book into the late 1990&rsquo;s. In particular, besides the &ldquo;original&rdquo; version of <command >vi</command> that comes as a standard part of every Unix system, there are now a number of freely available &ldquo;clones&rdquo; or work-alike editors.



Move the cursor to the r in number to mark the opposite corner.



^A ~\a The 6th edition of <citetitle>Learning the vi Editor</citetitle> brings the BOOK INTO The late 1990&rsquo;s. In particulAR, BESIDES the &ldquo;original&rdquo; version of <command>vi</COMMAND> that comes as a standard part of every Unix system, there are nOW A NUMBER of freely available &ldquo;clones&rdquo; or work-alike editors.



Toggle the case of the rectangle bounded with mark a.





The commands that define arbitrary regions and operate upon them are summarized in Table 18-6.

Table 18-6. vile block mode operations

CommandOperation

q Start and end a quoted motion.



^A r Open up a rectangle.



> Shift text to the right. Same as ^A r when the region is rectangular.



< Shift text to the left. Same as d when the region is rectangular.



y Yank the whole region. vile remembers that it was rectangular.



c Change the region. For a nonrectangular region, delete all the text between the end points and enter insert mode. For a rectangular region, prompt for the text to fill the lines.



^A u Change the case of the region to all uppercase.



^A l Change the case of the region to all lowercase.



^A ~ Toggle the case of all alphabetic characters in the region.



^A SPACE Fill the region with spaces.



p, P Put the text back. vile does a rectangular put if the original text was rectangular.



^A p, ^A P Force previously yanked text to be put back as if it were rectangular. The width of the longest yanked line is used for the rectangle’s width.





* * *



[67] This feature is useful even on the vendor Unix systems, which do not always deliver correct tables.



[68] Thanks to Paul Fox for this explanation.





Programming Assistance





vile’s programming assistance capabilities are discussed in this section.





Edit-Compile Speedup





vile uses two straightforward vi mode commands to manage program development, shown in Table 18-7.

Table 18-7. vile program development vi mode commands

CommandFunction

^X !commandENTER Run command, saving the output in a buffer named [Output].



^X ^X Find the next error. vile parses the output and moves to the location of each successive error.





vile understands the Entering directory XXX and Leaving directory XXX messages that GNU make generates, allowing it to find the correct file, even if it’s in a different directory.

The error messages are parsed using regular expressions in the buffer [Error Expressions]. vile automatically creates this buffer, and then it uses the buffer when you use ^X ^X. You can add expressions to it as needed, and it has an extended syntax that allows you to specify where filenames, line numbers, columns, and so on appear in the error messages. Full details are provided in the online help, but you probably won’t need to make any changes, as it works pretty well “out of the box.”

vile’s error finder also compensates for changes in the file, keeping track of additions and deletions as you progress to each error.

The error finder applies to the most recent buffer created by reading from a shell command. For example, ^X!command produces a buffer named [Output], and :e !command produces a buffer named [!command]. The error finder will be set appropriately.

You can point the error finder at an arbitrary buffer (not just the output of shell commands) using the :error-buffer command. This lets you use the error finder on the output of previous compiler or egrep runs.





Syntax Highlighting





vile supports syntax highlighting in all configurations. It uses custom syntax filter programs to perform syntax coloring. These may be built into vile or run as external programs. vile sends the contents of the buffer to be colored by the syntax filter, reads a marked-up version of it, and applies the markup to color the buffer.





Note


Built-in filters are faster than external programs, and eliminate interference from your shell when displaying in a terminal. For some platforms, the syntax filters can be dynamically loaded. This allows the editor executable to be smaller, though not as fast as with the built-in filters.



There are currently 71 programs, as well as a separate program for Unix manpages. Some of the programs are used for more than one type of file. For instance, C, C++, and Java have similar syntax, but use different keywords.

vile provides macros that run the syntax filters on demand, or automatically as you modify the buffer. These are summarized in Table 18-8.

Table 18-8. vile syntax highlighting commands

CommandKey bindingFunction

:HighlightFilter Invoke syntax-highlighting filter on the current buffer. vile chooses a filter based on an extended property of the buffer, called a major mode (discussed later in the section Major Modes).

If the filters are built-in, vile’s initialization sets the autocolor mode to invoke this macro five seconds after you stop modifying a buffer.



:HighlightFilterMsg ^X-q Attach highlighting to the current buffer using HighlightFilter. Display a message on completion.[a]



:HighlightClear ^X-Q Clear all highlighting from the current buffer. This does not alter the buffer’s major mode.



:set-highlighting majormode Change the buffer’s major mode to majormode and run the syntax highlighter.



:show-filtermsgs Show syntax-filter error messages for the current buffer. If the syntax filter finds any errors, it reports them, and vile displays them in the [Filter Messages] buffer and sets the error buffer to allow you to step through the places where an error is found.



[a] When syntax highlighting was first implemented in vile in the mid-1990s, it was important to show that it was completed. Times change—machines are faster.





Each time a syntax filter runs, it reads one or more external files containing the keywords to be highlighted, along with their corresponding color and video attributes (bold, underline, italic). It searches for these files (suffixed .keywords) using the name of the buffer’s majormode. The search rules are documented in the online help. You can use the :which-keywords macro to show the locations where vile will look for the files, and where it finds them. See Example 18-1.

Example 18-1. Sample output of “:which-keywords cmode”

Show which keyword-files are tested for: cmode (* marks found-files) $cwd ./.c.keywords $HOME ~/.c.keywords ~/.vile/c.keywords $startup-path * /usr/local/share/vile/c.keywords



The major mode, which always ends with “mode”





Your current working directory





vile’s search path for scripts





Whether the configuration is X11, terminal (termcap, terminfo, curses), or Windows, vile’s syntax filters use a common set of colors, defined in classes: Action, Comment, Error, Ident, Ident2, Keyword, Keyword2, Literal, Number, Preproc, and Type. Most of the keyword definitions refer to a class. Doing this allows you to modify all of the colors by changing just one file, normally your $HOME/.vile.keywords file. The online help gives details on customizing the syntax colors.

On the one hand, because syntax highlighting is accomplished with an external program, it should be possible to write any number of highlighters for different languages. On the other hand, because the facilities are rather low-level, doing so is not for nonprogrammers. The online help describes how the highlight filters should work.

The directory ftp://invisible-island.net/vile/utilities contains user-contributed filters for coloring makefiles, input, perl, HTML, and troff. It even contains a macro that will color the lines in RCS files according to their age!





Interesting Features





vile has a number of interesting features that are the topic of this section:

The vile editing model

vile’s editing model is somewhat different from vi’s. Based on concepts from Emacs, it provides key rebinding and a more dynamic command line.



Major modes

vile supports editing “modes.” These are groups of option settings that make it convenient for editing different kinds of files.



The procedure language

vile’s procedure language allows you to define functions and macros that make the editor more programmable and flexible.



Miscellaneous small features

A number of smaller features make day-to-day editing easier.





The vile Editing Model





In vi and the other clones, editing functionality is “hardwired” into the editor. The association between command characters and what they do is built into the code. For example, the x key deletes characters, and the i key enters insert mode. Without resorting to severe trickery, you cannot switch the functionality of the two keys (if it can even be done at all).

vile’s editing model, derived from Emacs through MicroEMACS, is different. The editor has defined, named functions, each of which performs a single editing task, such as delete-next-character or delete-previous-character. Many of the functions are then bound to keystrokes, such as binding delete-next-character to x.[69]

vile has different flavors of key bindings for its insert, command, and selection modes. Here we are describing the bindings for the normal editing mode. Changing bindings is very easy to do. Use the :bind-key command, and as arguments, give the name of the function and then the key sequence to bind the function to. As mentioned earlier, you might put the following commands into your .vilerc file:

bind-key incremental-search / bind-key reverse-incremental-search ?

These commands change the / and ? search commands to do incremental searching.

In addition to predefined functions, vile contains a simple programming language that allows you to write procedures. You can then bind the command for executing a procedure to a keystroke sequence. GNU Emacs uses a variant of Lisp for its language, which is extremely powerful. vile has a somewhat simpler, less general-purpose language.

Also, as in Emacs, the vile command line is very interactive. Many commands display a default value for their operand, which you can either edit if inappropriate or select by hitting ENTER. As you type vi mode editing commands, such as those that change or delete characters, you will see feedback about the operation in the status line.

The “amazing” ex mode that Paul referred to earlier is best reflected in the behavior of the :s (substitute) command. It prompts for each part of the command: the search pattern, the replacement text, and any flags.

As an example, let’s assume you wish to change all instances of perl to awk everywhere in your file. In the other editors, you’d simply type :1,$s/perl/awk/gENTER, and that’s what would appear on the command line. The following examples describe what you see on the vile colon command line as you type:

KeystrokesResults

:1,$s The first part of the substitute command.



/ substitute pattern:

vile prompts you for the pattern to search for. Any previous pattern is placed there for you to reuse.



perl/ replacement string:

At the next / delimiter, vile prompts you for the replacement text. Any previous text is placed there for you to reuse.



awk/ (g)lobally, ([1-9])th occurrence on line, (c)onfirm, and/or (p)rint result:

At the final delimiter, vile prompts for the optional flags. Enter any desired flags, then press ENTER.





vile follows through with this style of behavior on all appropriate ex commands. For example, the read command (:r) prompts you with the name of the last file you read. To read that file again, just hit ENTER.

Finally, vile’s ex command parser is weaker than in the other editors. For example, you cannot use search patterns to specify line ranges (:/now/,/forever/s/perl/awk/g), and the move command (m) is not implemented. In practice, what’s not implemented does not seem to hinder you very much.





Major Modes





A major mode[70] is a collection of option settings that apply when editing a certain class of file. These options apply on a per-buffer basis, such as the tab-stop settings.

vile provides three types of options:

Universal, applied to the program



Buffer, applied to the content of a memory buffer



Window, applied to windows (“panes,” in our terminology)





The buffer—and window—option settings can be global or local values. Any buffer (or window, depending on the option) can have its own private (local) option value. If it does not have a private value, it uses the global value. Major modes add a level between the buffer global and local values by providing option values that a buffer uses if it does not have a private value.

vile has two built-in major modes: cmode, for editing C and C++ programs, and vilemode, for its scripts that are loaded into memory buffers. With cmode, you can use % to match C preprocessor conditionals (#if, #else, and #endif). vile will do automatic source code indentation based on the placement of braces ({ and }), and it will do smart formatting of C comments. The tabstop and shiftwidth options are set on a per-major-mode basis as well.

Using major modes, you can apply the same features to programs written in other languages. This example, courtesy of Thomas Dickey, defines a new major mode, shmode, for editing Bourne shell scripts. (This is useful for any Bourne-style shell, such as ksh, bash, or zsh.)

define-mode sh set shsuf "\.sh$" set shpre "^#!\\s*\/.*sh\\>$" define-submode sh comment-prefix "^\\s*/[:#]" define-submode sh comments "^\\s*/\\?[:#]\\s+/\\?\\s*$" define-submode sh fence-if "^\\s*\\<if\\>" define-submode sh fence-elif "^\\s*\\<elif\\>" define-submode sh fence-else "^\\s*\\<else\\>" define-submode sh fence-fi "^\\s*\\<fi\\>"

The shsuf (shell suffix) variable describes the filename suffix that indicates a file is a shell script. The shpre (shell preamble) variable describes a first line of the file that indicates that the file contains shell code. The define-submode commands then add options that apply only to buffers where the corresponding major mode is set. The examples here set up the smart comment formatting and the smart % command matching for shell programs.

The example shown is more verbose than needed. vile’s scripting language recognizes a more concise description using ~with:

define-mode sh ~with define-submode sh suf "\.sh$" pre "^#!\\s*\/.*sh\\>$" comment-prefix "^\\s*/[:#]" comments "^\\s*/\\?[:#]\\s+/\\?\\s*$" fence-if "^\\s*\\<if\\>" fence-elif "^\\s*\\<elif\\>" fence-else "^\\s*\\<else\\>" fence-fi "^\\s*\\<fi\\>" ~endwith

With its initialization scripts, vile provides 90 predefined major modes. Use the :show-majormodes command to see the definitions of the available major modes.

The suffix and prefix are criteria used by vile to decide which major mode to apply, when it reads a file into a buffer.[71] Table 18-9 lists all of the criteria.

Table 18-9. Major mode criteria

Criteria

Description



after Force the defined major mode to be checked after the given major mode. Normally, major modes are checked in the order in which they are defined.



before Force the defined major mode to be checked before the given major mode. Normally, major modes are checked in the order in which they are defined.



mode-filename (mf) A regular expression describing filenames for which the corresponding major mode will be set. The expression is applied only to the portion of the complete pathname after removing the directory name.



mode-pathname (mp) A regular expression describing pathnames for which the corresponding major mode will be set.



preamble (pre) A regular expression describing the first line of filenames for which the corresponding major mode will be set.



qualifiers Tells how to combine the preamble and suffixes criteria. Use all to tell vile to use both, and any to use either.



suffixes (suf) A regular expression describing filename suffixes for which the corresponding major mode will be set. The expression is applied only to the portion of the filename starting with the first period.





You can always tell vile to use a specific major mode; for example:

:setl cmode

will set it to “c” mode.[72] But that does not update the syntax highlighting. Use the macro:

:set-h cmode

(set-highlighting; see Table 18-8), which does both parts.





The Procedure Language





vile’s procedure language is almost unchanged from that of MicroEMACS. Comments begin with a semicolon or a double quote character. Environment variable names (editor options) start with a $, and user variable names start with %. A number of built-in functions exist for doing comparisons and testing conditions; their names all begin with &. Flow control commands and certain others begin with ~. An @ with a string prompts the user for input, and the user’s answer is returned. This rather whimsical example from the macros.doc file should give you a taste of the language’s flavor:

~if &sequal %curplace "timespace vortex" insert-string "First, rematerialize\n" ~endif ~if &sequal %planet "earth" ;If we have landed on earth... ~if &sequal %time "late 20th century" ;and we are then write-message "Contact U.N.I.T." ~else insert-string "Investigate the situation....\n" insert-string "(SAY 'stay here Sara')\n" ~endif ~elseif &sequal %planet "luna" ;If we have landed on our neighbor... write-message "Keep the door closed" ~else setv %conditions @"Atmosphere conditions outside? " ~if &sequal %conditions "safe" insert-string &cat "Go outside......" "\n" insert-string "lock the door\n" ~else insert-string "Dematerialize..try somewhen else" newline ~endif ~endif

You can store these procedures into a numbered macro or give them names that can be bound to keystrokes. The procedure just shown is most useful when using the Tardis vile port. ☺

This more realistic example from Paul Fox runs grep, searching for the word under the cursor in all C source files. It then puts the results in a buffer named after the word, and sets things up so that the built-in error finder (^X ^X) will use this output as its list of lines to visit. Finally, the macro is bound to ^A g. The ~force command allows the following command to fail without generating an error message:

14 store-macro set-variable %grepfor $identifier edit-file &cat "!egrep -n " &cat %grepfor " *.[ch]" ~force rename-buffer %grepfor error-buffer $cbufname ~endm bind-key execute-macro-14 ^A-g

User-defined procedures can have parameters, much like the Bourne shell—but the parameters can be limited to specific data types. This makes procedures work as expected with vile’s editing model (and command-history mechanism). The procedures are not completely interchangeable with the built-in commands, since there is not yet a mechanism for making the undo feature treat a whole macro as a single operation.

Finally, the read-hook and write-hook variables can be set to names of procedures to run after reading and before writing a file, respectively. This allows you to do things similar to the pre- and post-operation files in elvis and the autocommand facility in Vim.

The language is quite capable, including flow control and comparison features, as well as variables that provide access to a large amount of vile’s internal state. The macros.doc file in the vile distribution describes the language in detail.





Miscellaneous Small Features





Several other, smaller features are worth mentioning:

Piping into vile

If you make vile the last command in a pipeline, it will create a buffer named [Standard Input] and edit that buffer for you. This is perhaps the “pager to end all pagers.”



Editing Windows files

When set to true, the dos option causes vile to strip carriage returns at the end of a line in files when reading, and to write them back out again. This makes it easy to edit Windows files on a Unix or GNU/Linux system.



Text reformatting

The ^A f command reformats text, performing word wrapping on selected text. It understands C and shell comments (lines with a leading * or #) and quoted email (a leading >). It is similar to the Unix fmt command, but faster.



Formatting the information line

The modeline-format variable is a string that controls the way vile formats the status line. This is the line at the bottom of each window that describes the buffer’s status, such as its name, current major mode, modification status, insert versus command mode, and so on.[73]

The string consists of printf(3)-style percent sequences. For example, %b represents the buffer name, %m the major mode, and %l the line number if ruler has been set. Characters in the string that are not part of a format specifier are output verbatim.





vile has many other features. The vi finger-feel makes it easy to switch to vile from another editor. The programmability provides flexibility, and its interactive nature and use of defaults is perhaps friendlier than traditional vi for the novice.





* * *



[69] vile 9.6 has 421 defined functions (including some that are available only in the X11 or Win32 configurations), with predefined key bindings for about 260.



[70] vile’s documentation spells it as a single word.



[71] These criteria are a fourth category of option, counting universal, buffer, and window. They are not listed with the others in Table B-5 because you set them in an entirely different way.



[72] The setl command sets the local properties of the buffer. The command :set cmode sets the default major mode if vile is unable to recognize the file.



[73] vile’s documentation refers to this as the modeline. However, since vile also implements the vimodeline feature, we are calling it a status line, to reduce confusion.





Sources and Supported Operating Systems





The official WWW location for vile is http://invisible-island.net/vile/vile.html. The ftp location is ftp://invisible-island.net/vile/vile.tar.gz. The file vile.tar.gz is always a symbolic link to the current version.

vile is written in ANSI C. It builds and runs on Unix, OpenVMS, MS-DOS, Win32 console and Win32 GUI, BeOS, QNX, and OS/2.

Compiling vile is straightforward. Retrieve the distribution via ftp or from the web page. Uncompress and untar it, run the configure program, and then run make:

$gzip -d < vile.tar.gz | tar -xvpf - ... $ cd vile-*; ./configure ... $ make ...

vile should configure and build with no problems. Use make install to install it.





Note


If you want syntax coloring to work smoothly, you may wish to run configure with the option --with-builtin-filters. You should use flex (version 2.54a or newer) rather than lex, since Unix versions of that tool do not perform well. The configure script will also not accept a version of flex that is too old.



Should you need to report a bug or problem in vile, send email to the address vile@nongnu.org. This is the preferred way to report bugs. If necessary, you can contact Thomas Dickey directly at dickey@invisible-island.net.





Part IV. Appendixes





Part IV provides reference material that should be of interest to a vi user. This part contains the appendixes:

Appendix A, The vi, ex, and Vim Editors



Appendix B, Setting Options



Appendix C, Problem Checklists



Appendix D, vi and the Internet





Appendix A. The vi, ex, and Vim Editors





This appendix summarizes the standard features of vi in quick-reference format. Commands entered at the colon (known as ex commands because they date back to the original creation of that editor) are included, as well as the most popular Vim features.

This appendix presents the following topics:

Command-line syntax



Review of vi operations



Alphabetical list of keys in command mode



vi commands



vi configuration



ex basics



Alphabetical summary of ex commands





Command-Line Syntax





The three most common ways of starting a vi session are:

vi [options] file vi [options] +num file vi [options] +/pattern file

You can open file for editing, optionally at line num or at the first line matching pattern. If no file is specified, vi opens with an empty buffer.





Command-Line Options





Because vi and ex are the same program, they share the same options. However, some options only make sense for one version of the program. Options specific to Vim are so marked:

+[ num ]

Start editing at line number num, or the last line of the file if num is omitted.



+/ pattern

Start editing at the first line matching pattern. (For ex, this fails if nowrapscan is set in your .exrc startup file, since ex starts editing at the last line of a file.)



+? pattern

Start editing at the last line matching pattern.



-b

Edit the file in binary mode. {Vim}



-c command

Run the given ex command upon startup. Only one -c option is permitted for vi; Vim accepts up to 10. An older form of this option, +command, is still supported.



--cmd command

Like -c, but execute the command before any resource files are read. {Vim}



-C

Solaris vi: same as -x, but assume the file is encrypted already.

Vim: start the editor in vi-compatible mode.



-d

Run in diff mode. Works like vimdiff. {Vim}



-D

Debugging mode for use with scripts. {Vim}



-e

Run as ex (line-editing rather than full-screen mode).



-h

Print help message, then exit. {Vim}



-i file

Use the specified file instead of the default (~/.viminfo) to save or restore Vim’s state. {Vim}



-l

Enter Lisp mode for running Lisp programs (not supported in all versions).



-L

List files that were saved due to an aborted editor session or system crash (not supported in all versions). For Vim, this option is the same as -r.



-m

Start the editor with the write option turned off so that the user cannot write to files. {Vim}



-M

Do not allow text in files to be modified. {Vim}



-n

Do not use a swap file; record changes in memory only. {Vim}



--noplugin

Do not load any plug-ins. {Vim}



-N

Run Vim in a non-vi-compatible mode. {Vim}



-o[num]

Start Vim with num open windows. The default is to open one window for each file. {Vim}



-O[num]

Start Vim with num open windows arranged horizontally (split vertically) on the screen. {Vim}



-r [file]

Recovery mode; recover and resume editing on file after an aborted editor session or system crash. Without file, list files available for recovery.



-R

Edit files in read-only mode.



-s

Silent; do not display prompts. Useful when running a script. This behavior also can be set through the older - option. For Vim, applies only when used together with -e.



-s scriptfile

Read and execute commands given in the specified scriptfile as if they were typed in from the keyboard. {Vim}



-S commandfile

Read and execute commands given in commandfile after loading any files for editing specified on the command line. Shorthand for vim -c 'source commandfile'. {Vim}



-t tag

Edit the file containing tag, and position the cursor at its definition.



-T type

Set the option terminal type. This value overrides the $TERM environment variable. {Vim}



-u file

Read configuration information from the specified resource file instead of the default .vimrc resource file. If the file argument is NONE, Vim will read no resource files, load no plug-ins, and run in compatible mode. If the argument is NORC, it will read no resource files, but it will load plug-ins. {Vim}



-v

Run in full-screen mode (default for vi).



--version

Print version information, then exit. {Vim}



-V[num]

Verbose mode; print messages about what options are being set and what files are being read or written. You can set a level of verbosity to increase or decrease the number of messages received. The default value is 10 for high verbosity. {Vim}



-w rows

Set the window size so rows lines at a time are displayed; useful when editing over a slow dial-up line (or long distance Internet connection). Older versions of vi do not permit a space between the option and its argument. Vim does not support this option.



-W scriptfile

Write all typed commands from the current session to the specified scriptfile. The file created can be used with the -s command. {Vim}



-x

Prompt for a key that will be used to try to encrypt or decrypt a file using crypt (not supported in all versions).[74]



-y

Modeless vi; run Vim in insert mode only, without a command mode. This is the same as invoking Vim as evim. {Vim}



-Z

Start Vim in restricted mode. Do not allow shell commands or suspension of the editor. {Vim}





Although most people know ex commands only by their use within vi, the editor also exists as a separate program and can be invoked from the shell (for instance, to edit files as part of a script). Within ex, you can enter the vi or visual command to start vi. Similarly, within vi, you can enter Q to quit the vi editor and enter ex.

You can exit ex in several ways:

:x

Exit (save changes and quit).



:q!

Quit without saving changes.



:vi

Enter the vi editor.





* * *



[74] The crypt command’s encryption is weak. Don’t use it for serious secrets.





Review of vi Operations





This section provides a review of the following:

vi modes



Syntax of vi commands



Status-line commands





Command Mode





Once the file is opened, you are in command mode. From command mode, you can:

Invoke insert mode



Issue editing commands



Move the cursor to a different position in the file



Invoke ex commands



Invoke a Unix shell



Save the current version of the file



Exit vi





Insert Mode





In insert mode, you can enter new text in the file. You normally enter insert mode with the i command. Press the ESC key to exit insert mode and return to command mode. The full list of commands that enter insert mode is provided later in the section Insert Commands.





Syntax of vi Commands





In vi, editing commands have the following general form:

[n] operator [m]motion

The basic editing operators are:

c

Begin a change.



d

Begin a deletion.



y

Begin a yank (or copy).





If the current line is the object of the operation, the motion is the same as the operator: cc, dd, yy. Otherwise, the editing operators act on objects specified by cursor-movement commands or pattern-matching commands. (For example, cf. changes up to the next period.) n and m are the number of times the operation is performed, or the number of objects the operation is performed on. If both n and m are specified, the effect is n × m.

An object of operation can be any of the following text blocks:

word

Includes characters up to a whitespace character (space or tab) or punctuation mark. A capitalized object is a variant form that recognizes only whitespace.



sentence

Up to ., !, or ?, followed by two spaces.



paragraph

Up to the next blank line or paragraph macro defined by the para= option.



section

Up to the next nroff/troff section heading defined by the sect= option.



motion

Up to the character or other text object as specified by a motion specifier, including pattern searches.





Examples





2cw

Change the next two words.



d}

Delete up to the next paragraph.



d^

Delete back to the beginning of the line.



5yy

Copy the next five lines.



y]]

Copy up to the next section.



cG

Change to the end of the edit buffer.





More commands and examples may be found in the section Changing and deleting text later in this appendix.





Visual mode (Vim only)





Vim provides an additional facility, “visual mode.” This allows you to highlight blocks of text, which then become the object of edit commands such as deletion or saving (yanking). Graphical versions of Vim allow you to use the mouse to highlight text in a similar fashion. See the earlier section Visual Mode Motion for more information.

v

Select text in visual mode one character at a time.



V

Select text in visual mode one line at a time.



CTRL-V

Select text in visual mode in blocks.





Status-Line Commands





Most commands are not echoed on the screen as you input them. However, the status line at the bottom of the screen is used to edit these commands:

/

Search forward for a pattern.



?

Search backward for a pattern.



:

Invoke an ex command.



!

Invoke a Unix command that takes as its input an object in the buffer and replaces it with output from the command. You type a motion command after the ! to describe what should be passed to the Unix command. The command itself is entered on the status line.





Commands that are entered on the status line must be entered by pressing the ENTER key. In addition, error messages and output from the CTRL-G command are displayed on the status line.





vi Commands





vi supplies a large set of single-key commands when in command mode. Vim supplies additional multikey commands.





Movement Commands





Some versions of vi do not recognize extended keyboard keys (e.g., arrow keys, page up, page down, home, insert, and delete); some do. All versions, however, recognize the keys in this section. Many users of vi prefer to use these keys, as it helps them keep their fingers on the home row of the keyboard. A number preceding a command repeats the movement. Movement commands are also used after an operator. The operator works on the text that is moved.





Character





h, j, k, l

Left, down, up, right (←, ↓, ↑, →)



Spacebar

Right



BACKSPACE

Left



CTRL-H

Left





Text





w, b

Forward, backward by “word” (letters, numbers, and underscores make up words).



W, B

Forward, backward by “WORD” (only whitespace separates items).



e

End of word.



E

End of WORD.



ge

End of previous word. {Vim}



gE

End of previous WORD. {Vim}



), (

Beginning of next, current sentence.



}, {

Beginning of next, current paragraph.



]], [[

Beginning of next, current section.



][, [ ]

End of next, current section. {Vim}





Lines





Long lines in a file may show up on the screen as multiple lines. (They wrap around from one screen line to the next.) Although most commands work on the lines as defined in the file, a few commands work on lines as they appear on the screen. The Vim option wrap allows you to control how long lines are displayed.

0, $

First, last position of current line.



^, _

First nonblank character of current line.



+, -

First nonblank character of next, previous line.



ENTER

First nonblank character of next line.



num |

Column num of current line.



g0, g$

First, last position of screen line. {Vim}



g^

First nonblank character of screen line. {Vim}



gm

Middle of screen line. {Vim}



gk, gj

Move up, down one screen line. {Vim}



H

Top line of screen (Home position).



M

Middle line of screen.



L

Last line of screen.



num H

num lines after top line.



num L

num lines before last line.





Screens





CTRL-F, CTRL-B

Scroll forward, backward one screen.



CTRL-D, CTRL-U

Scroll down, up one-half screen.



CTRL-E, CTRL-Y

Show one more line at bottom, top of screen.



z ENTER

Reposition line with cursor to top of screen.



z.

Reposition line with cursor to middle of screen.



z-

Reposition line with cursor to bottom of screen.



CTRL-L

Redraw screen (without scrolling).



CTRL-R

vi: redraw screen (without scrolling).



Vim: redo last undone change.





Searches





/ pattern

Search forward for pattern. End with ENTER.



/ pattern /+ num

Go to line num after pattern. Forward search for pattern.



/ pattern /- num

Go to line num before pattern. Forward search for pattern.



? pattern

Search backward for pattern. End with ENTER.



? pattern ?+ num

Go to line num after pattern. Backward search for pattern.



? pattern ?- num

Go to line num before pattern. Backward search for pattern.



:noh

Suspend search highlighting until next search. {Vim}



n

Repeat previous search.



N

Repeat search in opposite direction.



/

Repeat previous search forward.



?

Repeat previous search backward.



*

Search forward for word under cursor. Matches only exact words. {Vim}



#

Search backward for word under cursor. Matches only exact words. {Vim}



g*

Search backward for word under cursor. Matches the characters of this word when embedded in a longer word. {Vim}



g#

Search backward for word under cursor. Matches the characters of this word when embedded in a longer word. {Vim}



%

Find match of current parenthesis, brace, or bracket.



f x

Move cursor forward to x on current line.



F x

Move cursor backward to x on current line.



t x

Move cursor forward to character before x in current line.



T x

Move cursor backward to character after x in current line.



,

Reverse search direction of last f, F, t, or T.



;

Repeat last f, F, t, or T.





Line numbering





CTRL-G

Display current line number.



gg

Move to first line in file. {Vim}



num G

Move to line number num.



G

Move to last line in file.



: num

Move to line number num.





Marks





m x

Place mark x at current position.



` x

(Backquote.) Move cursor to mark x.



' x

(Apostrophe.) Move to start of line containing x.



``

(Backquotes.) Return to position before most recent jump.



''

(Apostrophes.) Like preceding, but return to start of line.



'"

(Apostrophe quote.) Move to position when last editing the file. {Vim}



`[, ']

(Backquote bracket.) Move to beginning/end of previous text operation. {Vim}



'[, ']

(Apostrophe bracket.) Like preceding, but return to start of line where operation occurred. {Vim}



`.

(Backquote period.) Move to last change in file. {Vim}



'.

(Apostrophe period.) Like preceding, but return to start of line. {Vim}



'0

(Apostrophe zero.) Position where you last exited Vim. {Vim}



:marks

List active marks. {Vim}





Insert Commands





a

Append after cursor.



A

Append to end of line.



c

Begin change operation.



C

Change to end of line.



gI

Insert at beginning of line. {Vim}



i

Insert before cursor.



I

Insert at beginning of line.



o

Open a line below cursor.



O

Open a line above cursor.



R

Begin overwriting text.



s

Substitute a character.



S

Substitute entire line.



ESC

Terminate insert mode.





The following commands work in insert mode:

BACKSPACE

Delete previous character.



DELETE

Delete current character.



TAB

Insert a tab.



CTRL-A

Repeat last insertion. {Vim}



CTRL-D

Shift line left to previous shiftwidth. {Vim}



CTRL-E

Insert character found just below cursor. {Vim}



CTRL-H

Delete previous character (same as backspace).



CTRL-I

Insert a tab.



CTRL-K

Begin insertion of multikeystroke character.



CTRL-N

Insert next completion of the pattern to the left of the cursor. {Vim}



CTRL-P

Insert previous completion of the pattern to the left of the cursor. {Vim}



CTRL-T

Shift line right to next shiftwidth. {Vim}



CTRL-U

Delete current line.



CTRL-V

Insert next character verbatim.



CTRL-W

Delete previous word.



CTRL-Y

Insert character found just above cursor. {Vim}



CTRL-[

(ESC) Terminate insert mode.





Some of the control characters listed in the previous table are set by stty. Your terminal settings may differ.





Edit Commands





Recall that c, d, and y are the basic editing operators.





Changing and deleting text





The following list is not exhaustive, but it illustrates the most common operations:

cw

Change word.



cc

Change line.



c$

Change text from current position to end-of-line.



C

Same as c$.



dd

Delete current line.



num dd

Delete num lines.



d$

Delete text from current position to end-of-line.



D

Same as d$.



dw

Delete a word.



d}

Delete up to next paragraph.



d^

Delete back to beginning of line.



d/ pat

Delete up to first occurrence of pattern.



dn

Delete up to next occurrence of pattern.



df x

Delete up to and including x on current line.



dt x

Delete up to (but not including) x on current line.



dL

Delete up to last line on screen.



dG

Delete to end of file.



gqap

Reformat current paragraph to textwidth. {Vim}



g~w

Switch case of word. {Vim}



guw

Change word to lowercase. {Vim}



gUw

Change word to uppercase. {Vim}



p

Insert last deleted or yanked text after cursor.



gp

Same as p, but leave cursor at end of inserted text. {Vim}



gP

Same as P, but leave cursor at end of inserted text. {Vim}



]p

Same as p, but match current indention. {Vim}



[p

Same as P, but match current indention. {Vim}



P

Insert last deleted or yanked text before cursor.



r x

Replace character with x.



R text

Replace with new text (overwrite), beginning at cursor. ESC ends replace mode.



s

Substitute character.



4s

Substitute four characters.



S

Substitute entire line.



u

Undo last change.



CTRL-R

Redo last change. {Vim}



U

Restore current line.



x

Delete current cursor position.



X

Delete back one character.



5X

Delete previous five characters.



.

Repeat last change.



~

Reverse case and move cursor right.



CTRL-A

Increment number under cursor. {Vim}



CTRL-X

Decrement number under cursor. {Vim}





Copying and moving





Register names are the letters a–z. Uppercase names append text to the corresponding register.

Y

Copy current line.



yy

Copy current line.



" x yy

Copy current line to register x.



ye

Copy text to end of word.



yw

Like ye, but include the whitespace after the word.



y$

Copy rest of line.



" x dd

Delete current line into register x.



" x d

Delete into register x.



" x p

Put contents of register x.



y]]

Copy up to next section heading.



J

Join current line to next line.



gJ

Same as J, but without inserting a space. {Vim}



:j

Same as J.



:j!

Same as gJ.





Saving and Exiting





Writing a file means overwriting the file with the current text.

ZZ

Quit vi, writing the file only if changes were made.



:x

Same as ZZ.



:wq

Write file and quit.



:w

Write file.



:w file

Save copy to file.



: n , m w file

Write lines n to m to new file.



: n , m w >> file

Append lines n to m to existing file.



:w!

Write file (overriding protection).



:w! file

Overwrite file with current text.



:w %. new

Write current buffer named file as file.new.



:q

Quit vi (fails if changes were made).



:q!

Quit vi (discarding edits).



Q

Quit vi and invoke ex.



:vi

Return to vi after Q command.



%

Replaced with current filename in editing commands.



#

Replaced with alternate filename in editing commands.





Accessing Multiple Files





:e file

Edit another file; current file becomes alternate.



:e!

Return to version of current file at time of last write.



:e + file

Begin editing at end of file.



:e + num file

Open file at line num.



:e #

Open to previous position in alternate file.



:ta tag

Edit file at location tag.



:n

Edit next file in the list of files.



:n!

Force next file.



:n files

Specify new list of files.



:rewind

Edit first file in the list.



CTRL-G

Show current file and line number.



:args

Display list of files to be edited.



:prev

Edit previous file in the list of files.





Window Commands (Vim)





The following table lists common commands for controlling windows in Vim. See also the split, vsplit, and resize commands in the later section Alphabetical Summary of ex Commands. For brevity, control characters are marked in the following list by ^.

:new

Open a new window.



:new file

Open file in a new window.



:sp [file]

Split the current window. With file, edit that file in the new window.



:sv [file]

Same as :sp, but make new window read-only.



:sn [file]

Edit next file in file list in new window.



:vsp [file]

Like :sp, but split vertically instead of horizontally.



:clo

Close current window.



:hid

Hide current window, unless it is the only visible window.



:on

Make current window the only visible one.



:res num

Resize window to num lines.



:wa

Write all changed buffers to their files.



:qa

Close all buffers and exit.



^W s

Same as :sp.



^W n

Same as :new.



^W ^

Open new window with alternate (previously edited) file.



^W c

Same as :clo.



^W o

Same as :only.



^W j, ^W k

Move cursor to next/previous window.



^W p

Move cursor to previous window.



^W h, ^W l

Move cursor to window on left/right of screen.



^W t, ^W b

Move cursor to window on top/bottom of screen.



^W K, ^W B

Move current window to top/bottom of screen.



^W H, ^W L

Move current window to far left/right of screen.



^W r, ^W R

Rotate windows down/up.



^W +, ^W -

Increase/decrease current window size.



^W =

Make all windows same height.





Interacting with the System





:r file

Read in contents of file after cursor.



:r ! command

Read in output from command after current line.



: num r ! command

Like previous, but place after line num (0 for top of file).



:! command

Run command, then return.



! motion command

Send the text covered by motion to Unix command; replace with output.



: n , m ! command

Send lines n–m to command; replace with output.



num !! command

Send num lines to Unix command; replace with output.



:!!

Repeat last system command.



:sh

Create subshell; return to editor with EOF.



CTRL-Z

Suspend editor, resume with fg.



:so file

Read and execute ex commands from file.





Macros





:ab in out

Use in as abbreviation for out in insert mode.



:unab in

Remove abbreviation for in.



:ab

List abbreviations.



:map string sequence

Map characters string as sequence of commands. Use #1, #2, etc., for the function keys.



:unmap string

Remove map for characters string.



:map

List character strings that are mapped.



:map! string sequence

Map characters string to input mode sequence.



:unmap! string

Remove input mode map (you may need to quote the characters with CTRL-V).



:map!

List character strings that are mapped for input mode.



q x

Record typed characters into register specified by letter x. If letter is uppercase, append to register. {Vim}



q

Stop recording. {Vim}



@ x

Execute the register specified by letter x. Use @@ to repeat the last @ command.





In vi, the following characters are unused in command mode and can be mapped as user-defined commands:

Letters

g, K, q, V, and v



Control keys

^A, ^K, ^O, ^W, ^X, ^_, and ^\



Symbols

_, *, \, =, and #





Tip


The = is used by vi if Lisp mode is set. Different versions of vi may use some of these characters, so test them before using.





Vim does not use ^K, ^_, _, or \.





Miscellaneous Commands





<

Shift text described by following motion command left by one shiftwidth. {Vim}



>

Shift text described by following motion command right by one shiftwidth. {Vim}



<<

Shift line left one shiftwidth (default is eight spaces).



>>

Shift line right one shiftwidth (default is eight spaces).



>}

Shift right to end of paragraph.



<%

Shift left until matching parenthesis, brace, or bracket. (Cursor must be on the matching symbol.)



==

Indent line in C-style, or using program specified in equalprg option. {Vim}



g

Start many multiple character commands in Vim.



K

Look up word under cursor in manpages (or program defined in keywordprg). {Vim}



^O

Return to previous jump. {Vim}



^Q

Same as ^V. {Vim} (On some terminals, resume data flow.)



^T

Return to the previous location in the tag stack. (Solaris vi, Vim, nvi, elvis, and vile.)



^]

Perform a tag lookup on the text under the cursor.



^\

Enter ex line-editing mode.



^^

(Caret key with Ctrl key pressed.) Return to previously edited file.





vi Configuration





This section describes the following:

The :set command



Options available with :set



Example .exrc file





The :set Command





The :set command allows you to specify options that change characteristics of your editing environment. Options may be put in the ~/.exrc file or set during a vi session.

The colon does not need to be typed if the command is put in .exrc:

:set x

Enable Boolean option x; show value of other options.



:set no x

Disable option x.



:set x = value

Give value to option x.



:set

Show changed options.



:set all

Show all options.



:set x ?

Show value of option x.





Appendix B provides tables of :set options for Solaris vi, Vim, nvi, elvis, and vile. Please see that appendix for more information.





Example .exrc File





In an ex script file, comments start with the double quote character. The following lines of code are an example of a customized .exrc file:

set nowrapscan " Searches don't wrap at end of file set wrapmargin=7 " Wrap text at 7 columns from right margin set sections=SeAhBhChDh nomesg " Set troff macros, disallow message map q :w^M:n^M " Alias to move to next file map v dwElp " Move a word ab ORA O'Reilly Media, Inc. " Input shortcut





Tip


The q alias isn’t needed for Vim, which has the :wn command. The v alias would hide the Vim command v, which enters character-at-a-time visual mode operation.





ex Basics





The ex line editor serves as the foundation for the screen editor vi. Commands in ex work on the current line or on a range of lines in a file. Most often, you use ex from within vi. In vi, ex commands are preceded by a colon and entered by pressing ENTER.

You can also invoke ex on its own—from the command line—just as you would invoke vi. (You could execute an ex script this way.) Or you can use the vi command Q to quit the vi editor and enter ex.





Syntax of ex Commands





To enter an ex command from vi, type:

:[address] command [options]

An initial : indicates an ex command. As you type the command, it is echoed on the status line. Execute the command by pressing the ENTER key. Address is the line number or range of lines that are the object of command. Options and addresses are described later. ex commands are described in the later section Alphabetical Summary of ex Commands.

You can exit ex in several ways:

:x

Exit (save changes and quit).



:q!

Quit without saving changes.



:vi

Switch to the vi editor on the current file.





Addresses





If no address is given, the current line is the object of the command. If the address specifies a range of lines, the format is:

x,y

where x and y are the first and last addressed lines (x must precede y in the buffer). x and y each may be a line number or a symbol. Using ; instead of , sets the current line to x before interpreting y. The notation 1,$ addresses all lines in the file, as does %.





Address Symbols





1,$

All lines in the file.



x , y

Lines x through y.



x ; y

Lines x through y, with current line reset to x.



0

Top of file.



.

Current line.



num

Absolute line number num.



$

Last line.



%

All lines; same as 1,$.



x - n

n lines before x.



x + n

n lines after x.



-[num]

One or num lines previous.



+[num]

One or num lines ahead.



' x

(Apostrophe.) Line marked with x.



''

(Apostrophe apostrophe.) Previous mark.



/ pattern /

Forward to line matching pattern.



? pattern ?

Backward to line matching pattern.





See Chapter 6 for more information on using patterns.





Options





!

Indicates a variant form of the command, overriding the normal behavior. The ! must come immediately after the command.



count

The number of times the command is to be repeated. Unlike in vi commands, count cannot precede the command, because a number preceding an ex command is treated as a line address. For example, d3 deletes three lines, beginning with the current line; 3d deletes line 3.



file

The name of a file that is affected by the command. % stands for the current file; # stands for the previous file.





Alphabetical Summary of ex Commands





ex commands can be entered by specifying any unique abbreviation. In the following list of reference entries, the full name appears as the heading of the reference entry, and the shortest possible abbreviation is shown in the syntax line below it. Examples are assumed to be typed from vi, so they include the : prompt.





Name


abbreviate





Synopsis


ab [string text]





Define string when typed to be translated into text. If string and text are not specified, list all current abbreviations.





Examples


Note: ^M appears when you type ^V followed by ENTER.

:ab ora O'Reilly Media, Inc. :ab id Name:^MRank:^MPhone:





Name


append





Synopsis


[address] a[!] text .





Append new text at specified address, or at present address if none is specified. Add a ! to toggle the autoindent setting that is used during input. That is, if autoindent was enabled, ! disables it. Enter new text after entering the command. Terminate input of new text by entering a line consisting of just a period.





Example


:aBegin appending to current line Append this line and this line too. .Terminate input of text to append





Name


args





Synopsis


ar args file ...





Print the members of the argument list (files named on the command line), with the current argument printed in brackets ([ ]).

The second syntax is for Vim, which allows you to reset the list of files to be edited.





Name


bdelete





Synopsis


[num] bd[!] [num]





Unload buffer num and remove it from the buffer list. Add a ! to force removal of an unsaved buffer. The buffer may also be specified by filename. If no buffer is specified, remove the current buffer. {Vim}





Name


buffer





Synopsis


[num] b[!] [num]





Begin editing buffer num in the buffer list. Add a ! to force a switch from an unsaved buffer. The buffer may also be specified by filename. If no buffer is specified, continue editing the current buffer. {Vim}





Name


buffers





Synopsis


buffers[!]





Print the members of the buffer list. Some buffers (e.g., deleted buffers) will not be listed. Add ! to show unlisted buffers. ls is another abbreviation for this command. {Vim}





Name


cd





Synopsis


cd dir chdir dir





Change the current directory within the editor to dir.





Name


center





Synopsis


[address] ce [width]





Center the line within the specified width. If width is not specified, use textwidth. {Vim}





Name


change





Synopsis


[address] c[!] text .





Replace the specified lines with text. Add a ! to switch the autoindent setting during input of text. Terminate input by entering a line consisting of just a period.





Name


close





Synopsis


clo[!]





Close current window unless it is the last window. If buffer in window is not open in another window, unload it from memory. This command will not close a buffer with unsaved changes, but you may add ! to hide it instead. {Vim}





Name


copy





Synopsis


[address] co destination





Copy the lines included in address to the specified destination address. The command t (short for “to”) is a synonym for copy.





Example


:1,10 co 50Copy first 10 lines to just after line 50





Name


delete





Synopsis


[address] d [register] [count]





Delete the lines included in address. If register is specified, save or append the text to the named register. Register names are the lowercase letters a–z. Uppercase names append text to the corresponding register. If count is specified, delete that many lines.





Examples


:/Part I/,/Part II/-1dDelete to line above “Part II” :/main/+d Delete line below “main” :.,$d xDelete from this line to last line into register x





Name


edit





Synopsis


e[!] [+num] [filename]





Begin editing on filename. If no filename is given, start over with a copy of the current file. Add a ! to edit the new file even if the current file has not been saved since the last change. With the +num argument, begin editing on line num. Alternatively, num may be a pattern, of the form /pattern.





Examples


:e fileEdit file in current editing buffer :e +/^Index # Edit alternate file at pattern match :e!Start over again on current file





Name


file





Synopsis


f [filename]





Change the filename for the current buffer to filename. The next time the buffer is written, it will be written to file filename. When the name is changed, the buffer’s “not edited” flag is set, to indicate that you are not editing an existing file. If the new filename is the same as a file that already exists on the disk, you will need to use :w! to overwrite the existing file. When specifying a filename, the % character can be used to indicate the current filename. A # can be used to indicate the alternate filename. If no filename is specified, print the current name and status of the buffer.





Example


:f %.new





Name


fold





Synopsis


address fo





Fold the lines specified by address. A fold collapses several lines on the screen into one line, which can later be unfolded. It doesn’t affect the text of the file. {Vim}





Name


foldclose





Synopsis


[address] foldc[!]





Close folds in the specified address, or at the present address if none is specified. Add a ! to close more than one level of folds. {Vim}





Name


foldopen





Synopsis


[address] foldo[!]





Open folds in the specified address, or at the present address if none is specified. Add a ! to open more than one level of folds. {Vim}





Name


global





Synopsis


[address] g[!]/pattern/[commands]





Execute commands on all lines that contain pattern or, if address is specified, on all lines within that range. If commands are not specified, print all such lines. Add a ! to execute commands on all lines not containing pattern. See also v, later in this list.





Examples


:g/Unix/pPrint all lines containing “Unix” :g/Name:/s/tom/Tom/Change “tom” to “Tom” on all lines containing “Name:”





Name


hide





Synopsis


hid





Close current window unless it is the last window, but do not remove the buffer from memory. This command is safe to use on an unsaved buffer. {Vim}





Name


insert





Synopsis


[address] i[!] text .





Insert text at line before the specified address, or at present address if none is specified. Add a ! to switch the autoindent setting during input of text. Terminate input of new text by entering a line consisting of just a period.





Name


join





Synopsis


[address] j[!] [count]





Place the text in the specified range on one line, with whitespace adjusted to provide two space characters after a period (.), no space characters before a ), and one space character otherwise. Add a ! to prevent whitespace adjustment.





Example


:1,5j!Join first five lines, preserving whitespace





Name


jumps





Synopsis


ju





Print jump list used with CTRL-I and CTRL-O commands. The jump list is a record of most movement commands that skip over multiple lines. It records the position of the cursor before each jump. {Vim}





Name


k





Synopsis


[address] k char





Same as mark; see mark later in this list.





Name


left





Synopsis


[address] le [count]





Left-align lines specified by address, or current line if no address is specified. Indent lines by count spaces. {Vim}





Name


list





Synopsis


[address] l [count]





Print the specified lines so that tabs display as ^I and the ends of lines display as $. l is like a temporary version of :set list.





Name


map





Synopsis


map[!] [string commands]





Define a keyboard macro named string as the specified sequence of commands. string is usually a single character or the sequence #num, the latter representing a function key on the keyboard. Use a ! to create a macro for input mode. With no arguments, list the currently defined macros.





Examples


:map K dwwPTranspose two words :map q :w^M:n^M Write current file; go to next :map! + ^[bi(^[ea)Enclose previous word in parentheses





Tip


Vim has K and q commands, which the example aliases would hide.





Name


mark





Synopsis


[address] ma char





Mark the specified line with char, a single lowercase letter. Same as k. Return later to the line with 'x (apostrophe plus x, where x is the same as char). Vim also uses uppercase and numeric characters for marks. Lowercase letters work the same as in vi. Uppercase letters are associated with filenames and can be used between multiple files. Numbered marks, however, are maintained in a special viminfo file and cannot be set using this command.





Name


marks





Synopsis


marks [chars]





Print list of marks specified by chars, or all current marks if no chars specified. {Vim}





Example


:marks abcPrint marks a, b, and c





Name


mkexrc





Synopsis


mk[!] file





Create an .exrc file containing set commands for changed ex options and key mappings. This saves the current option settings, allowing you to restore them later. {Vim}





Name


move





Synopsis


[address] m destination





Move the lines specified by address to the destination address.





Example


:.,/Note/m /END/Move text block to after line containing “END”





Name


new





Synopsis


[count] new





Create a new window count lines high with an empty buffer. {Vim}





Name


next





Synopsis


n[!] [[+num] filelist]





Edit the next file from the command-line argument list. Use args to list these files. If filelist is provided, replace the current argument list with filelist and begin editing on the first file. With the +num argument, begin editing on line num. Alternatively, num may be a pattern, of the form /pattern.





Example


:n chap*Start editing all “chapter” files





Name


nohlsearch





Synopsis


noh





Temporarily stop highlighting all matches to a search when using the hlsearch option. Highlighting is resumed with the next search. {Vim}





Name


number





Synopsis


[address] nu [count]





Print each line specified by address, preceded by its buffer line number. Use # as an alternate abbreviation for number. count specifies the number of lines to show, starting with address.





Name


only





Synopsis


on [!]





Make the current window be the only one on the screen. Windows open on modified buffers are not removed from the screen (hidden), unless you also use the ! character. {Vim}





Name


open





Synopsis


[address] o [/pattern/]





Enter open mode (vi) at the lines specified by address, or at the lines matching pattern. Exit open mode with Q. Open mode lets you use the regular vi commands, but only one line at a time. It can be useful on slow dial-up lines (or on very distant Internet ssh connections).





Name


preserve





Synopsis


pre





Save the current editor buffer as though the system were about to crash.





Name


previous





Synopsis


prev[!]





Edit the previous file from the command-line argument list. {Vim}





Name


print





Synopsis


[address] p [count]





Print the lines specified by address. count specifies the number of lines to print, starting with address. P is another abbreviation.





Example


:100;+5pShow line 100 and the next 5 lines





Name


put





Synopsis


[address] pu [char]





Place previously deleted or yanked lines from the named register specified by char, to the line specified by address. If char is not specified, the last deleted or yanked text is restored.





Name


qall





Synopsis


qa[!]





Close all windows and terminate the current editing session. Use ! to discard changes made since the last save. {Vim}





Name


quit





Synopsis


q[!]





Terminate the current editing session. Use ! to discard changes made since the last save. If the editing session includes additional files in the argument list that were never accessed, quit by typing q! or by typing q twice. Vim closes the editing window only if there are still other windows open on the screen.





Name


read





Synopsis


[address] r filename





Copy the text of filename after the line specified by address. If filename is not specified, the current filename is used.





Example


:0r $HOME/dataRead file in at top of current file





Name


read





Synopsis


[address] r !command





Read the output of shell command into the text after the line specified by address.





Example


:$r !spell %Place results of spellchecking at end of file





Name


recover





Synopsis


rec [file]





Recover file from the system save area.





Name


redo





Synopsis


red





Restore last undone change. Same as CTRL-R. {Vim}





Name


resize





Synopsis


res [[±]num]





Resize current window to be num lines high. If + or - is specified, increase or decrease the current window height by num lines. {Vim}





Name


rewind





Synopsis


rew[!]





Rewind the argument list and begin editing the first file in the list. Add a ! to rewind even if the current file has not been saved since the last change.





Name


right





Synopsis


[address] ri [width]





Right-align lines specified by address, or current line if no address is specified, to column width. Use textwidth option if no width is specified. {Vim}





Name


sbnext





Synopsis


[count] sbn [count]





Split the current window and begin editing the count next buffer from the buffer list. If no count is specified, edit the next buffer in the buffer list. {Vim}





Name


sbuffer





Synopsis


[num] sb [num]





Split the current window and begin editing buffer num from the buffer list in the new window. The buffer to be edited may also be specified by filename. If no buffer is specified, open the current buffer in the new window. {Vim}





Name


set





Synopsis


se parameter1 parameter2 ...





Set a value to an option with each parameter, or if no parameter is supplied, print all options that have been changed from their defaults. For Boolean options, each parameter can be phrased as option or nooption; other options can be assigned with the syntax option=value. Specify all to list current settings. The form set option? displays the value of option. See the tables that list set options in Appendix B.





Examples


:set nows wm=10 :set all





Name


shell





Synopsis


sh





Create a new shell. Resume editing when the shell terminates.





Name


snext





Synopsis


[count] sn [[+num] filelist]





Split the current window and begin editing the next file from the command-line argument list. If count is provided, edit the count next file. If filelist is provided, replace the current argument list with filelist and begin editing the first file. With the +n argument, begin editing on line num. Alternately, num may be a pattern of the form /pattern. {Vim}





Name


source





Synopsis


so file





Read (source) and execute ex commands from file.





Example


:so $HOME/.exrc





Name


split





Synopsis


[count] sp [+num] [filename]





Split the current window and load filename in the new window, or the same buffer in both windows if no file is specified. Make the new window count lines high, or if count is not specified, split the window into equal parts. With the +n argument, begin editing on line num. num may also be a pattern of the form /pattern. {Vim}





Name


sprevious





Synopsis


[count] spr [+num]





Split the current window and begin editing the previous file from the command-line argument list in the new window. If count is specified, edit the count previous file. With the +num argument, begin editing on line num. num may also be a pattern of the form /pattern. {Vim}





Name


stop





Synopsis


st





Suspend the editing session. Same as CTRL-Z. Use the shell fg command to resume the session.





Name


substitute





Synopsis


[address] s [/pattern/replacement/] [options] [count]





Replace the first instance of pattern on each of the specified lines with replacement. If pattern and replacement are omitted, repeat last substitution. count specifies the number of lines on which to substitute, starting with address. (Spelling out the command name does not work in Solaris vi.)





Options


c

Prompt for confirmation before each change.



g

Substitute all instances of pattern on each line (global).



p

Print the last line on which a substitution was made.





Examples


:1,10s/yes/no/gSubstitute on first 10 lines :%s/[Hh]ello/Hi/gc Confirm global substitutions :s/Fortran/\U&/ 3 Uppercase “Fortran” on next three lines :g/^[0-9][0-9]*/s//Line &:/For every line beginning with one or more digits, add “Line” and a colon





Name


suspend





Synopsis


su





Suspend the editing session. Same as CTRL-Z. Use the shell fg command to resume the session.





Name


sview





Synopsis


[count] sv [+num] [filename]





Same as the split command, but set the readonly option for the new buffer. {Vim}





Name


t





Synopsis


[address] t destination





Copy the lines included in address to the specified destination address. t is equivalent to copy.





Example


:%t$Copy the file and add it to the end





Name


tag





Synopsis


[address] ta tag





In the tags file, locate the file and line matching tag and start editing there.





Example


Run ctags, then switch to the file containing myfunction:

:!ctags *.c :tagmyfunction





Name


tags





Synopsis


tags





Print list of tags in the tag stack. {Vim}





Name


unabbreviate





Synopsis


una word





Remove word from the list of abbreviations.





Name


undo





Synopsis


u





Reverse the changes made by the last editing command. In vi the undo command will undo itself, redoing what you undid. Vim supports multiple levels of undo. Use redo to redo an undone change in Vim.





Name


unhide





Synopsis


[count] unh





Split screen to show one window for each active buffer in the buffer list. If specified, limit the number of windows to count. {Vim}





Name


unmap





Synopsis


unm[!] string





Remove string from the list of keyboard macros. Use ! to remove a macro for input mode.





Name


v





Synopsis


[address] v/pattern/[command]





Execute command on all lines not containing pattern. If command is not specified, print all such lines. v is equivalent to g!. See global, earlier in this list.





Example


:v/#include/dDelete all lines except “#include” lines





Name


version





Synopsis


ve





Print the editor’s current version number and date of last change.





Name


view





Synopsis


vie[[+num] filename]





Same as edit, but set file to readonly. When executed in ex mode, return to normal or visual mode. {Vim}





Name


visual





Synopsis


[address] vi [type] [count]





Enter visual mode (vi) at the line specified by address. Return to ex mode with Q. type can be one of -, ^, or . (see the z command, later in this section). count specifies an initial window size.





Name


visual





Synopsis


vi [+num] file





Begin editing file in visual mode (vi), optionally at line num. Alternately, num may be a pattern, of the form /pattern. {Vim}





Name


vsplit





Synopsis


[count] vs [+num] [filename]





Same as the split command, but split the screen vertically. The count argument can be used to specify a width for the new window. {Vim}





Name


wall





Synopsis


wa[!]





Write all changed buffers with filenames. Add ! to force writing of any buffers marked readonly. {Vim}





Name


wnext





Synopsis


[count] wn[!] [[+num] filename]





Write current buffer and open next file in argument list, or the count next file if specified. If filename is specified, edit it next. With the +num argument, begin editing on line num. num may also be a pattern of the form /pattern. {Vim}





Name


wq





Synopsis


wq[!]





Write and quit the file in one action. The file is always written. The ! flag forces the editor to write over any current contents of file.





Name


wqall





Synopsis


wqa[!]





Write all changed buffers and quit the editor. Add ! to force writing of any buffers marked readonly. xall is another alias for this command. {Vim}





Name


write





Synopsis


[address] w[!] [[>>] file]





Write lines specified by address to file, or write full contents of buffer if address is not specified. If file is also omitted, save the contents of the buffer to the current filename. If >> file is used, append lines to the end of the specified file. Add a ! to force the editor to write over any current contents of file.





Examples


:1,10w name_listCopy first 10 lines to file name_list :50w >> name_listNow append line 50





Name


write





Synopsis


[address] w !command





Write lines specified by address to command.





Example


:1,66w !pr -h myfile | lpPrint first page of file





Name


X





Synopsis


X





Prompt for an encryption key. This can be preferable to :set key, as typing the key is not echoed to the console. To remove an encryption key, just reset the key option to an empty value. {Vim}





Name


xit





Synopsis


x





Write the file if it was changed since the last write, and then quit.





Name


yank





Synopsis


[address] y [char] [count]





Place lines specified by address in named register char. Register names are the lowercase letters a–z. Uppercase names append text to the corresponding register. If no char is given, place lines in the general register. count specifies the number of lines to yank, starting with address.





Example


:101,200 ya aCopy lines 100–200 to register “a”





Name


z





Synopsis


[address] z [type] [count]





Print a window of text with the line specified by address at the top. count specifies the number of lines to be displayed.





Type


+

Place specified line at the top of the window (default).



-

Place specified line at the bottom of the window.



.

Place specified line in the center of the window.



^

Print the previous window.



=

Place specified line in the center of the window and leave the current line at this line.





Name


&





Synopsis


[address] & [options] [count]





Repeat the previous substitute (s) command. count specifies the number of lines on which to substitute, starting with address. options are the same as for the substitute command.





Examples


:s/Overdue/Paid/Substitute once on current line :g/Status/&Redo substitution on all “Status” lines





Name


@





Synopsis


[address] @ [char]





Execute contents of register specified by char. If address is given, move cursor to the specified address first. If char is @, repeat the last @ command.





Name


=





Synopsis


[address] =





Print the line number of the line indicated by address. The default is the line number of the last line.





Name


!





Synopsis


[address] !command





Execute Unix command in a shell. If address is specified, use the lines contained in address as standard input to command, and replace those lines with the output and error output. (This is called filtering the text through the command.)





Examples


:!lsList files in the current directory :11,20!sort -fSort lines 11–20 of current file





Name


< >





Synopsis


[address] < [count] or [address] > [count]





Shift lines specified by address either left (<) or right (>). Only leading spaces and tabs are added or removed when shifting lines. count specifies the number of lines to shift, starting with address. The shiftwidth option controls the number of columns that are shifted. Repeating the < or > increases the shift amount. For example, :>>> shifts three times as much as :>.





Name


~





Synopsis


[address] ~ [count]





Replace the last-used regular expression (even if from a search, and not from an s command) with the replacement pattern from the most recent s (substitute) command. This is rather obscure; see Chapter 6 for details.





Name


address





Synopsis


address





Print the lines specified in address.





Name


ENTER





Synopsis





Print the next line in the file. (For ex only, not from the : prompt in vi.)





Appendix B. Setting Options





This appendix describes the important set command options for Solaris vi, nvi 1.79, elvis 2.2, Vim 7.1, and vile 9.6.





Solaris vi Options





Table B-1 contains brief descriptions of the important set command options. In the first column, options are listed in alphabetical order; if the option can be abbreviated, that abbreviation is shown in parentheses. The second column shows the default setting that vi uses unless you issue an explicit set command (either manually or in the .exrc file). The last column describes what the option does, when enabled.

Table B-1. Solaris vi set options

OptionDefaultDescription

autoindent (ai) noai In insert mode, indents each line to the same level as the line above or below. Use with the shiftwidth option.



autoprint (ap) ap Display changes after each editor command. (For global replacement, display last replacement.)



autowrite (aw) noaw Automatically write (save) the file if changed before opening another file with :n or before giving a Unix command with :!.



beautify (bf) nobf Ignore all control characters during input (except tab, newline, or form feed).



directory (dir) /tmp Names directory in which ex/vi stores buffer files. (Directory must be writable.)



edcompatible noedcompatible

Remember the flags used with the most recent substitute command (global, confirming), and use them for the next substitute command. Despite the name, no version of ed actually does this.



errorbells (eb) errorbells Sound bell when an error occurs.

exrc (ex) noexrc Allow the execution of .exrc files that reside outside the user’s home directory.



flash (fp)

nofp Flash the screen instead of ringing the bell.



hardtabs (ht) 8 Define boundaries for terminal hardware tabs.



ignorecase (ic) noic Disregard case during a search.



lisp nolisp Insert indents in appropriate Lisp format. ( ), { }, [[, and ]] are modified to have meaning for Lisp.



list nolist Print tabs as ^I; mark ends of lines with $. (Use list to tell whether end character is a tab or a space.)



magic magic Wildcard characters . (dot), * (asterisk), and [] (brackets) have special meaning in patterns.



mesg mesg Permit system messages to display on terminal while editing in vi.



novice nonovice Require the use of long ex command names, such as copy or read.



number (nu) nonu Display line numbers on left of screen during editing session.



open open Allow entry to open or visual mode from ex. Although not in Solaris vi, this option has traditionally been in vi, and may be in your Unix’s version of vi.



optimize (opt) noopt Abolish carriage returns at the end of lines when printing multiple lines; this speeds output on dumb terminals when printing lines with leading whitespace (spaces or tabs).



paragraphs (para) IPLPPPQP LIpplpipbp

Define paragraph delimiters for movement by { or }. The pairs of characters in the value are the names of troff macros that begin paragraphs.



prompt prompt Display the ex prompt (:) when vi’s Q command is given.



readonly (ro) noro Any writes (saves) of a file fail unless you use ! after the write (works with w, ZZ, or autowrite).



redraw (re) vi redraws the screen whenever edits are made (in other words, insert mode pushes over existing characters, and deleted lines immediately close up). Default depends on line speed and terminal type. noredraw is useful at slow speeds on a dumb terminal: deleted lines show up as @, and inserted text appears to overwrite existing text until you press ESC.



remap remap Allow nested map sequences.



report 5 Display a message on the status line whenever you make an edit that affects at least a certain number of lines. For example, 6dd reports the message “6 lines deleted.”



scroll [½ window] Number of lines to scroll with ^D and ^U commands.



sections (sect) SHNHH HU Define section delimiters for [[ and ]] movement. The pairs of characters in the value are the names of troff macros that begin sections.



shell (sh) /bin/sh Pathname of shell used for shell escape (:!) and shell command (:sh). Default value is derived from shell environment, which varies on different systems.



shiftwidth (sw) 8 Define number of spaces in backward (^D) tabs when using the autoindent option, and for the << and >> commands.



showmatch (sm) nosm In vi, when ) or } is entered, cursor moves briefly to matching ( or {. (If no match, ring the error message bell.) Very useful for programming.



showmode noshowmode In insert mode, display a message on the prompt line indicating the type of insert you are making, for example, “OPEN MODE” or “APPEND MODE.”



slowopen (slow) Hold off display during insert. Default depends on line speed and terminal type.



tabstop (ts) 8 Define number of spaces that a tab indents during editing session. (Printer still uses system tab of 8.)



taglength (tl) 0 Define number of characters that are significant for tags. Default (zero) means that all characters are significant.



tags tags /usr/lib/tags

Define pathname of files containing tags. (See the Unix ctags command.) By default, vi searches the file tags in the current directory and /usr/lib/tags.



tagstack tagstack Enable stacking of tag locations on a stack.



term Set terminal type.

terse noterse Display shorter error messages.



timeout (to) timeout Keyboard maps time out after 1 second.[a]



ttytype Set terminal type. This is just another name for term.



warn warn Display the warning message, “No write since last change.”



window (w) Show a certain number of lines of the file on the screen. Default depends on line speed and terminal type.



wrapmargin (wm) 0 Define right margin. If greater than zero, automatically inserts carriage returns to break lines.



wrapscan (ws) ws Searches wrap around either end of file.



writeany (wa) nowa Allow saving to any file.

[a] When you have mappings of several keys (for example, :map zzz 3dw), you probably want to use notimeout. Otherwise, you need to type zzz within one second. When you have an insert mode mapping for a cursor key (for example, :map! ^[OB ^[ja), you should use timeout. Otherwise, vi won’t react to ESC until you type another key.





nvi 1.79 Options





nvi 1.79 has a total of 78 options that affect its behavior. Table B-2 summarizes the most important ones. Most options described in Table B-1 are not repeated here.

Table B-2. nvi 1.79 set options

OptionDefaultDescription

backup A string describing a backup filename to use. The current contents of a file are saved in this file before writing the new data out. A first character of N causes nvi to include a version number at the end of the file; version numbers are always incremented. "N%.bak" is a reasonable example.



cdpath Environment variable CDPATH, or current directory

A search path for the :cd command.



cedit When the first character of this string is entered on the colon command line, nvi opens a new window on the command history that you can then edit. Hitting ENTER on any given line executes that line. ESC is a good choice for this option. (Use ^V ^[ to enter it.)



comment nocomment If the first nonempty line begins with /*, //, or #, nvi skips the comment text before displaying the file. This avoids displaying long, boring legal notices.



directory (dir) Environment variable TMPDIR, or /tmp

The directory where nvi puts its temporary files.



extended noextended Searches use egrep-style extended regular expressions.



filec When the first character of this string is entered on the colon command line, nvi treats the blank delimited word in front of the cursor as if it had an * appended to it and does shell-style filename expansion. ESC is also a good choice for this option. (Use ^V ^[ to enter it.) When this character is the same as for the cedit option, command-line editing is performed only when the character is entered as the first character on the colon command line.



iclower noiclower Make all regular expression searches case-insensitive, as long as the search pattern contains no uppercase letters.



leftright noleftright Long lines scroll the screen left to right, instead of wrapping.



lock lock nvi attempts to get an exclusive lock on the file. Editing a file that cannot be locked creates a read-only session.



octal nooctal Display unknown characters in octal, instead of in hexadecimal.



path A colon-separated list of directories in which nvi will look for the file to be edited.



recdir /var/tmp/vi.recover The directory where recovery files are stored.



ruler noruler Displays the row and column of the cursor.



searchincr nosearchincr Searches are done incrementally.



secure nosecure Turn off access to external programs via text filtering (:r!, :w!), disable the vi mode ! and ^Z commands, and the ex mode !, shell, stop, and suspend commands. Once set, it cannot be changed.



shellmeta ~{[*?$`'"\ When any of these characters appear in a filename argument to an ex command, the argument is expanded by the program named by the shell option.



showmode (smd) noshowmode Display a string in the status line showing the current mode. Display an * if the file has been modified.



sidescroll 16 The number of columns by which the screen is shifted left or right when leftright is true.



taglength (tl) 0 Defines number of characters that are significant for tags. Default (zero) means that all characters are significant.



tags (tag) tags /var/db/libc.tags /sys/kern/tags

The list of possible tag files.



tildeop notildeop The ~ command takes an associated motion, not just a preceding count.



wraplen (wl) 0 Identical to the wrapmargin option, except that it specifies the number of characters from the left margin at which the line will be split. The value of wrapmargin overrides wraplen.





elvis 2.2 Options





elvis 2.2 has a total of 225 options that affect its behavior. Table B-3 summarizes the most important ones. Most options described in Table B-1 are not repeated here.

Table B-3. elvis 2.2 set options

OptionDefaultDescription

autoiconify (aic) noautoiconify Iconify the old window when de-iconifying a new one. X11 only.



backup (bk) nobackup Make a backup file (xxx.bak) before writing the current file out to disk.



binary (bin) The buffer’s data is not text. This option is set automatically.



boldfont (xfb) The name of the bold font. X11 only.



bufdisplay (bd) normal The default display mode for the buffer (hex, html, man, normal, syntax, or tex).



ccprg (cp) cc ($1?$1:$2) The shell command for :cc.



directory (dir) Where to store temporary files. The default is system-dependent.



display (mode) normal The name of current display mode, set by the :display command.



elvispath (epath) A list of directories in which to search for configuration files. The default is system-dependent.



focusnew (fn) focusnew Force keyboard focus into the new window. X11 only.



font (fnt) The name of the normal font, for the Windows and X11 interfaces.



gdefault (gd) nogdefault Cause the substitute command to change all instances.



home (home) $HOME The home directory for ~ in filenames.



italicfont (xfi) The name of the italic font. X11 only.



locked (lock) nolocked Make the buffer read-only and cause most commands that would modify the buffer to fail. Usually set automatically for read-only HTML files.



lpcolor (lpcl) nolpcl Use color when printing; for :lpr.



lpcolumns (lpcols) 80 The width of a printer page; for :lpr.



lpcrlf (lpc) nolpcrlf The printer needs CR/LF for newline in the file; for :lpr.



lpformfeed (lpff) nolpformfeed Send a form feed after the last page; for :lpr.



lpheader (lph) nolph Print a header at the top of the page; for :lpr.



lplines (lprows) 60 The length of a printer page; for :lpr.



lpout (lpo) The printer file or filter, for :lpr. A typical value might be !lpr. The default is system-dependent.



lptype (lpt) dumb The printer type, for :lpr. The value should be one of: ps, ps2, epson, pana, ibm, hp, cr, bs, dumb, html, or ansi.



lpwrap (lpw) lpwrap Simulate line wrap; for :lpr.



makeprg (mp) make $1 The shell command for :make.



prefersyntax (psyn) never Control use of syntax mode. Useful for HTML and manpages to show the input instead of the formatted contents. With a value of never, never use syntax mode. With writable, do so for writable files. With local, do so for files in the current directory. With always, always use syntax mode.



ruler (ru) noruler Display the cursor’s line and column.



security (sec) normal One of normal (standard vi behavior), safer (attempt to prevent writing malicious scripts), or restricted (try to make elvis safe for use as a restricted editor). In general, use the :safely command to set this; don’t do it directly.



showmarkups (smu) noshowmarkups For the man and html modes, show the markup at the cursor position, but not elsewhere.



sidescroll (ss) 0 The sideways scrolling amount. Zero mimics vi, making lines wrap.



smartargs (sa) nosmartargs Place the arguments for a function on the screen based on a tags file lookup after typing the function name and the function character (usually a left parenthesis).



spell (sp) nospell Highlight misspelled words. This also works with programs, based on lookups in a tags file.



taglength (tl) 0 Defines the number of characters that are significant for tags. Default (zero) means that all characters are significant.



tags (tagpath) tags The list of possible tag files.



tagstack (tsk) tagstack Remember the origin of tag searches on a stack.



undolevels (ul) 0 The number of undoable commands. Zero mimics vi. You probably want to set this to a bigger number.



warpback (wb) nowarpback Upon exit, move the pointer back to the xterm that started elvis. X11 only.



warpto (wt) don't How ^W ^W forces pointer movement: don't for no movement, scrollbar moves the pointer to the scrollbar, origin moves the pointer to the upper left corner, and corners moves it to the corners furthest from and nearest to the current cursor position. This forces the X display to pan, to make sure the window is entirely onscreen.





Vim 7.1 Options





Vim 7.1 has a total of 295 (!) options that affect its behavior. Table B-4 summarizes the most important ones. Most options described in Table B-1 are not repeated here.

The summaries in this table are by necessity very brief. Much more information about each option may be found in the Vim online help.

Table B-4. Vim 7.1 set options

Option

Default

Description



autoread (ar) noautoread Detect whether a file inside Vim has been modified externally, not by Vim, and automatically refresh the Vim buffer with the changed version of the file.

background (bg)

dark or light

Vim tries to use background and foreground colors that are appropriate to the particular terminal. The default depends on the current terminal or windowing system.



backspace (bs)

0

Control whether you can backspace over a newline and/or over the start of insert. Values are: 0 for vi compatibility; 1 to backspace over newlines; and 2 to backspace over the start of insert. Using a value of 3 allows both.



backup (bk)

nobackup

Make a backup before overwriting a file, then leave it around after the file has been successfully written. To have a backup file just while the file is being written, use the writebackup option.



backupdir (bdir)

., ~/tmp/, ~/

A list of directories for the backup file, separated with commas. The backup file is created in the first directory in the list where this is possible. If empty, you cannot create a backup file. The name . (dot) means the same directory as where the edited file is.



backupext (bex)

~

The string that is appended to a filename to make the name of the backup file.



binary (bin)

nobinary

Change a number of other options to make it easier to edit binary files. The previous values of these options are remembered and restored when bin is switched back off. Each buffer has its own set of saved option values. This option should be set before editing a binary file. You can also use the -b command-line option.



cindent (cin)

nocindent

Enable automatic smart C program indenting.



cinkeys (cink)

0{,0},:,0#,!^F, o,O,e

A list of keys that, when typed in insert mode, cause reindenting of the current line. Only happens if cindent is on.



cinoptions (cino)

Affects the way cindent reindents lines in a C program. See the online help for details.



cinwords (cinw)

if, else, while, do, for, switch

These keywords start an extra indent in the next line when smartindent or cindent is set. For cindent this is done only at an appropriate place (inside {...}).



comments (com)

A comma-separated list of strings that can start a comment line. See the online help for details.



compatible (cp)

cp; nocp when a .vimrcfile is found

Makes Vim behave more like vi in too many ways to describe here. It is on by default, to avoid surprises. Having a .vimrc turns off the vi compatibility; usually this is a desirable side effect.



completeopt (cot) menu,preview A comma-separated list of options for insert mode completion.

cpoptions (cpo)

aABceFs

A sequence of single character flags, each one indicating a different way in which Vim will or will not exactly mimic vi. When empty, the Vim defaults are used. See the online help for details.



cursorcolumn (cuc) nocursorcolumn Highlight the screen column of the cursor with CursorColumn highlighting. This is useful for lining up text vertically. Can slow down screen display.

cursorline (cul) nocursorline Highlight the screen line of the cursor with CursorRow highlighting. Makes it easy to find the current line in the edit session. Use in conjunction with cursorcolumn for a crosshairs effect. Can slow down screen display.

define (def)

^#\s*define

A search pattern that describes macro definitions. The default value is for C programs. For C++, use ^\(#\s*define\ |[a-z]*\s*const\s*[a-z]*\). When using the :set command, you need to double the backslashes.



directory (dir)

., ~/tmp, /tmp

A list of directory names for the swap file, separated with commas. The swap file will be created in the first directory where this is possible. If empty, no swap file will be used and recovery is impossible! The name . (dot) means to put the swap file in the same directory as the edited file. Using . first in the list is recommended so that editing the same file twice will result in a warning.



equalprg (ep)

External program to use for = command. When this option is empty, the internal formatting functions are used.



errorfile (ef)

errors.err

Name of the error file for the quickfix mode. When the -q command-line argument is used, errorfile is set to the following argument.



errorformat (efm)

(Too long to print)

Scanf-like description of the format for the lines in the error file.



expandtab (et)

noexpandtab

When inserting a tab, expand it to the appropriate number of spaces.



fileformat (ff)

unix

Describes the convention to terminate lines when reading/writing the current buffer. Possible values are dos (CR/LF), unix (LF), and mac (CR). Vim usually sets this automatically.



fileformats (ffs)

dos,unix

List the line-terminating conventions that Vim tries to apply to a file when reading. Multiple names enable automatic end-of-line detection when reading a file.



formatoptions (fo)

Vim default: tcq; vi default: vt

A sequence of letters that describes how automatic formatting is to be done. See the online help for details.



gdefault (gd)

nogdefault

Cause the substitute command to change all instances.



guifont (gfn)

A comma-separated list of fonts to try when starting the GUI version of Vim.



hidden (hid)

nohidden

Hide the current buffer when it is unloaded from a window, instead of abandoning it.



history (hi)

Vim default: 20; vi default: 0

Control how many ex commands, search strings, and expressions are remembered in the command history.



hlsearch (hls)

nohlsearch

Highlight all matches of the most recent search pattern.



icon

noicon

Vim attempts to change the name of the icon associated with the window where it is running. Overridden by the iconstring option.



iconstring

String value used for the icon name of the window.



include (inc)

^#\s*include

Define a search pattern for finding include commands. The default value is for C programs.



incsearch (is)

noincsearch

Enable incremental searching.



isfname (isf)

@,48-57,/,.,-,_, +,,,$,:,~

A list of characters that can be included in file and path names. Non-Unix systems have different default values. The @ character stands for any alphabetic character. It is also used in the other is XXX options, described next.



isident (isi)

@,48-57,_,192-255

A list of characters that can be included in identifiers. Non-Unix systems may have different default values.



iskeyword (isk)

@,48-57,_,192-255

A list of characters that can be included in keywords. Non-Unix systems may have different default values. Keywords are used in searching and recognizing with many commands, such as w, [i, and many more.



isprint (isp)

@,161-255

A list of characters that can be displayed directly to the screen. Non-Unix systems may have different default values.



makeef (mef)

/tmp/vim##.err

The error file name for the :make command. Non-Unix systems have different default values. The ## is replaced by a number to make the name unique.



makeprg (mp)

make

The program to use for the :make command. % and # in the value are expanded.



modifiable (ma) modifiable When turned off, do not allow any changes in the buffer.

mouse

Enable the mouse in non-GUI versions of Vim. This works for MS-DOS, Win32, QNX pterm, and xterm. See the online help for details.



mousehide (mh)

nomousehide

Hide the mouse pointer during typing. Restores the pointer when the mouse is moved.



paste

nopaste

Change a large number of options so that pasting into a Vim window with a mouse does not mangle the pasted text. Turning it off restores those options to their previous values. See the online help for details.



ruler (ru)

noruler

Show the line and column number of the cursor position.



secure

nosecure

Disable certain kinds of commands in the startup file. Automatically enabled if you don’t own the .vimrc and .exrc files.



shellpipe (sp)

The shell string to use for capturing the output from :make into a file. The default value depends upon the shell.



shellredir (srr)

The shell string for capturing the output of a filter into a temporary file. The default value depends upon the shell.



showmode (smd)

Vim default: smd; vi default: nosmd

Put a message in the status line for insert, replace, and visual modes.



sidescroll (ss)

0

How many columns to scroll horizontally. The value zero puts the cursor in the middle of the screen.



smartcase (scs)

nosmartcase

Override the ignorecase option if the search pattern contains uppercase characters.



spell nospell Turn on spellchecking.

suffixes

*.bak,~,.o,.h,.info,.swp

When multiple files match a pattern during filename completion, the value of this variable sets a priority among them, in order to pick the one Vim will use.



taglength (tl)

0

Define number of characters that are significant for tags. Default (zero) means that all characters are significant.



tagrelative (tr)

Vim default: tr; vi default: notr

Filenames in a tags file from another directory are taken to be relative to the directory where the tags file is.



tags (tag)

./tags,tags

Filenames for the :tag command, separated by spaces or commas. The leading ./ is replaced with the full path to the current file.



tildeop (top)

notildeop

Make the ~ command behave like an operator.



undolevels (ul)

1000

The maximum number of changes that can be undone. A value of 0 means vi compatibility: one level of undo and u undoes itself. Non-Unix systems may have different default values.



viminfo (vi)

Read the viminfo file upon startup, and write it upon exiting. The value is complex; it controls the different kinds of information that Vim will store in the file. See the online help for details.



writebackup (wb)

writebackup

Make a backup before overwriting a file. The backup is removed after the file is successfully written, unless the backup option is also on.





vile 9.6 Options





vile 9.6 has 167 options (called “modes” in vile), which are denoted universal, buffer, or window modes according to their use. There are also 101 environment variables, which are more useful in scripts than for direct user manipulation.[75] Not all are available on every platform; some apply only to X11 or Win32.

Table B-5 shows the compiled-in default values for the most important of vile’s options. The initialization scripts, such as vileinit.rc, override several of those values. Most options described in Table B-1 are not repeated here.

Table B-5. vile 9.6 set options

Option

Default

Description



alt-tabpos (atp) noatp Controls whether the cursor sits at the left or right end of the whitespace representing a tab character.



animated animated Automatically updates the contents of scratch buffers when their contents change.



autobuffer (ab) autobuffer Uses “most-recently-used” style buffering; the buffers are sorted in order of use. Otherwise, buffers remain in the order in which they were edited.



autocolor (ac) 0 Automatic syntax coloring. If set to zero, automatic syntax coloring is disabled. Otherwise, it should be set to a small positive integer that represents the number of milliseconds to wait for a “quiet interval” before invoking the autocolor-hook hook.



autosave (as) noautosave Automatic file saving. Writes the file after every autosavecnt characters of inserted text.



autosavecnt (ascnt) 256 Specifies after how many inserted characters automatic saves take place.



backspacelimit (bl) backspacelimit If disabled, then in insert mode you can backspace past the point at which the insert began.



backup-style off Controls how backup files are created when writing a file. Possible values are off, .bak for DOS-style backups, and tilde for Emacs-style hello.c~ backups under Unix.



bcolor default Sets the background color on systems that support it.



byteorder-mark (bom) auto Controls the check for a prefix used to distinguish different types of UTF encoding. The default value auto tells vile to inspect the file; specific values tell it to use that value.



check-modtime nocheck-modtime Issues a “file newer than buffer” warning if the file has changed since it was last read or written, and prompts for confirmation.



cindent nocindent Enable C-style indentation, which helps maintain current indentation level automatically during insert, like autoindent.



cindent-chars :#{}()[] The list of characters interpreted by the cindent mode. These include # to indent to column 1, and : to indent further, as after a label. Listing a pair of characters that are also in fence-pairs causes text enclosed by the pair to be further indented.



cmode off A built-in major mode for C code.



color-scheme (cs) default Specify by name an aggregate of fcolor, bcolor, video-attrs, and $palette defined via the define-color-scheme command.



comment-prefix ^\s*\(\(\s*[#*>]\)\|\(///*\)\)\+ Describes the leading part of a line that should be left alone when reformatting comments. The default value is good for Makefile, shell and C comments, and email.



comments ^\s*/\?\(\s*[#*>/]\)\+/\?\s*$ A regular expression defining commented paragraph delimiters. Its purpose is to preserve paragraphs inside comments when reformatting.



cursor-tokens regex Controls whether vile uses regular expressions or character classes for parsing tokens from the screen for various commands. This uses an enumeration: both, cclass, and regex.



dirc nodirc vile checks each name when scanning directories for filename completion. This allows you to distinguish between directory names and filenames in the prompt.



dos nodos Strips out the CR from CR/LF pairs when reading files, and puts them back when writing. New buffers for nonexistent files inherit the line style of the operating system, whatever the value of dos.



fcolor default Sets the foreground color on systems that support it.



fence-begin /\* Regular expressions for the start and end of simple non-nestable fences, such as C comments.



fence-end \*/

fence-if ^\s*#\s*if Regular expressions marking the start, “else if”, “else”, and end of line-oriented, nested fences, such as C-preprocessor control lines.



fence-elif ^\s*#\s*elif\>

fence-else ^\s*#\s*else\>

fence-fi ^\s*#\s*endif\>

fence-pairs {}()[] Each pair of characters denotes a set of “fences” that should be matched with %.



file-encoding auto Specifies the character encoding of the buffer contents, e.g., one of 8bit, ascii, auto, utf-8, utf-16, or utf-32.



filtername (fn) Specifies a syntax-highlighting filter, for a given major mode.



for-buffers (fb) mixed Specifies whether globbing or regular expressions are used to select buffer names in the for-buffers and kill-buffer commands.



glob !echo %s Controls how wildcard characters (e.g., * and ?) are treated in prompts for filenames. A value of off disables expansion, and on uses the internal globber, which can handle normal shell wildcards and ~ notation. The default value for Unix guarantees compatibility with your shell.



highlight (hl) highlight Enables or disables syntax highlighting in the corresponding buffers.



history (hi) history Logs commands from the colon command line (minibuffer) in the [History] buffer.



horizscroll (hs) horizscroll Moving off the end of a long line shifts the whole screen sideways. If not set, only the current line shifts.



ignoresuffix (is) \(\.orig\|~\)$ Strips the given pattern from a filename before matching it for major mode suffixes.



linewrap (lw) nolinewrap Wraps long logical lines onto multiple screen lines.



maplonger nomaplonger The map facility matches against the longest possible mapped sequence, not the shortest.



meta-insert- bindings (mib) mib Controls behavior of 8-bit characters during insert. Normally, key bindings are operational only when in command mode; when in insert mode, all characters are self-inserting. If this mode is on, and a metacharacter (i.e., a character with the eighth bit set) is typed that is bound to a function, then that function binding will be honored and executed from within insert mode. Any unbound metacharacters will remain self-inserting.



mini-hilite (mh) reverse Defines the highlight attribute to use when the user toggles the editing mode in the minibuffer.



modeline nomodeline Controls whether a vi-like mode line feature is enabled.



modelines 5 Controls the number of lines from each end of the buffer to scan for vi-like mode lines.



overlap-matches overlap-matches Modifies the highlighting shown by visual-matches to control whether overlapping matches are shown.



percent-crlf 50 Percentage of total lines that must end with CR/LF for vile to automatically convert buffer’s recordseparator to crlf.



percent-utf8 90 Percentage of total characters that contain embedded nulls, making them look like UTF-16 or UTF-32 encodings. If the file-encoding option is set to auto and the match is higher than this threshold, vile will load the buffer data as UTF-8.



popup-choices (pc) delayed Controls the use of a pop-up window for help in doing completion. The value is either off for no window, immediate for an immediate pop up, or delayed to wait for a second Tab key.



popup-msgs (pm) nopopup-msgs When enabled, vile pops up the [Messages] buffer, showing the text that was written to the message line.



recordseparator (rs) lf [a] Specify format of files that vile reads and writes. Formats are lf (for Unix), crlf (for DOS), cr (for Macintosh), and default (lf or crlf, depending on the platform).



resolve-links noresolve-links If set, vile fully resolves filenames in case some path components are symbolic links. This helps avoid multiple unintentional edits of the same physical file via different pathnames.



ruler noruler Shows the current line and column in the status line, as well as what percentage of the current buffer’s lines are in front of the cursor.



showchar (sc) noshowchar Shows the value of the current character in the status line.



showformat (sf) foreign Controls when/whether recordseparator information is shown in the status line. Values are: always, differs (to show when the local mode differs from the global), local (to show whenever a local mode is set), foreign (to show when the recordseparator differs from the native default), and never.



showmode (smd) showmode Displays an indicator on the status line for insert and replace modes.



sideways 0 Controls by how many characters the screen scrolls to the left or right. The value of 0 moves the screen by one-third.



tabinsert (ti) tabinsert Allows the physical insertion of tab characters into the buffer. If turned off (notabinsert), vile will never insert a tab into a buffer; instead it will always insert the appropriate number of spaces.



tagignorecase (tc) notagignorecase Makes tag searches ignore case.



taglength (tl) 0 Defines the number of characters that are significant for tags. Default (zero) means that all characters are significant. This does not affect tags picked up from the cursor; they are always matched exactly. (This is different from the other editors).



tagrelative (tr) notagrelative When using a tags file in another directory, filenames in that tags file are considered to be relative to the directory where the tags file is.



tags tags A space-separated list of files in which to look up tag references.



tagword (tw) notagword Use the whole word under the cursor for the tag lookup, not just the subword starting at the current cursor position.



undolimit (ul) 10 Limits how many changes may be undone. The value zero means “no limit.”



unicode-as-hex (uh) nounicode-as-hex If displaying a buffer whose file encoding says it is one of the Unicode flavors (e.g., utf-8, utf-16, or utf-32), shows the values that are non-ASCII in \uXXXX format even if the display is capable of showing these as regular characters.



unprintable-as- octal (uo) nounprintable-as-octal Displays nonprinting characters with the eighth bit set in octal. Otherwise, uses hexadecimal. Nonprinting characters whose eighth bit is not set are always displayed in control character notation.



visual-matches none Controls highlighting of all matching occurrences of a search pattern. The possible values are none for no highlighting, or underline, bold, and reverse for those kinds of highlighting. Colors may also be used on systems that support it.



xterm-fkeys noxterm-fkeys Supports xterm’s modified function keys by generating system bindings for the Shift-, Ctrl-, and Alt- modifiers of each function key listed in the terminal description.



xterm-mouse noxterm-mouse Allows use of the mouse from inside an xterm. See the online help for details.



xterm-title noxterm-title Enables title bar updates if you are running within an xterm. Each time you switch to a different buffer, vile can update the title. This uses the same tests of the TERM variable as the xterm-mouse mode.



[a] This depends on the platform for which vile is compiled.





* * *



[75] These include variables that are set or used as a side effect of other commands. Owing to their focus on scripting, their descriptions are also not suitable for this table since they tend to be lengthy—read the online help for details.





Appendix C. Problem Checklists





This appendix consolidates the problem checklists that are provided throughout Part I. Here they are presented in one place for ease of reference.





Problems Opening Files





When you invoke vi , the message [open mode] appears.

Your terminal type is probably incorrectly identified. Quit the editing session immediately by typing :q. Check the environment variable $TERM. It should be set to the name of your terminal. Alternatively, ask your system administrator to provide an adequate terminal type setting.



You see one of the following messages:

Visual needs addressable cursor or upline capability Bad termcap entry Termcap entry too longterminal: Unknown terminal type Block device required Not a typewriter

Either your terminal type is undefined, or there’s probably something wrong with your terminfo or termcap entry. Enter :q to quit. Check your $TERM environment variable, or ask your system administrator to select a terminal type for your environment.



A [new file] message appears when you think a file already exists.

Check that you have used the correct case in the filename (filenames are often case-sensitive). If you have, you are probably in the wrong directory. Enter :q to quit. Then check to see that you are in the correct directory for that file (enter pwd at the Unix prompt). If you are in the right directory, check the list of files in the directory (with ls) to see whether the file exists under a slightly different name.



You invoke vi , but you get a colon prompt (indicating that you’re in ex line-editing mode).

You probably typed an interrupt before vi could draw the screen. Enter vi by typing vi at the ex prompt (:).



One of the following messages appears:

[Read only] File is read only Permission denied

“Read only” means that you can only look at the file; you cannot save any changes you make. You may have invoked vi in view mode (with view or vi -R), or you do not have write permission for the file. See the next section, Problems Saving Files.



One of the following messages appears:

Bad file number Block special file Character special file Directory Executable Non-ascii filefile non-ASCII

The file you’ve called up to edit is not a regular text file. Type :q! to quit, then check the file you wish to edit, perhaps with the file command.



When you type :q because of one of the previously mentioned difficulties, this message appears:

No write since last change (:quit! overrides).

You have modified the file without realizing it. Type :q! to leave vi. Your changes from this session will not be saved in the file.





Problems Saving Files





You try to write your file, but you get one of the following messages:

File exists Filefile exists - use w! [Existing file] File is read only

Type :w! file to overwrite the existing file, or type :w newfile to save the edited version in a new file.



You want to write a file, but you don’t have write permission for it. You get the message “Permission denied.”

Use :w newfile to write out the buffer into a new file. If you have write permission for the directory, you can use mv to replace the original version with your copy of it. If you don’t have write permission for the directory, type :w pathname/file to write out the buffer to a directory in which you do have write permission (such as your home directory, or /tmp).



You try to write your file, but you get a message telling you that the file system is full.

Type :!rm junkfile to delete a (large) unneeded file and free some space. (Starting an ex command line with an exclamation point gives you access to Unix.)

Or type :!df to see whether there’s any space on another file system. If there is, choose a directory on that file system and write your file to it with :w pathname. (df is the Unix command to check a disk’s free space.)



The system puts you into open mode and tells you that the file system is full.

The disk with vi’s temporary files is filled up. Type :!ls /tmp to see whether there are any files you can remove to gain some disk space.[76] If there are, create a temporary Unix shell from which you can remove files or issue other Unix commands. You can create a shell by typing :sh; type CTRL-D or exit to terminate the shell and return to vi. (On most Unix systems, when using a job-control shell, you can simply type CTRL-Z to suspend vi and return to the Unix prompt; type fg to return to vi.) Once you’ve freed up some space, write your file with :w!.



You try to write your file, but you get a message telling you that your disk quota has been reached.

Try to force the system to save your buffer with the ex command :pre (short for :preserve). If that doesn’t work, look for some files to remove. Use :sh (or CTRL-Z if you are using a job-control system) to move out of vi and remove files. Use CTRL-D (or fg) to return to vi when you’re done. Then write your file with :w!.





* * *



[76] Your vi may keep its temporary files in /usr/tmp, /var/tmp, or your current directory; you may need to poke around a bit to figure out where exactly you’ve run out of room.





Problems Getting to Visual Mode





While editing in vi , you accidentally end up in the ex editor.

A Q in the command mode of vi invokes ex. Any time you are in ex, the command vi returns you to the vi editor.





Problems with vi Commands





When you type commands, text jumps around on the screen and nothing works the way it’s supposed to.

Make sure you’re not typing the J command when you mean j.

You may have hit the CAPS LOCK key without noticing it. vi is case-sensitive; that is, uppercase commands (I, A, J, etc.) are different from lowercase commands (i, a, j), so all your commands are being interpreted not as lowercase but as uppercase commands. Press the CAPS LOCK key again to return to lowercase, press ESC to ensure that you are in command mode, then type either U to restore the last line changed or u to undo the last command. You’ll probably also have to do some additional editing to fully restore the garbled part of your file.





Problems with Deletions





You’ve deleted the wrong text and you want to get it back.

There are several ways to recover deleted text. If you’ve just deleted something and you realize you want it back, simply type u to undo the last command (for example, a dd). This works only if you haven’t given any further commands, since u undoes only the most recent command. On the other hand, a U will restore the line to its pristine state, the way it was before any changes were applied to it.

You can still recover a recent deletion, however, by using the p command, since vi saves the last nine deletions in nine numbered deletion buffers. If you know, for example, that the third deletion back is the one you want to restore, type:

"3p

to “put” the contents of buffer number 3 on the line below the cursor. This works only for a deleted line. Words, or a portion of a line, are not saved in a buffer. If you want to restore a deleted word or line fragment, and u won’t work, use the p command by itself. This restores whatever you’ve last deleted.





Appendix D. vi and the Internet





Sure, vi is user friendly. It’s just particular about who it makes friends with.



Being the “standard” Unix screen editor since at least 1980 has enshrined vi firmly in Unix culture.

vi helped build Unix, and Unix in turn built the foundation for today’s Internet. Thus, it was inevitable that there be at least one Internet web site devoted to vi. This appendix describes some of the vi resources that are available for the vi connoisseur.





Where to Start





There is surely no activity with more built-in obsolescence than publishing World Wide Web sites in a printed book. We have tried to publish URLs that we hope will have a reasonable lifetime.

In the meantime, the “Tips” section of the elvis documentation lists interesting vi-related web sites (that’s where we started), and the Usenet comp.editors newsgroup is also a good place to look.





vi Web Sites





There are two primary vi-related web sites, the vi Lover’s Home Page, by Thomer M. Gil, and the Vi Pages, by Sven Guckes. Each contains a large number of links to interesting vi-related items.





The vi Lover’s Home Page





The vi Lover’s Home Page can be found at http://www.thomer.com/vi/vi.html. This site contains the following items:

A table of all known vi clones, with links to the source code or binary distributions



Links to other vi sites, including the Vi Pages, by Sven Guckes



A large number of links to vi documentation, manuals, help, and tutorials, at a number of different levels



vi macros for writing HTML documents and solving the Towers of Hanoi, and FTP sites for other macro sets



Miscellaneous vi links: poems, a story about the “real history” of vi, vi versus Emacs discussions, and vi coffee mugs (see the section vi for Java Lovers)





There are other things there, too; this makes a great starting point.





The Vi Pages





The Vi Pages can be found at http://www.vi-editor.org.[77] This site contains the following items:

A detailed comparison of options and features among different vi clones



Screenshots of different versions of vi



A table listing many vi clones, as well as a list with contact information (name, address, URL) for the clones



Pointers to several FAQ files



Some cute quotes about vi, such as the one that opened this chapter



Other links, including a link to the vi coffee mugs





The vi Lover’s Home Page refers to this web site as “the only Vi site on this planet better than the one you’re looking at.” This site is also well worth checking out.





vi Powered!





One of the cuter items we found is the vi Powered logo (Figure D-1). This is a small GIF file you can add to your personal web page to show that you used vi to create it.





Figure D-1. vi Powered!





The original home page for the vi Powered logo was http://www.abast.es/~avelle/vi.html. That page was written in Spanish and is no longer available. The English home page is at http://www.darryl.com/vi.shtml. Instructions for adding the logo are at http://www.darryl.com/addlogo.html. Doing so consists of several simple steps:

Download the logo. Enter http://www.darryl.com/vipower.gif into your (graphical) web browser, and then save it to a file, or use a command-line web retrieval utility, such as wget.



Add the following code to your web page in an appropriate place:

<A HREF="http://www.darryl.com/vi.html"> <IMG SRC="vipower.gif"> </A>

This puts the logo into your page and makes it into a hypertext link that, when selected, will go to the vi Powered home page. You may wish to add an ALT="This Web Page is vi Powered" attribute to the <IMG> tag, for users of nongraphical browsers.



Add the following code to the <HEAD> section of your web page:

<META name="editor" content="/usr/bin/vi">





Just as the Real Programmer will eschew a WYSIWYG word processor in favor of troff, so too will Real Webmasters eschew fancy HTML authoring tools in favor of vi. You can use the vi Powered logo to display this fact with pride. ☺

You can find the Vim logo, in several variations, at http://www.vim.org/logos.php. A number of Vim Powered logos for web sites are at http://www.vim.org/buttons.php.





vi for Java Lovers





Despite the title, this subsection is about the java you drink, not the Java you program in.[78]

Our hypothetical Real Programmer, while using vi to write her C++ code, her troff documentation, and her web page, undoubtedly will want a cup of coffee now and then. She can now drink her coffee from a mug with a vi command reference printed on it!

When we first found vi reference mugs, they were available in sets of four from a dedicated web site. That site seems to have disappeared. However, vi reference mugs, T-shirts, sweatshirts, and mouse pads are now available from a different site: http://www.cafepress.com/geekcheat/366808.





Online vi Tutorial





The two home pages we’ve mentioned have a large number of links to documentation on vi. Of special note, though, is a nine-part online tutorial from Unix World magazine, by Walter Zintz. The starting-off point is here: http://www.networkcomputing.com/unixworld/tutorial/009/009.html. (The link for this has moved around; it may not be up-to-date on the vi home pages, but this URL worked when we tried it early in 2008.) The tutorial covers the following topics:

Editor fundamentals



Line-mode addresses



The g (global) command



The substitute command



The editing environment (the set command, tags, and EXINIT and .exrc)



Addresses and columns



The replacement commands, r and R



Automatic indentation



Macros





Also available with the tutorial is an online quiz that you can use to see how well you’ve absorbed the material in the tutorial. Or you can just try the quiz directly, to see how well we’ve done with this book!





* * *



[77] This site is mirrored at http://www.saki.com.au/mirror/vi/index.php3.



[78] Still, it’s somehow fitting that Java came from Sun Microsystems, where Bill Joy—vi’s original author—is a founder and former vice president.





A Different vi Clone





Depicted in Figures D-2 through D-9 is the story of vigor, a different vi clone.





Figure D-2. The story of vigor—part I





Figure D-3. The story of vigor—part II





Figure D-4. The story of vigor—part III





Figure D-5. The story of vigor—part IV





Figure D-6. The story of vigor—part V





Figure D-7. The story of vigor—part VI





Figure D-8. The story of vigor—part VII





Figure D-9. The story of vigor—part VIII



The source code for vigor is available at http://vigor.sourceforge.net.





Amaze Your Friends!





In the long term, perhaps the most useful items are in the collection of vi-related information in the FTP archives at alf.uib.no. The original archives were at ftp://afl.uib.no/pub/vi. This site has gone away, but you can find the archives mirrored at ftp://ftp.uu.net/pub/text-processing/vi.[79] The file INDEX in that directory describes what’s in the archives and lists additional mirrors that may be geographically closer to you.

Unfortunately, these files were last updated in May of 1995. Fortunately, vi’s basic functionality has not changed, and the information and macros in the archive are still useful. The archive has four subdirectories:

docs

Documentation on vi, and also some comp.editors postings.



macros

vi macros.



comp.editors

Various materials posted to comp.editors.



programs

Source code for vi clones for various platforms (and other programs). Take things from here with caution, as much of it is out of date.





The docs and macros are the most interesting. The docs directory has a large number of articles and references, including beginners’ guides, explanations of bugs, quick references, and many short “how to” kinds of articles (e.g., how to capitalize just the first letter of a sentence in vi). There’s even a song about vi!

The macros directory has over 50 files in it that do different things. We mention just three of them here. (Files whose names end in .Z are compressed with the Unix compress program. They can be uncompressed with either uncompress or gunzip.)

evi.tar.Z

An Emacs “emulator.” The idea behind it is to turn vi into a modeless editor (one that is always in input mode, with commands done with control keys). It is actually done with a shell script that replaces the EXINIT environment variable.



hanoi.Z

This is perhaps the most famous of the unusual uses of vi: a set of macros that solve the Towers of Hanoi programming problem. This program simply displays the moves; it does not actually draw the disks. For fun, we have reprinted it in the sidebar later in this chapter.



turing.tar.Z

This program uses vi to implement an actual Turing machine! It’s rather amazing to watch it execute the programs.





There are many, many more interesting macros, including perl and RCS modes.

The Towers of Hanoi, vi Version

" From: gregm@otc.otca.oz.au (Greg McFarlane) " Newsgroups: comp.sources.d,alt.sources,comp.editors " Subject: VI SOLVES HANOI " Date: 19 Feb 91 01:32:14 GMT " " Submitted-by: gregm@otc.otca.oz.au " Archive-name: hanoi.vi.macros/part01 " " Everyone seems to be writing stupid Tower of Hanoi programs. " Well, here is the stupidest of them all: the hanoi solving " vi macros. " " Save this article, unshar it, and run uudecode on " hanoi.vi.macros.uu. This will give you the macro file " hanoi.vi.macros. " Then run vi (with no file: just type "vi") and type: " 	:so hanoi.vi.macros " 	g " and watch it go. " " The default height of the tower is 7 but can be easily changed " by editing the macro file. " " The disks aren't actually shown in this version, only numbers " representing each disk, but I believe it is possible to write " some macros to show the disks moving about as well. Any takers? " " (For maze solving macros, see alt.sources or comp.editors) " " Greg " " ------------ REAL FILE STARTS HERE --------------- set remap set noterse set wrapscan " to set the height of the tower, change the digit in the following " two lines to the height you want (select from 1 to 9) map t 7 map! t 7 map L 1G/t^MX/^0^M$P1GJ$An$BGC0e$X0E0F$X/T^M@f^M@h^M$A1GJ@f0l$Xn$PU map g IL map I KMYNOQNOSkRTV map J /^0[^t]*$^M map X x map P p map U L map A map B "hyl map C "fp map e "fy2l map E "hp map F "hy2l map K 1Go^[ map M dG map N yy map O p map q tllD map Y o0123456789Z^[0q map Q 0iT^[ map R $rn map S $r$ map T ko0^M0^M^M^[ map V Go/^[





* * *



[79] You may have better luck accessing this site with a command-line FTP client than with a web browser.





Tastes Great, Less Filling





vi is [[13~^[[15~^[[15~^[[19~^[[18~^ a muk[^[[29~^[[34~^[[26~^[[32~^ch better editor than this emacs. I know I^[[14~'ll get flamed for this but the truth has to be said. ^[[D^[[D^[[D^[[D ^[[D^[^[[D^[[D^[[B^ exit ^X^C quit :x :wq dang it :w:w:w :x ^C^C^Z^D

— Jesper Lauridsen from alt.religion.emacs





We can’t discuss vi as part of Unix culture without acknowledging what is perhaps the longest running debate in the Unix community:[80]vi versus Emacs.

Discussions about which is better have cropped up on comp.editors (and other newsgroups) for years and years. (This is illustrated nicely in Figure D-10.) You will find summaries of some of these discussions in the many web sites described earlier. You will find pointers to more recent versions on the web pages.





Figure D-10. It’s not a religious war. Really!



Some of the better arguments in favor of vi are:

vi is available on every Unix system. If you are installing systems, or moving from system to system, you might have to use vi anyway.



You can usually keep your fingers on the home row of the keyboard. This is a big plus for touch typists.



Commands are one (or sometimes two) regular characters; they are much easier to type than all of the control and metacharacters that Emacs requires.



vi is generally smaller and less resource-intensive than Emacs. Startup times are appreciably faster, sometimes up to a factor of 10.



Now that the vi clones have added features such as incremental searching, multiple windows, and buffers, GUI interfaces, syntax highlighting and smart indenting, and programmability via extension languages, the functional gap between the two editors has narrowed significantly, if not disappeared entirely.





To be complete, two more items should be mentioned. First, there are actually two versions of Emacs that are popular: the original GNU Emacs and XEmacs, which is derived from an earlier version of GNU Emacs. Both have advantages and disadvantages, and their own sets of devotees.[81]

Second, although GNU Emacs has always had vi-emulation packages, they are usually not very good. However, the “viper mode” is now reputed to be an excellent vi emulation. It can serve as a bridge for learning Emacs for those who are interested in doing so.

To conclude, always remember that you are the final judge of a program’s utility. You should use the tools that make you the most productive, and for many tasks, vi and its clones are excellent tools.





* * *



[80] OK, it’s really a religious war, but we’re trying to be nice. (The other religious war, BSD versus System V, was settled by POSIX. System V won, although BSD received significant concessions. ☺)



[81] Who undoubtedly share a joint distaste for vi! ☺





vi Quotes





Finally, here are some more vi quotes, courtesy of Bram Moolenaar, Vim’s author:

THEOREM: vi is perfect.

PROOF: VI in roman numerals is 6. The natural numbers less than 6 which divide 6 are 1, 2, and 3. 1 + 2 + 3 = 6. So 6 is a perfect number. Therefore, vi is perfect.

— Arthur Tateishi





A reaction from Nathan T. Oelger:

So, where does the above leave Vim? VIM in roman numerals might be: (1000 – (5 + 1)) = 994, which happens to be equal to 2*496+2. 496 is divisible by 1, 2, 4, 8, 16, 31, 62, 124, and 248 and 1+2+4+8+16+31+62+124+248 = 496. So, 496 is a perfect number. Therefore, Vim is twice as perfect as vi, plus a couple extra bits of goodies. ☺

That is, Vim is better than perfect.





This quote seems to sum it up for the true vi lover:

To me vi is zen. To use vi is to practice zen. Every command is a koan. Profound to the user, unintelligible to the uninitiated. You discover truth every time you use it.

— Satish Reddy





Index





A note on the digital index


A link in an index entry is displayed as the section title in which that entry appears. Because some sections have multiple index markers, it is not unusual for an entry to have several links to the same section. Clicking on any link will take you directly to the place in the text in which the marker appears.





Symbols


! (exclamation point), Problems Saving Files, Saving and Exiting Files, Executing Unix Commands, Filtering text with vi, Mapping Keys for Insert Mode, Buffers and Their Interaction with Windows, The cinkeys option

buffers, interaction with, Buffers and Their Interaction with Windows

cinkeys syntax rules, The cinkeys option

ex commands starting with, Problems Saving Files

mapping keys for insert mode, Mapping Keys for Insert Mode

overriding save warnings, Saving and Exiting Files

for Unix commands, Executing Unix Commands, Filtering text with vi





# (pound sign), Defining a Range of Lines, Calling in New Files, Categories of Features, Buffers and Their Interaction with Windows

for alternate filename, Calling in New Files

buffers, describing, Buffers and Their Interaction with Windows

meta-information, extracting, Categories of Features

show line numbers command, Defining a Range of Lines





$ (dollar sign), Movement Within a Line, Changing Text, Movement on the current line, Line Addressing Symbols, Metacharacters Used in Search Patterns

cursor movement command, Movement Within a Line, Movement on the current line

for last file line (ex), Line Addressing Symbols

marking end of change region, Changing Text

metacharacter, Metacharacters Used in Search Patterns





$MYGVIMRC variable, Starting gvim

% (percent sign), Line Addressing Symbols, Calling in New Files, Global Replacement, A Special Search Command, Categories of Features, Buffers and Their Interaction with Windows

buffers, describing, Buffers and Their Interaction with Windows

for current filename, Calling in New Files

every line symbol (ex), Global Replacement

matching brackets, A Special Search Command

meta-information, extracting, Categories of Features

representing every line (ex), Line Addressing Symbols





& (ampersand), Metacharacters Used in Replacement Strings, More Substitution Tricks

metacharacter, Metacharacters Used in Replacement Strings

to repeat last command, More Substitution Tricks





' (apostrophe), The G (Go To) Command, Marking Your Place, Marking Your Place, Visual Mode

'' (move to mark) command, The G (Go To) Command, Marking Your Place

marking lines (vile), Visual Mode

move to mark command, Marking Your Place





() (parentheses), Movement by Text Blocks, Movement by Text Blocks, Metacharacters Used in Search Patterns, More Examples of Mapping Keys, A Special Search Command, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

( (move cursor) command, Movement by Text Blocks

) (move cursor) command, Movement by Text Blocks

\(...\) metacharacters, Metacharacters Used in Search Patterns, Extended Regular Expressions, Extended Regular Expressions

finding and removing, More Examples of Mapping Keys

as grouping metacharacter, Extended Regular Expressions, Extended Regular Expressions

matching, A Special Search Command





(underscore), using in file names, Opening a File

* (asterisk), The cinkeys option

cinkeys syntax rules, The cinkeys option





* (asterisk) metacharacter, Metacharacters Used in Search Patterns

+ (plus sign), Single Movements, Movement by Line, Movement by Line, Advancing to a Specific Place, Line Addressing Symbols, Extended Regular Expressions, Extended Regular Expressions, Buffers and Their Interaction with Windows, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Command-Line Options

\+ metacharacter, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

buffers, describing, Buffers and Their Interaction with Windows

metacharacter, Extended Regular Expressions, Extended Regular Expressions

move cursor command, Single Movements, Movement by Line, Movement by Line

for next file lines (ex), Line Addressing Symbols

running commands when starting vi, Advancing to a Specific Place





+-- marker, as a fold placeholder, Manual Folding

+/ option, Command-Line Options

+? option, Command-Line Options

, (comma), Current Line Searches, ex Commands, Defining a Range of Lines

for line ranges (ex), ex Commands, Defining a Range of Lines

repeat search command, Current Line Searches





- (hyphen), Single Movements, Movement by Line, Line Addressing Symbols, Buffers and Their Interaction with Windows, Manual Folding

buffers, describing, Buffers and Their Interaction with Windows

manual folding and, Manual Folding

move cursor command, Single Movements, Movement by Line

for previous file lines (ex), Line Addressing Symbols





-? option (elvis), Important Command-Line Arguments

-? option (vile), Important Command-Line Arguments

-b option, Command-Line Options

-e option, Command-Line Options

-h option, Command-Line Options

. (dot), Opening a File, Repeat, Line Addressing Symbols, Confirming Substitutions, Metacharacters Used in Search Patterns, Categories of Features, Variables, Infinite Undo

current line symbol (ex), Line Addressing Symbols

echo command and, Variables

filenames and, Opening a File

meta-information, extracting, Categories of Features

metacharacter, Metacharacters Used in Search Patterns

repeat command, Repeat, Confirming Substitutions

undo/redo (nvi), Infinite Undo





.viminfo file, Categories of Features

.vimrc startup file, Using the strftime() function

strftime() function and, Using the strftime() function





/ (slash), The vi Text Editor, Opening a File, Movement by Searches, Advancing to a Specific Place, Visual Mode

pathname separator, Opening a File

referring to marks (vile), Visual Mode

search command, The vi Text Editor, Movement by Searches, Advancing to a Specific Place

opening files at specific place, Advancing to a Specific Place





0 (move cursor) command, Movement Within a Line, Movement on the current line

\1, \2, ... metacharacters, Metacharacters Used in Replacement Strings, Extended Regular Expressions

: (colon), The vi Text Editor, Problems Opening Files, ex Commands, Executing Unix Commands, Categories of Features

:! commands and, Executing Unix Commands

ex commands and, ex Commands

line-editing mode, Problems Opening Files

meta-information, extraction, Categories of Features

using ex commands and, The vi Text Editor





:ls command, Buffers and Their Interaction with Windows

buffers, describing and, Buffers and Their Interaction with Windows





:sball command, Buffer Command Synopsis

:tmenu command, Tooltips

:tselect command, Tag Stacking

:version command, Where to Get Vim

:vertical command, Resizing Command Synopsis

:w (write) command, Read-Only Mode

:w command, saving existing files, Problems Saving Files

:w! command overwriting files, Problems Saving Files

; (semicolon), Current Line Searches, Redefining the Current Line Position

for line ranges (ex), Redefining the Current Line Position

repeat search command, Current Line Searches





<> (angle brackets), Appending to a Saved File, Metacharacters Used in Search Patterns, Here Documents, A Special Search Command

<< (redirect/here document) operator, Here Documents

>> (redirect/append) operator, Appending to a Saved File

\< \> metacharacters, Metacharacters Used in Search Patterns

matching, A Special Search Command





= (equals sign), Defining a Range of Lines, Extended Regular Expressions, Buffers and Their Interaction with Windows, Extended Regular Expressions

:= (identify line) command, Defining a Range of Lines

\= metacharacter, Extended Regular Expressions, Extended Regular Expressions

buffers, describing, Buffers and Their Interaction with Windows





? (question mark), The vi Text Editor, Movement by Searches, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

\? metacharacter, Extended Regular Expressions, Extended Regular Expressions

metacharacter, Extended Regular Expressions, Extended Regular Expressions

search command, The vi Text Editor, Movement by Searches





@ (at sign), Extended Regular Expressions, Important Command-Line Arguments, Initialization

@ option (vile), Important Command-Line Arguments, Initialization

\@ metacharacter, Extended Regular Expressions





@-functions, @-Functions

[] (brackets), Movement by Text Blocks, Metacharacters Used in Search Patterns, POSIX Bracket Expressions, POSIX Bracket Expressions, POSIX Bracket Expressions

[[, ]] (move cursor) commands, Movement by Text Blocks

[: :] metacharacters, POSIX Bracket Expressions

[. .] metacharacters, POSIX Bracket Expressions

[= =] metacharacters, POSIX Bracket Expressions

metacharacters, Metacharacters Used in Search Patterns





\ (backslash) metacharacter, Metacharacters Used in Search Patterns, Metacharacters Used in Search Patterns, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

\1, \2, ... metacharacters, Metacharacters Used in Replacement Strings, Extended Regular Expressions

\< \> metacharacters, Metacharacters Used in Search Patterns

\@ metacharacter, Extended Regular Expressions

\b metacharacter, Extended Regular Expressions

\{…} metacharacter, Extended Regular Expressions, Extended Regular Expressions

\d, \D metacharacters, Extended Regular Expressions

\e metacharacter, Metacharacters Used in Replacement Strings, Extended Regular Expressions

\E metacharacter, Metacharacters Used in Replacement Strings

\= metacharacter, Extended Regular Expressions, Extended Regular Expressions

\f, \F metacharacters, Extended Regular Expressions

\i, \I metacharacters, Extended Regular Expressions

\k, \K metacharacters, Extended Regular Expressions

\n metacharacter, Metacharacters Used in Replacement Strings, Extended Regular Expressions, Extended Regular Expressions

\p, \P metacharacters, Extended Regular Expressions, Extended Regular Expressions

\(...\) metacharacters, Metacharacters Used in Search Patterns, Extended Regular Expressions, Extended Regular Expressions

\+ metacharacter, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

\? metacharacter, Extended Regular Expressions, Extended Regular Expressions

\r metacharacter, Extended Regular Expressions

\s, \S metacharacters, Extended Regular Expressions, Extended Regular Expressions

\t metacharacter, Extended Regular Expressions

\u and \l metacharacters, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings

\U and \L metacharacters, Metacharacters Used in Replacement Strings

\| metacharacter, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

\w, \W metacharacters, Extended Regular Expressions





^ (caret), Keystrokes, Keystrokes, Movement on the current line, Metacharacters Used in Search Patterns, Metacharacters Used in Search Patterns

cursor movement command, Movement on the current line

metacharacter, Metacharacters Used in Search Patterns

representing CTRL key, Keystrokes, Keystrokes

(see also CTRL- commands)





within [] metacharacters, Metacharacters Used in Search Patterns





^] command, Tag Stacking

` (backquote), The G (Go To) Command, Marking Your Place, Marking Your Place, Visual Mode

`` (move to mark) command, The G (Go To) Command, Marking Your Place

marking characters (vile), Visual Mode

move to mark command, Marking Your Place





{ } (braces), Movement by Text Blocks, Movement by Text Blocks, A Special Search Command, Extended Regular Expressions, Extended Regular Expressions, Folding and Outlining (Outline Mode), The cinkeys option, Extended Regular Expressions, Extended Regular Expressions

\{…} metacharacter, Extended Regular Expressions, Extended Regular Expressions

{ (move cursor) command, Movement by Text Blocks

} (move cursor) command, Movement by Text Blocks

cinkeys option, The cinkeys option

finding and matching, A Special Search Command

folding and, Folding and Outlining (Outline Mode)

metacharacters, Extended Regular Expressions, Extended Regular Expressions





| (vertical bar), Movement on the current line, Combining ex Commands, Extended Regular Expressions, Extended Regular Expressions, Manual Folding, Extended Regular Expressions, Extended Regular Expressions

alternation metacharacter, Extended Regular Expressions, Extended Regular Expressions

\| metacharacter, Extended Regular Expressions, Extended Regular Expressions

for combining ex commands, Combining ex Commands

cursor movement command, Movement on the current line

manual folding and, Manual Folding





~ (tilde), Opening a File, Changing Case, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Extended Regular Expressions, Manual Folding

:~ (substitute using last search pattern) command (ex), More Substitution Tricks

along left screen margin, Opening a File

case conversion command, Changing Case

folding, Manual Folding

as last replacement text, Metacharacters Used in Search Patterns

metacharacter, Metacharacters Used in Replacement Strings, Extended Regular Expressions





~~ (folding), toggling case, Manual Folding





A


a (append) command, Simple Edits, Appending Text, Insert Commands,

ex,





A (append) command, More Ways to Insert Text, Insert Commands

-a option (elvis), Important Command-Line Arguments, Initialization Steps

a status flag, Buffers and Their Interaction with Windows

a: Vim variable, Variables

:ab (abbreviation) command (ex), The .exrc File, Word Abbreviation,

commands in .exrc files, The .exrc File





abbreviations of commands, Word Abbreviation, Abbreviations of Vim Commands and Options

absolute line addresses, Defining a Range of Lines

absolute pathnames, Opening a File

Acme editor, The vi Text Editor

“Address search hit BOTTOM without matching pattern” message, Repeating Searches

:alias command (elvis), Interesting Features

alphabetizing text blocks (example), Sorting Text Blocks: A Sample ex Script

alternate .exrc files, Alternate Environments

alternate filenames (#), Calling in New Files

alternation, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

:amenu command, Basic menu customization

ampersand (&), Metacharacters Used in Replacement Strings, More Substitution Tricks

metacharacter, Metacharacters Used in Replacement Strings

to repeat last command, More Substitution Tricks





angle brackets (<>), Appending to a Saved File, Metacharacters Used in Search Patterns, Here Documents, A Special Search Command

<< (redirect/here document) operator, Here Documents

>> (redirect/append) operator, Appending to a Saved File

\< \> metacharacters, Metacharacters Used in Search Patterns

matching, A Special Search Command





apostrophe (') command, The G (Go To) Command, Marking Your Place, Marking Your Place

'' (move to mark) command, The G (Go To) Command, Marking Your Place

move to mark command, Marking Your Place





appending text, Simple Edits, Appending Text, Yanking to Named Buffers, Appending to a Saved File

from named buffers, Yanking to Named Buffers

to saved files, Appending to a Saved File





:apropos command (vile), Online Help and Other Documentation

:ar command, Using the Argument List,

archives on vi (FTP), Amaze Your Friends!

:args command, Using the Argument List,

arity keyword (ctags), The New tags Format

arrays (Vim), Arrays

arrow keys, Single Movements

ASCII characters, Digraphs: Non-ASCII Characters

asterisk (*), Metacharacters Used in Search Patterns, The cinkeys option

cinkeys syntax rules and, The cinkeys option





at sign (@), Extended Regular Expressions, Important Command-Line Arguments, Initialization

@ option (vile), Important Command-Line Arguments, Initialization

\@ metacharacter, Extended Regular Expressions





auto indenting, Auto and Smart Indenting, Keyword and Dictionary Word Completion

autocmd command, Autocommands, Autocommands and Groups, A Useful Vim Script Example

autocommands, Autocommands, Some Additional Thoughts About Vim Scripting

autoiconify option (elvis), Options

autoindent method, Auto and Smart Indenting

autosave option, Recovering a Buffer

autowrite option, Recovering a Buffer, Some Useful Options

awk data manipulation language, Beyond ex





B


:b (buffer) command,

b (move word) command, Movement by Text Blocks

B (move word) command, Movement by Text Blocks

-b option, Editing Binary Files

\b, \B metacharacters, Extended Regular Expressions

b: Vim variable, Variables

background color options, Setting the background option

backquote (`), The G (Go To) Command, Marking Your Place, Marking Your Place, Visual Mode

`` (move to mark) command, The G (Go To) Command, Marking Your Place

marking characters (vile), Visual Mode

move to mark command, Marking Your Place





backslash (\), Metacharacters Used in Search Patterns (see \ (backslash) metacharacter)

Backspace key, vi Commands, Single Movements

deleting in insert mode, vi Commands

moving with, Single Movements





backup files, Backups with Vim

backupcopy option, Backups with Vim

backupdir option, Backups with Vim

backupnext option, Backups with Vim

backupskip option, Backups with Vim

backward searching, Movement by Searches

“Bad file number” message, Problems Opening Files

“Bad termpcap entry” message, Problems Opening Files

:badd command, Buffer Command Synopsis

:ball command, Buffer Command Synopsis

:bd (bdelete) command,

:bdelete command, Buffer Command Synopsis

beep mode, Modus Operandi

(see also command mode)





beginning of line context, The cinkeys option

:behave command (gvim), Using the Mouse

:bfirst command, Buffer Command Synopsis

:bg (hide window) command (nvi), Multiwindow Editing

binary data, editing, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data

elvis editor, Arbitrary Length Lines and Binary Data

nvi editor, Arbitrary Length Lines and Binary Data

vile editor, Arbitrary Length Lines and Binary Data





binary files, editing, Editing Binary Files

binary option (elvis), Arbitrary Length Lines and Binary Data

:bind-key command, The vile Editing Model

black-hole registers, Categories of Features

blank parameter (sessionoptions option), The mksession Command

blinktime option (elvis), Options

block (visual) mode, Visual Mode, Visual Mode, Visual Mode

elvis editor, Visual Mode

vile editor, Visual Mode





“Block device required” message, Problems Opening Files

“Block special file” message, Problems Opening Files

:bmod command, Buffer Command Synopsis

:bnext command, Buffer Command Synopsis

:bNext command, Buffer Command Synopsis

bookmarks, placing, Marking Your Place

Bostic, Keith, Author and History

bottom-line commands, The vi Text Editor

:bprevious command, Buffer Command Synopsis

braces ({ }), Movement by Text Blocks, Movement by Text Blocks, A Special Search Command, Extended Regular Expressions, Extended Regular Expressions, Folding and Outlining (Outline Mode), The cinkeys option, Extended Regular Expressions, Extended Regular Expressions

\{…} metacharacter, Extended Regular Expressions, Extended Regular Expressions

{ (move cursor) command, Movement by Text Blocks

} (move cursor) command, Movement by Text Blocks

cinkeys options and, The cinkeys option

finding and matching, A Special Search Command

folding and, Folding and Outlining (Outline Mode)

metacharacters, Extended Regular Expressions, Extended Regular Expressions





brackets ([]), Movement by Text Blocks, Metacharacters Used in Search Patterns, POSIX Bracket Expressions, POSIX Bracket Expressions, POSIX Bracket Expressions, A Special Search Command

[[, ]] (move cursor) commands, Movement by Text Blocks

[: :] metacharacters, POSIX Bracket Expressions

[. .] metacharacters, POSIX Bracket Expressions

[= =] metacharacters, POSIX Bracket Expressions

matching, A Special Search Command

metacharacters, Metacharacters Used in Search Patterns





branching undos, Undoing Undos

:browse command, Tag Stacks

bs values (lptype option), Display Modes

Buettner, Kevin, vile: vi Like Emacs

bufdisplay option (elvis), Display Modes

bufdo command, Buffer Commands

BufEnter autocommand, Options During Splits

buffer variables, Buffer Variables

buffers, Opening and Closing Files, Moving Text, Copying Text, Recovering a Buffer, Recovering a Buffer, Recovering a Buffer, Making Use of Buffers, Making Use of Buffers, Yanking to Named Buffers, Review of vi Buffer and Marking Commands, Renaming the Buffer, Copying a File into Another File, Edits Between Files, Metacharacters Used in Search Patterns, @-Functions, Multiwindow Editing, Extended Regular Expressions, Multiple Windows in Vim, Buffers and Their Interaction with Windows, Playing Tag with Windows, Vim’s Special Buffers, Hidden Buffers, Buffer Commands, Interesting Features, Command-Line History and Completion, Extended Regular Expressions

autowrite and autosave options, Recovering a Buffer

commands, Review of vi Buffer and Marking Commands, Buffer Commands, Command-Line History and Completion

for summary, Review of vi Buffer and Marking Commands





copying file contents into, Copying a File into Another File

executing contents of, @-Functions

hidden, Hidden Buffers

hold buffer (metacharacters), Metacharacters Used in Search Patterns, Extended Regular Expressions, Extended Regular Expressions

interaction with windows, Buffers and Their Interaction with Windows, Playing Tag with Windows

multiple windows, editing, Multiple Windows in Vim

multiwindow editing and, Multiwindow Editing

named buffers, Copying Text, Yanking to Named Buffers, Edits Between Files, Interesting Features

arbitrarily naming (nvi), Interesting Features





numbered buffers for deletions/yanks, Moving Text, Making Use of Buffers

preserving manually, Recovering a Buffer

recovering after system failure, Recovering a Buffer

renaming (ex), Renaming the Buffer

special, Vim’s Special Buffers





:buffers command, Buffers and Their Interaction with Windows, Buffer Command Synopsis,

buffers parameter (sessionoptions option), The mksession Command

BufLeave autocommand, Options During Splits

BufNewFile command, Autocommands

BufRead command, Autocommands

BufReadPost command, Autocommands

BufReadPre command, Autocommands

BufWrite command, Autocommands

BufWritePre command, Autocommands

built-in calculator, elvis, Interesting Features

:bunload command, Buffer Command Synopsis





C


c (change) command, Simple Edits, Changing Text, Words, Words, Lines, Lines, Review of Basic vi Commands, Changing through searching, More Command Combinations, Insert Commands,

cc command, Lines, Lines

cw command, Words, Words

examples of use, Review of Basic vi Commands, More Command Combinations

review examples of, Changing through searching





C (change) command, Lines, Insert Commands

-c option, Advancing to a Specific Place, Confirming Substitutions, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Command-Line Options

elvis editor, Important Command-Line Arguments

nvi editor, Important Command-Line Arguments

:s command, Confirming Substitutions

vile editor, Important Command-Line Arguments





-C option, Command-Line Options

c$ command, Changing and deleting text

C/C++ programming languages, More Examples of Mapping Keys, Major Modes

cmode mode (vile), Major Modes

comments, placing (example), More Examples of Mapping Keys





:calc command (elvis), Interesting Features

calculator, elvis, Interesting Features

capitals, changing to lowercase, Changing Case, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings

Caps Lock key, Problem Checklist

caret (^), Keystrokes, Keystrokes, Movement on the current line, Metacharacters Used in Search Patterns, Metacharacters Used in Search Patterns

cursor movement command, Movement on the current line

metacharacter, Metacharacters Used in Search Patterns

representing CTRL key, Keystrokes, Keystrokes

(see also CTRL- commands)





within [] metacharacters, Metacharacters Used in Search Patterns





case sensitivity, The vi Text Editor, The vi Text Editor, Opening a File, Problem Checklist, Metacharacters Used in Replacement Strings, The :set Command, Some Useful Options

case-insensitive pattern searches, The :set Command

of commands, The vi Text Editor

pattern searching, Some Useful Options





case, converting, Changing Case, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings

cc command, Edit-Compile Speedup, Changing and deleting text

ccprg option (elvis), Edit-Compile Speedup

cd command,

cedit option (nvi), Command-Line History and Completion

center command,

change word (cw) command, The vi Text Editor

changing (replacing) text, Simple Edits, Changing Text, Words, Words, Lines, Lines, Characters, Substituting text, Changing through searching, Global Replacement, Confirming Substitutions, Context-Sensitive Replacement, Metacharacters Used in Replacement Strings, More Substitution Tricks

by characters, Characters

globally, Global Replacement, Confirming Substitutions, Context-Sensitive Replacement, Metacharacters Used in Replacement Strings, More Substitution Tricks

confirming substitutions, Confirming Substitutions

context sensitivity, Context-Sensitive Replacement

replacement-string metacharacters, Metacharacters Used in Replacement Strings

substitution tricks, More Substitution Tricks





by lines, Lines, Lines, Substituting text

searching and, Changing through searching

by words, Words, Words





character classes, POSIX Bracket Expressions, POSIX Bracket Expressions

“Character special file” message, Problems Opening Files

character strings, Movement by Searches

characters, vi Commands, Single Movements, Characters, Changing Case, Characters, Transposing two letters, Review of Basic vi Commands, Current Line Searches, Pattern-Matching Rules, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Visual Mode

(see also lines; text; words)

case conversions, Changing Case, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings

deleting, vi Commands, Characters

marking with ` (vile), Visual Mode

matching, Pattern-Matching Rules (see metacharacters)

moving by, Single Movements

replacing (changing) singly, Characters

searching for in lines, Current Line Searches

transposing, Transposing two letters





cindent method, Auto and Smart Indenting

cinkeys cindent option, cindent

cinoptions cindent option, cindent, The cinoptions option

cinwords cindent option, cindent, The cinwords option

class keyword (ctags), The New tags Format

clicking in elvis, Mouse Behavior

-client option (elvis), The Basic Window

clipboard, gvim in Microsoft Windows, Clipboard

Windows, gvim in Microsoft Windows

xvile and, Clipboard





clo (close) command,

clones, vi, And These Are My Brothers, Darrell, Darrell, and Darrell, A Look Ahead, Multiwindow Editing, Multiwindow Editing, GUI Interfaces, Extended Regular Expressions, Extended Regular Expressions, Enhanced Tags, Exuberant ctags and Vim, Improved Facilities, Mode Indicators, Programming Assistance, Syntax Highlighting, Editor Comparison Summary, Editor Comparison Summary, Extended Regular Expressions, Extended Regular Expressions, Multiwindow Editing, Multiwindow Editing, Extended Regular Expressions, Extended Regular Expressions, Improvements for Editing, Left-Right Scrolling, Multiwindow Editing, Multiwindow Editing, GUI Interfaces, Options, Extended Regular Expressions, Extended Regular Expressions, Improved Editing Facilities, Visual Mode, Programming Assistance, Syntax Highlighting, Syntax Highlighting, Display Modes, Display Modes, Multiwindow Editing, Multiwindow Editing, GUI Interfaces, winvile Basic Appearance and Functionality, GUI Interfaces, winvile Basic Appearance and Functionality, Extended Regular Expressions, Extended Regular Expressions, Improved Editing Facilities, Visual Mode, Programming Assistance, Syntax Highlighting, Syntax Highlighting, Setting Options

(see also specific clone)

enhanced tags, Enhanced Tags, Exuberant ctags and Vim

feature summary, Editor Comparison Summary

GUI interfaces, GUI Interfaces, GUI Interfaces, Options, Syntax Highlighting, Display Modes, Display Modes, GUI Interfaces, winvile Basic Appearance and Functionality, GUI Interfaces, winvile Basic Appearance and Functionality, Syntax Highlighting

elvis editor, GUI Interfaces, Options, Syntax Highlighting, Display Modes, Display Modes

vile editor, GUI Interfaces, winvile Basic Appearance and Functionality, GUI Interfaces, winvile Basic Appearance and Functionality, Syntax Highlighting





improvements over vi, Improved Facilities, Mode Indicators, Improvements for Editing, Left-Right Scrolling, Improved Editing Facilities, Visual Mode, Improved Editing Facilities, Visual Mode

elvis editor, Improved Editing Facilities, Visual Mode

nvi editor, Improvements for Editing, Left-Right Scrolling

vile editor, Improved Editing Facilities, Visual Mode





multiwindow editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing

elvis editor, Multiwindow Editing, Multiwindow Editing

nvi editor, Multiwindow Editing, Multiwindow Editing

vile editor, Multiwindow Editing, Multiwindow Editing





programming assistance, Programming Assistance, Syntax Highlighting, Programming Assistance, Syntax Highlighting, Programming Assistance, Syntax Highlighting

elvis editor, Programming Assistance, Syntax Highlighting

vile editor, Programming Assistance, Syntax Highlighting





regular expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

elvis editor, Extended Regular Expressions, Extended Regular Expressions

nvi editor, Extended Regular Expressions, Extended Regular Expressions

vile editor, Extended Regular Expressions, Extended Regular Expressions

Vim editor, Extended Regular Expressions, Extended Regular Expressions





set command options (list), Setting Options





:close command (elvis), Multiwindow Editing

:close[!] command, Closing and Quitting Windows

cmd command, Conditional Split Commands, Buffer Commands, Command-Line Options

windo and bufdo commands, Buffer Commands





cmdheight option, Window Sizing Options

cmode mode (vile), Major Modes

:cnewer command, Compiling and Checking Errors with Vim

:cnext command, Compiling and Checking Errors with Vim

:co (copy) command (ex), Editing with ex,

coffee mugs with vi logo, vi for Java Lovers

:colder command, Compiling and Checking Errors with Vim

collating symbols, POSIX Bracket Expressions

colon (:), The vi Text Editor, Problems Opening Files, ex Commands, Executing Unix Commands, Categories of Features

:! commands and, Executing Unix Commands

ex commands and, The vi Text Editor, ex Commands

line-editing mode, Problems Opening Files

meta-information, extracting, Categories of Features





:color command, The colorscheme command

colors, What’s Your Favorite Color (Scheme)?, Dynamic File Type Configuration Through Scripting, GUI Interfaces

GUI interfaces, GUI Interfaces

schemes, What’s Your Favorite Color (Scheme)?, Dynamic File Type Configuration Through Scripting





colorscheme command, What’s Your Favorite Color (Scheme)?, Using the strftime() function, Tuning a Vim Script with Global Variables, Customization, The colorscheme command, Setting the background option

global variables, using Vim scripts, Tuning a Vim Script with Global Variables





comma (,), Current Line Searches, ex Commands, Defining a Range of Lines

for line ranges (ex), ex Commands, Defining a Range of Lines

repeat search command, Current Line Searches





command completion, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion

elvis editor, Command-Line History and Completion

nvi editor, Command-Line History and Completion

vile editor, Command-Line History and Completion





command mode, The vi Text Editor, Modus Operandi, vi Commands, Using the map Command, More Examples of Mapping Keys, Mapping Function Keys, Mode Indicators, Using the Mouse, Command Mode

gvim, using the mouse, Using the Mouse

keystroke maps, Using the map Command, More Examples of Mapping Keys, Mapping Function Keys

function keys and special keys, Mapping Function Keys

useful examples of, More Examples of Mapping Keys





mode indicators, Mode Indicators





command-line, Options When Starting vi, Command-Line History and Completion, Startup and Initialization Options, Multiwindow Initiation from the Command Line (Shell), Important Command-Line Arguments, Important Command-Line Arguments, Command-Line History and Completion, Important Command-Line Arguments, Important Command-Line Arguments, Command-Line History and Completion, Important Command-Line Arguments, Important Command-Line Arguments, Command-Line History and Completion, Command-Line Syntax, Review of vi Operations, Command-Line Options

history, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion

elvis editor, Command-Line History and Completion

nvi editor, Command-Line History and Completion

vile editor, Command-Line History and Completion





multiwindow initiation from, Multiwindow Initiation from the Command Line (Shell)

options, Options When Starting vi, Startup and Initialization Options, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Command-Line Options

elvis editor, Important Command-Line Arguments, Important Command-Line Arguments

nvi editor, Important Command-Line Arguments, Important Command-Line Arguments

vile editor, Important Command-Line Arguments, Important Command-Line Arguments





syntax, Command-Line Syntax, Review of vi Operations





commands, The vi Text Editor, The vi Text Editor, The vi Text Editor, Saving and Quitting a File, Quitting Without Saving Edits, Problems Saving Files, Problems Saving Files, Saving Commands, Using the strftime() function, The execute Command, Autocommands, Autocommands and Groups, Deleting Autocommands, Deleting Autocommands, Deleting Autocommands, Abbreviations of Vim Commands and Options, Window Commands (Vim), Problems with vi Commands

abbreviations of Vim, Abbreviations of Vim Commands and Options

auto, Autocommands, Autocommands and Groups, Deleting Autocommands, Deleting Autocommands, Deleting Autocommands

deleting, Deleting Autocommands, Deleting Autocommands, Deleting Autocommands

groups, Autocommands and Groups





cw (change word), The vi Text Editor

echo, Using the strftime() function

ex, Quitting Without Saving Edits

execute, The execute Command

i (insert), The vi Text Editor

saving, Saving Commands

:w command, saving edited files, Problems Saving Files

:w!, overwriting files, Problems Saving Files

window (Vim), Window Commands (Vim)

wq, saving edits, Saving and Quitting a File





comment display mode (elvis), Syntax Highlighting

comments, More Examples of Mapping Keys, Comments in ex Scripts

in ex scripts, Comments in ex Scripts

placing markers around lines (example), More Examples of Mapping Keys





compatible option, Categories of Features

compiling program source code, Edit-Compile Speedup, Edit-Compile Speedup, Edit-Compile Speedup

elvis editor, Edit-Compile Speedup

vile editor, Edit-Compile Speedup





completion commands, Insertion Completion Commands, Some Final Comments on Vim Autocompletion

completion, command-line, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion

elvis editor, Command-Line History and Completion

nvi editor, Command-Line History and Completion

vile editor, Command-Line History and Completion





conditional execution, Conditional Execution

configuration files, Starting gvim

gvim, Starting gvim





:configure command (vile), Building xvile

confirming substitutions, Confirming Substitutions

context-sensitive global replacement, Context-Sensitive Replacement

copies of files, working in buffers, Opening and Closing Files

:copy command (ex), Editing with ex

:copy-to-clipboard command (xvile), Clipboard

copying files into other files, Copying a File into Another File

copying text, Simple Edits, Moving Text, Copying Text, Making Use of Buffers, Yanking to Named Buffers, Editing with ex, Edits Between Files

by lines, Editing with ex

named deletion/yank buffers, Yanking to Named Buffers, Edits Between Files

yank-and-put, Simple Edits, Moving Text, Making Use of Buffers

numbered deletion/yank buffers, Moving Text, Making Use of Buffers





COSE standards, The Session File

countzF fold command, The Fold Commands

:cprevious command, Compiling and Checking Errors with Vim

cr values (lptype option), Display Modes

cscope program, Tag Stacks

ctags command (Unix), Using Tags, Using Tags, Enhanced Tags, Exuberant ctags and Vim, Tag Stacks, Exuberant ctags and Vim, Solaris vi, Exuberant ctags and Vim, Tag Stacks, Tag Stacks, Tag Stacks, Tag Stacks, Tag Stacks, Tag Stacks

Exuberant ctags program, Enhanced Tags, Exuberant ctags and Vim, Tag Stacks, Tag Stacks

tag stacks, Using Tags, Tag Stacks, Exuberant ctags and Vim, Solaris vi, Exuberant ctags and Vim, Tag Stacks, Tag Stacks, Tag Stacks, Tag Stacks

elvis editor, Tag Stacks

nvi editor, Tag Stacks, Tag Stacks

Solaris vi, Using Tags, Solaris vi, Exuberant ctags and Vim

vile editor, Tag Stacks





CTRL- commands, Repeat, Scrolling the Screen, Scrolling the Screen, Scrolling the Screen, Redrawing the Screen, Movement by Line Number, Defining a Range of Lines, Switching Files from vi, Protecting Keys from Interpretation by ex, Tag Stacks, Exuberant ctags and Vim, Solaris vi, Incremental Searching, Left-Right Scrolling, Moving Around Windows (Getting Your Cursor from Here to There), Window Resize Commands, Keyword and Dictionary Word Completion, Multiwindow Editing, Tag Stacks, Tag Stacks, Multiwindow Editing, Tag Stacks, Tag Stacks, Visual Mode, Tag Stacks, Tag Stacks, Tag Stacks

CTRL-A CTRL-] (next tag; vile), Tag Stacks

CTRL-@, Repeat

CTRL-B, CTRL-F (scrolling), Scrolling the Screen

CTRL-] (find tag), Tag Stacks, Exuberant ctags and Vim, Tag Stacks, Tag Stacks, Tag Stacks

CTRL-^ command, Switching Files from vi

CTRL-D, CTRL-U (scrolling), Scrolling the Screen

CTRL-E, CTRL-Y (scrolling), Scrolling the Screen

CTRL-G (display line numbers), Movement by Line Number, Defining a Range of Lines

CTRL-L, CTRL-R (redrawing), Redrawing the Screen

CTRL-T (find tag), Solaris vi, Tag Stacks, Tag Stacks

CTRL-T CTRL-X CTRL-] (next tag; vile), Tag Stacks

CTRL-V, Protecting Keys from Interpretation by ex

CTRL-V command (elvis block mode), Visual Mode

CTRL-W commands, Multiwindow Editing, Multiwindow Editing

elvis vi-mode window commands, Multiwindow Editing

nvi window cycle commands, Multiwindow Editing





CTRL-X CTRL-R, CTRL-X CTRL-L (scroll; vile), Left-Right Scrolling

CTRL-X CTRL-S, CTRL-X CTRL-R (search; vile), Incremental Searching

cursors, moving inside windows and, Moving Around Windows (Getting Your Cursor from Here to There)

resizing windows, Window Resize Commands

word completions and, Keyword and Dictionary Word Completion





curdir parameter (sessionoptions option), The mksession Command

curly braces ({ }), Movement by Text Blocks, Movement by Text Blocks, A Special Search Command, Extended Regular Expressions, Extended Regular Expressions

{ (move cursor) command, Movement by Text Blocks

} (move cursor) command, Movement by Text Blocks

finding and matching, A Special Search Command

metacharacters, Extended Regular Expressions, Extended Regular Expressions





current file, % for, Calling in New Files

current line (ex), Line Addressing Symbols, Redefining the Current Line Position

. symbol for, Line Addressing Symbols

redefining, Redefining the Current Line Position





cursor, moving, Moving the Cursor, Movement by Text Blocks, Movement Within a Screen, Movement by Text Blocks, Movement by Searches, Movement by Line Number, Review of vi Motion Commands, Advancing to a Specific Place, Marking Your Place, Setting the cursor position and mouse motions

commands for, Review of vi Motion Commands

to marks, Marking Your Place

opening files at specific place, Advancing to a Specific Place

by searching for patterns, Movement by Searches, Movement by Line Number

by text blocks, Movement by Text Blocks, Movement by Text Blocks

xvile interface, Setting the cursor position and mouse motions





CursorMoved command, Autocommands

CursorMoverI command, Autocommands

customizing editing environment, Customizing vi

cut-and-paste, Simple Edits, Moving Text, Multiple Windows in Vim

multiple windows in Vim and, Multiple Windows in Vim





cw (change word) command, The vi Text Editor, Changing and deleting text

Cygwin, Completion by dictionary





D


d (delete) command, Simple Edits, Deleting Text, Words, Words, Words, Lines, Moving Text, Copying Text, Review of Basic vi Commands, Changing through searching, Current Line Searches, More Command Combinations, Making Use of Buffers, Yanking to Named Buffers

db, d$, d0 commands, Words

dd command, Lines

de and dE commands, Words

df command, Current Line Searches

dw command, Words

examples of use, Review of Basic vi Commands, More Command Combinations

with named buffers, Copying Text, Yanking to Named Buffers

numbered buffers for, Moving Text, Making Use of Buffers

review examples of, Changing through searching





D (delete) command, Lines

:d (delete) command (ex), Editing with ex

-d option, Command-Line Options

-D option, Command-Line Options

d$ command, Changing and deleting text

\d, \D metacharacters, Extended Regular Expressions

database, switching items in (example), Switching Items in a Textual Database

date command (Unix), Executing Unix Commands

dav, Editing Files in Other Places

dd (delete line) command, Manual Folding, Changing and deleting text

“default” command mode, The vi Text Editor

:delete command (ex), Editing with ex

:delete-other-windows command (vile), Multiwindow Editing

:delete-window command (vile), Multiwindow Editing, Multiwindow Editing

deleting, vi Commands, Simple Edits, Deleting Text, Words, Lines, Characters, Problems with deletions, Moving Text, Copying Text, Current Line Searches, Making Use of Buffers, Recovering Deletions, Yanking to Named Buffers, Editing with ex, Search Patterns, Edits Between Files, More Examples of Mapping Keys

lines, Editing with ex

parentheses (example), More Examples of Mapping Keys

recovering deletions, Recovering Deletions

text, vi Commands, Simple Edits, Deleting Text, Words, Lines, Characters, Problems with deletions, Moving Text, Copying Text, Current Line Searches, Making Use of Buffers, Yanking to Named Buffers, Search Patterns, Edits Between Files

by characters, vi Commands, Characters

with ex editor, Search Patterns

by lines, Lines

named buffers for, Copying Text, Yanking to Named Buffers, Edits Between Files

numbered buffers for, Moving Text, Making Use of Buffers

undoing deletions, Problems with deletions

by words, Words





:describe-function command (vile), Online Help and Other Documentation

:describe-key command (vile), Online Help and Other Documentation

df command, Problems Saving Files, Current Line Searches, Changing and deleting text

dG command, Changing and deleting text

:di (display) command, Multiwindow Editing, Tag Stacks, Display Modes

elvis editor, Display Modes

nvi editor, Multiwindow Editing, Tag Stacks





Dickey, Thomas, vile: vi Like Emacs

dictionary option, Completion by dictionary

diff command, Multiple Windows in Vim, What’s the Difference?

diff method, creating folds, Folding and Outlining (Outline Mode)

digraphs, Digraphs: Non-ASCII Characters

directories, navigating and changing, Navigating and Changing Directories, Backups with Vim

“Directory” message, Problems Opening Files

directory buffer, Vim’s Special Buffers

“Disk quota has been reached” message, Problems Saving Files

:display (di) command, Multiwindow Editing, Tag Stacks, Display Modes

elvis editor, Display Modes

nvi editor, Multiwindow Editing, Tag Stacks





display modes, elvis, Syntax Highlighting, Display Modes, Display Modes

:display syntax command (elvis), Syntax Highlighting, Display Modes, Display Modes

dL command, Changing and deleting text

dn command, Changing and deleting text

documentation, Online Help and Other Documentation, Online Help and Other Documentation, Online Help and Other Documentation, vi Web Sites, Amaze Your Friends!

elvis editor, Online Help and Other Documentation

nvi editor, Online Help and Other Documentation

vi-related archives (FTP), Amaze Your Friends!

vi-related web sites, vi Web Sites

vile editor, Online Help and Other Documentation





dollar sign ($), Movement Within a Line, Changing Text, Movement on the current line, Line Addressing Symbols, Metacharacters Used in Search Patterns

cursor movement command, Movement Within a Line, Movement on the current line

for last file line (ex), Line Addressing Symbols

marking end of change region, Changing Text

metacharacter, Metacharacters Used in Search Patterns





dot (.), Opening a File, Repeat, Line Addressing Symbols, Confirming Substitutions, Metacharacters Used in Search Patterns, Categories of Features, Variables, Infinite Undo

current line symbol (ex), Line Addressing Symbols

echo command and, Variables

filenames and, Opening a File

meta-information, extracting, Categories of Features

metacharacter, Metacharacters Used in Search Patterns

repeat command, Repeat, Confirming Substitutions

undo/redo (nvi), Infinite Undo





double quote (XXX_DQUOTE) command, Recovering Deletions, Yanking to Named Buffers

dt command, Changing and deleting text

dumb values (lptype option), Display Modes

dw command, Changing and deleting text

d^ command, Changing and deleting text

d} command, Changing and deleting text





E


:e (edit file) command (ex), Calling in New Files, Calling in New Files,

:e! command, Calling in New Files





e (move cursor) command, Movement by Text Blocks

E (move cursor) command, Movement by Text Blocks

:e command, Accessing Multiple Files

\E metacharacter, Metacharacters Used in Replacement Strings

\e metacharacter, Metacharacters Used in Replacement Strings, Extended Regular Expressions

:e! ENTER command, Quitting Without Saving Edits

eadirection option, Window Sizing Options

“easy gvim” (MS Windows), Graphical Vim (gvim)

echo command, Using the strftime() function

echoing of commands, The vi Text Editor

Eclipse, Vim Enhancements for Programmers

ed line editor, The vi Text Editor

ed text editor, The vi Text Editor

edcompatible option, More Substitution Tricks

:edit command, Buffers and Their Interaction with Windows

:Edit command (nvi), Multiwindow Editing

edit commands, Edit Commands

edit-compile speedup, Edit-Compile Speedup, Edit-Compile Speedup, Edit-Compile Speedup

elvis editor, Edit-Compile Speedup

vile editor, Edit-Compile Speedup





editing, Simple Editing, Review of Basic vi Commands, Read-Only Mode, Recovering a Buffer, Editing with ex, Editing Multiple Files, Global Replacement, Customizing vi, More Examples of Mapping Keys, Editing Program Source Code, Indentation Control, A Special Search Command, Using Tags, Multiwindow Editing, Multiwindow Editing, Enhanced Tags, Exuberant ctags and Vim, Improved Facilities, Mode Indicators, Command-Line History and Completion, Categories of Features, Multiwindow Editing, Multiwindow Editing, Improvements for Editing, Left-Right Scrolling, Command-Line History and Completion, Multiwindow Editing, Multiwindow Editing, Improved Editing Facilities, Visual Mode, Command-Line History and Completion, Multiwindow Editing, Multiwindow Editing, Improved Editing Facilities, Visual Mode, Command-Line History and Completion, The vile Editing Model

clone improvements over vi, Improved Facilities, Mode Indicators, Improvements for Editing, Left-Right Scrolling, Improved Editing Facilities, Visual Mode, Improved Editing Facilities, Visual Mode

customizing editing environment, Customizing vi

ex commands on command line, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion

elvis editor, Command-Line History and Completion

nvi editor, Command-Line History and Completion

vile editor, Command-Line History and Completion





ex editor for, Editing with ex

lists of files, More Examples of Mapping Keys

multiple files, Editing Multiple Files

read-only mode, Read-Only Mode

recovering the buffer, Recovering a Buffer

replacing text, Global Replacement (see replacing text)

source code, advice for, Editing Program Source Code, Indentation Control, A Special Search Command, Using Tags, Enhanced Tags, Exuberant ctags and Vim

indentation control, Indentation Control

matching brackets, A Special Search Command

using tags, Using Tags, Enhanced Tags, Exuberant ctags and Vim





transparent for Vim, Categories of Features

using multiple windows, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing

elvis editor, Multiwindow Editing, Multiwindow Editing

nvi editor, Multiwindow Editing, Multiwindow Editing

vile editor, Multiwindow Editing, Multiwindow Editing





vile editing model, The vile Editing Model





else blocks, Conditional Execution

elseif blocks, Conditional Execution

elvis (vi clone), Word Abbreviation, Arbitrary Length Lines and Binary Data, Infinite Undo, Left-Right Scrolling, Mode Indicators, Editor Comparison Summary, Author and History, Elvis, Sources and Supported Operating Systems, Important Command-Line Arguments, Important Command-Line Arguments, Online Help and Other Documentation, Initialization, Multiwindow Editing, Multiwindow Editing, GUI Interfaces, Options, Extended Regular Expressions, Extended Regular Expressions, Improved Editing Facilities, Visual Mode, Tag Stacks, Programming Assistance, Syntax Highlighting, Interesting Features, Pre- and Post-Operation Control Files, Display Modes, elvis Futures, Sources and Supported Operating Systems, elvis 2.2 Options

documentation and online help, Online Help and Other Documentation

extended regular expressions, Extended Regular Expressions, Extended Regular Expressions

feature summary, Editor Comparison Summary

future of, elvis Futures

GUI interfaces for, GUI Interfaces, Options

important command-line arguments, Important Command-Line Arguments, Important Command-Line Arguments

improvements over vi, Improved Editing Facilities, Visual Mode

infinite undo facility, Infinite Undo

initialization of, Initialization

interesting features, Interesting Features, Pre- and Post-Operation Control Files

line length, Arbitrary Length Lines and Binary Data

mode indicators, Mode Indicators

multiwindow editing, Multiwindow Editing, Multiwindow Editing

obtaining source code, Sources and Supported Operating Systems

print management, Display Modes

programming assistance, Programming Assistance, Syntax Highlighting

set command options (list), elvis 2.2 Options

sideways scrolling, Left-Right Scrolling

tag stacks, Tag Stacks

word abbreviations, Word Abbreviation





“elvis ex history” buffer, Command-Line History and Completion

elvis.arf file, Display Modes, Pre- and Post-Operation Control Files

elvis.awf file, Pre- and Post-Operation Control Files

elvis.brf file, Arbitrary Length Lines and Binary Data, Pre- and Post-Operation Control Files

elvis.bwf file, Pre- and Post-Operation Control Files

elvis.ini script, Initialization Steps

elvis.msg file, Initialization Steps, Interesting Features

ELVISPATH environment variable (elvis), Initialization Steps

elvispath option (elvis), Initialization Steps

Emacs text editor, The vi Text Editor, Graphical Vim (gvim), The vile Editing Model, Tastes Great, Less Filling

vi editor versus, Tastes Great, Less Filling

vile editing model, The vile Editing Model





END key, mapping, Mapping Other Special Keys

endfunction statement, Defining Functions

ENTER command, Quitting Without Saving Edits

Enter key, Single Movements, Movement Within a Line, Movement by Line

moving with, Single Movements, Movement by Line

newlines in insert mode, Movement Within a Line





enum keyword (ctags), The New tags Format

epson values (lptype option), Display Modes

equalalways option, Window Sizing Options

equals sign (=), Defining a Range of Lines, Extended Regular Expressions, Buffers and Their Interaction with Windows, Extended Regular Expressions

:= (identify line) command, Defining a Range of Lines

\= metacharacter, Extended Regular Expressions, Extended Regular Expressions

buffers, describing, Buffers and Their Interaction with Windows





equivalence classes, POSIX Bracket Expressions

:er, errlist commands (elvis), Edit-Compile Speedup

erasing, vi Commands (see deleting)

error finder, vile, Edit-Compile Speedup

errorformat option, Compiling and Checking Errors with Vim

errors, compiling and checking, Compiling and Checking Errors with Vim, Some Final Thoughts on Vim for Writing Programs

ESC for command mode, vi Commands

ESC key, Modus Operandi

command mode, entering, Modus Operandi





/etc/vi.exrc file (nvi), Initialization

:eval command (elvis), Interesting Features

ex commands, Saving and Quitting a File, Quitting Without Saving Edits, ex Commands, ex Commands, Line Addresses, Defining a Range of Lines, Line Addressing Symbols, Line Addressing Symbols, Redefining the Current Line Position, Redefining the Current Line Position, Combining ex Commands, Saving and Exiting Files, Executing Unix Commands, Command-Line History and Completion, Tag Stacking, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion, Problems Opening Files, Problems Saving Files

combining, Combining ex Commands

editing on command line, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion

elvis editor, Command-Line History and Completion

nvi editor, Command-Line History and Completion

vile editor, Command-Line History and Completion





executing Unix commands, Executing Unix Commands

line addresses, ex Commands, Line Addresses, Defining a Range of Lines, Redefining the Current Line Position

ranges of lines, Defining a Range of Lines, Redefining the Current Line Position





line addressing, Line Addressing Symbols, Line Addressing Symbols, Redefining the Current Line Position

redefining current line, Redefining the Current Line Position

relative addressing, Line Addressing Symbols

symbols for, Line Addressing Symbols





opening files and, Problems Opening Files

saving and exiting, Saving and Quitting a File, Saving and Exiting Files

saving files and, Problems Saving Files

tag stacking and, Tag Stacking





ex line editor, The vi Text Editor

ex scripts, Using ex Scripts

ex text editor, The vi Text Editor, The vi Text Editor, Introducing the ex Editor, Editing with ex, Filtering text with ex, Executing Buffers from ex, Looping in a Shell Script, ex Basics, Alphabetical Summary of ex Commands,

basics of, ex Basics

commands, Alphabetical Summary of ex Commands,

editing with, Editing with ex

executing buffers from, Executing Buffers from ex

filtering text with, Filtering text with ex

invoking on multiple files, Looping in a Shell Script

using ex commands in vi, The vi Text Editor





exclamation point (!), Problems Saving Files, Saving and Exiting Files, Executing Unix Commands, Filtering text with vi, Mapping Keys for Insert Mode, Buffers and Their Interaction with Windows, The cinkeys option

buffers, interaction with, Buffers and Their Interaction with Windows

cinkeys syntax rules, The cinkeys option

ex commands starting with, Problems Saving Files

mapping keys for insert mode, Mapping Keys for Insert Mode

overriding save warnings, Saving and Exiting Files

for Unix commands, Executing Unix Commands, Filtering text with vi





“Executable” message, Problems Opening Files

execute command, The execute Command

executing text from buffers, @-Functions

EXINIT environment variable, Customizing vi, Initialization, Initialization Steps

elvis editor, Initialization Steps

nvi editor, Initialization





“[Existing file]” message, Problems Saving Files

exists() function, The exists() Function

exiting ex (into vi), Problem Checklist

exiting vi, Saving and Quitting a File, Saving and Exiting Files

expr method, creating folds, Folding and Outlining (Outline Mode)

expressions, Expressions

.exrc files, Customizing vi, The .exrc File, Initialization, Interesting Features, Example .exrc File

security concerning (elvis), Interesting Features





exrc option, Alternate Environments, Initialization, Initialization Steps

extended regular expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

elvis editor, Extended Regular Expressions, Extended Regular Expressions

nvi editor, Extended Regular Expressions, Extended Regular Expressions

vile editor, Extended Regular Expressions, Extended Regular Expressions

Vim editor, Extended Regular Expressions, Extended Regular Expressions





extended tags file format, Enhanced Tags, Exuberant ctags and Vim, Tag Stacks, Tag Stacks

extensions, Extensions

Exuberant ctags program, Enhanced Tags, Exuberant ctags and Vim, Tag Stacks, Tag Stacks

:exusage command (nvi), Online Help and Other Documentation





F


:f (file) command,

f (search line) command, Current Line Searches

F (search line) command, Current Line Searches

-f option (elvis), Important Command-Line Arguments

-F option, Important Command-Line Arguments

\f, \F metacharacters, Extended Regular Expressions

:fg (uncover window) command (nvi), Multiwindow Editing

:Fg (uncover window) command (nvi), Multiwindow Editing

“File exists” message, Problems Saving Files

“File is read only” message, Problems Opening Files, Problems Saving Files

file keyword (ctags), The New tags Format

“File system is full” message, Problems Saving Files

“File to load” prompt, The Toolbar

filec option (nvi), Command-Line History and Completion

files, Opening a File, Opening a File, Saving and Quitting a File, Saving and Quitting a File, Problems Saving Files, Advancing to a Specific Place, Read-Only Mode, Read-Only Mode, ex Commands, Renaming the Buffer, Copying a File into Another File, Editing Multiple Files, Invoking vi on Multiple Files, Calling in New Files, Calling in New Files, Switching Files from vi, Alternate Environments, More Examples of Mapping Keys, Using ex Scripts, Multiwindow Initiation from the Command Line (Shell), Dynamic File Type Configuration Through Scripting, Editing Files in Other Places, Accessing Multiple Files, Problems Opening Files, Problems Saving Files

accessing multiple, Accessing Multiple Files

copying into other files, Copying a File into Another File

current and alternate (% and #), Calling in New Files

deleting, Problems Saving Files

editing, Editing Multiple Files (see editing)

editing in other places, Editing Files in Other Places

executing ex scripts on, Using ex Scripts

extensions, Dynamic File Type Configuration Through Scripting

filenames, Opening a File, ex Commands

iterating through lists of, More Examples of Mapping Keys

multiwindow editing and, Multiwindow Initiation from the Command Line (Shell)

opening, Opening a File, Advancing to a Specific Place, Read-Only Mode, Invoking vi on Multiple Files, Calling in New Files, Switching Files from vi

multiple at once, Invoking vi on Multiple Files, Calling in New Files

previous file, Switching Files from vi

read-only mode, Read-Only Mode

at specific place, Advancing to a Specific Place





problems opening, Problems Opening Files

quitting, Saving and Quitting a File (see quitting vi)

reading as vi environments, Alternate Environments

renaming buffer (ex), Renaming the Buffer

saving, Saving and Quitting a File, Problems Saving Files (see saving edits)

writing, Read-Only Mode (see writing the buffer)





:files command, Buffers and Their Interaction with Windows, Buffer Command Synopsis

FileType command, Autocommands

filtering text through Unix commands, Filtering Text Through a Command

:find-file command (vile), Multiwindow Editing

“First address exceeds second” message, Redefining the Current Line Position

first line of file, Movement Within a Screen

moving to, Movement Within a Screen





firstx, firsty option (elvis), Options

fold command,

foldc command,

foldcolumn margin, Manual Folding

foldenable, setting, A Few Words About the Other Fold Methods

folding, Folding and Outlining (Outline Mode), Manual Folding, Outlining

manual, Manual Folding, Outlining





foldlevel command, Outlining

foldo command,

folds parameter (sessionoptions option), The mksession Command

fonts, GUI Interfaces (see GUI interfaces)

for loops, Looping in a Shell Script

formatting codes, The vi Text Editor

Fox, Paul, vile: vi Like Emacs

Fred Fish disk 591, Author and History

FreeBSD, Completion by dictionary

FTP, Editing Files in Other Places, Amaze Your Friends!

archives on vi, Amaze Your Friends!





function display mode (elvis), Syntax Highlighting

function keys, mapping, Mapping Function Keys

function keyword (ctags), The New tags Format

function statement, Defining Functions

functions, Using the strftime() function, Defining Functions, The exists() Function, The exists() Function, Internal Functions, Internal Functions, Internal Functions

defining, Defining Functions

exists(), The exists() Function, The exists() Function

internal, Internal Functions, Internal Functions, Internal Functions

strftime, Using the strftime() function





G


:g (global replacement) command (ex), Context-Sensitive Replacement, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples, Using :g to Repeat a Command, Collecting Lines,

collecting lines with (example), Collecting Lines

pattern-matching examples, Pattern-Matching Examples

repeating commands with (example), Using :g to Repeat a Command

replacement-string metacharacters, Metacharacters Used in Replacement Strings

search-pattern metacharacters, Metacharacters Used in Search Patterns

substitution tricks, More Substitution Tricks





g (global) command (ex), Global Searches

G (go to) command, The G (Go To) Command

-g option, Starting gvim, GUI Options and Command Synopsis

gvim, Starting gvim





g option (:s command), Global Replacement

-G option (elvis), Important Command-Line Arguments

g: Vim variable, Variables

gg option, Line numbering

gI command, Insert Commands

gJ command, Copying and moving

global replacement, Global Replacement, Confirming Substitutions, Context-Sensitive Replacement, Pattern-Matching Rules, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples

confirming substitutions, Confirming Substitutions

context sensitivity, Context-Sensitive Replacement

examples of, Pattern-Matching Examples

global pattern-matching rules, Pattern-Matching Rules

pattern-matching rules, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks

replacement-string metacharacters, Metacharacters Used in Replacement Strings

search-pattern metacharacters, Metacharacters Used in Search Patterns

substitution tricks, More Substitution Tricks





global searches (ex), Global Searches

globals parameter (sessionoptions option), The mksession Command

glossary, A Complex Mapping Example

converting to troff (example), A Complex Mapping Example





GNU Emacs text editor, The vi Text Editor

gp command, Changing and deleting text

gP command, Changing and deleting text

gqap command, Changing and deleting text

Graphical User Interfaces, Categories of Features (see GUI interfaces)

Graphical Vim, Graphical Vim (gvim) (see gvim)

groups (syntax highlighting), Customization

:gui command, GUI Options and Command Synopsis, The Toolbar

elvis, The Toolbar





GUI interfaces, GUI Interfaces, Categories of Features, Graphical Vim (gvim), GUI Options and Command Synopsis, GUI Interfaces, Options, Syntax Highlighting, Display Modes, Display Modes, GUI Interfaces, Adding menus

elvis editor, GUI Interfaces, Options, Syntax Highlighting, Display Modes, Display Modes

display modes, Syntax Highlighting, Display Modes, Display Modes





gvim, Graphical Vim (gvim), GUI Options and Command Synopsis

vi clones, GUI Interfaces

vile editor, GUI Interfaces, Adding menus





guicursor option, GUI Options and Command Synopsis

guifont option, GUI Options and Command Synopsis

guifontset option, GUI Options and Command Synopsis

guifontwide option, GUI Options and Command Synopsis

guiheadroom option, GUI Options and Command Synopsis

guioptions option, Scrollbars, GUI Options and Command Synopsis

guitablabel option, GUI Options and Command Synopsis

guitabtooltip option, GUI Options and Command Synopsis

guw command, Changing and deleting text

gUw command, Changing and deleting text

gvim, Moving Around Windows (Getting Your Cursor from Here to There), Resizing Windows, Tabbed Editing, Graphical Vim (gvim), Starting gvim, Using the Mouse, Useful Menus, Useful Menus

menus, Useful Menus

mouse behavior and, Using the Mouse, Useful Menus

resizing windows and, Resizing Windows

starting, Starting gvim

tabbed editing, Tabbed Editing





$GVIMINIT environment variable, Starting gvim

.gvimrc startup file, What’s Your Favorite Color (Scheme)?, Defining Functions, Arrays, Starting gvim

arrays and, Arrays

colorscheme command and, What’s Your Favorite Color (Scheme)?

functions, defining, Defining Functions





gzip utility, A Look Ahead

g~w command, Changing and deleting text





H


H (home) command, Movement Within a Screen

h (move cursor) command, Single Movements, Movement on the current line

-h option, Important Command-Line Arguments

vile editor, Important Command-Line Arguments





h status flag, Buffers and Their Interaction with Windows

Haley, Chuck, Author and History

hash mark, Defining a Range of Lines (see pound sign (#))

help, Online Help and Other Documentation, Online Help and Other Documentation, Online Help and Other Documentation

elvis editor, Online Help and Other Documentation

nvi editor, Online Help and Other Documentation

vile editor, Online Help and Other Documentation





help buffer, Vim’s Special Buffers

:help command, Buffers and Their Interaction with Windows

:help (:h) command (vile), Online Help and Other Documentation

--help option, Multiwindow Editing Inside Vim

help parameter (sessionoptions option), The mksession Command

here documents, Here Documents

hex display mode (elvis), Arbitrary Length Lines and Binary Data, Display Modes

hid (hide) command,

hidden buffers, Hidden Buffers

Hiebert, Darren, Exuberant ctags

highlight command, The highlight command

highlight option, Customization

:historical-buffer command (vile), Multiwindow Editing

[History] buffer (vile), Command-Line History and Completion

history, command-line, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion, Command-Line History and Completion

elvis editor, Command-Line History and Completion

nvi editor, Command-Line History and Completion

vile editor, Command-Line History and Completion





hold buffer, Metacharacters Used in Search Patterns, Extended Regular Expressions, Extended Regular Expressions

home, Movement Within a Screen (see first line of file)

HOME key, mapping, Mapping Other Special Keys

$HOME/.nexrc file (nvi), Initialization

horizontal scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling

elvis editor, Left-Right Scrolling

nvi editor, Left-Right Scrolling

vile editor, Left-Right Scrolling





horizontally splitting windows, Multiwindow Initiation from the Command Line (Shell)

horizscroll option, Left-Right Scrolling

Horton, Mark, Author and History

hp values (lptype option), Display Modes

HTML, HTML Your Text

html display mode (elvis), Tag Stacks, Display Modes, Display Modes

hyphen (-), Single Movements, Movement by Line, Line Addressing Symbols, Buffers and Their Interaction with Windows, Manual Folding

buffers, describing, Buffers and Their Interaction with Windows

manual folding and, Manual Folding

move cursor command, Single Movements, Movement by Line

for previous file lines (ex), Line Addressing Symbols





I


i (insert) command, The vi Text Editor, vi Commands, Insert Commands,

I (insert) command, More Ways to Insert Text, Insert Commands

i flag (gvim mouse option), Using the Mouse

-i option, Important Command-Line Arguments, Command-Line Options

elvis editor, Important Command-Line Arguments





\i, \I metacharacters, Extended Regular Expressions

ibm values (lptype option), Display Modes

ic option, Metacharacters Used in Replacement Strings, The :set Command

IDEs (Integrated Development Environments), Categories of Features, Vim Enhancements for Programmers

if...then...else block, Conditional Execution, Arrays

ignorecase option, Some Useful Options

include files (C), Completion by keyword in current file and included files

:incremental-search command (vile), Incremental Searching

incremental searching, Incremental Searching, Incremental Searching, Incremental Searching

nvi editor, Incremental Searching

vile editor, Incremental Searching





incsearch option, Incremental Searching, Incremental Searching

elvis editor, Incremental Searching

Vim editor, Incremental Searching





indent method, creating folds, Folding and Outlining (Outline Mode)

indentation, Indentation Control

indentexpr method, Auto and Smart Indenting

indenting, Auto and Smart Indenting, Keyword and Dictionary Word Completion

infinite undo facility, Infinite Undo, Infinite Undo, Infinite Undo, Infinite Undo

elvis editor, Infinite Undo

nvi editor, Infinite Undo

vile editor, Infinite Undo





initialization, Initialization, Initialization, Initialization

elvis editor, Initialization

nvi editor, Initialization

vile editor, Initialization





initialization for Vim, Categories of Features

inputtab option (elvis), Command-Line History and Completion

insert (i) command, The vi Text Editor,

insert commands, Insert Commands

insert mode, The vi Text Editor, Modus Operandi, Word Abbreviation, Mapping Keys for Insert Mode, Mode Indicators, Using the Mouse, Insert Mode

gvim, using the mouse, Using the Mouse

mapping keys for, Mapping Keys for Insert Mode

mode indicators, Mode Indicators

word abbreviations, Word Abbreviation





inserting text, vi Commands, Simple Edits, Appending Text, Repeat, Repeat, More Ways to Insert Text, More Examples of Mapping Keys, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data

a (append) command, Simple Edits, Appending Text

handling long insertions, Repeat, More Examples of Mapping Keys, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data

elvis editor, Arbitrary Length Lines and Binary Data

nvi editor, Arbitrary Length Lines and Binary Data

vile editor, Arbitrary Length Lines and Binary Data





in insert mode, vi Commands

repeating insert with CTRL-@, Repeat





insertion completion command, Insertion Completion Commands, Some Final Comments on Vim Autocompletion

insertion-completion capabilities, Keyword and Dictionary Word Completion

Integrated Development Environments (IDEs), Categories of Features, Vim Enhancements for Programmers

interfaces for vi clones, GUI Interfaces, GUI Interfaces, Options, Syntax Highlighting, Display Modes, Display Modes, GUI Interfaces, Adding menus

elvis editor, GUI Interfaces, Options, Syntax Highlighting, Display Modes, Display Modes

display modes, Syntax Highlighting, Display Modes, Display Modes





vile editor, GUI Interfaces, Adding menus





internal functions, Internal Functions

internationalization support, Interesting Features, Interesting Features

elvis editor, Interesting Features

nvi editor, Interesting Features





Internet, vi and, vi and the Internet

invoking vi, Options When Starting vi, Invoking vi on Multiple Files

command-line options, Options When Starting vi

on multiple files, Invoking vi on Multiple Files





isfname option (Vim), Extended Regular Expressions

isident option (Vim), Extended Regular Expressions, Extended Regular Expressions

iskeyword option (Vim), Extended Regular Expressions, Completion by keyword in file

isprint option (Vim), Extended Regular Expressions





J


J (join) command, Joining Two Lines with J, Copying and moving

j (move cursor) command, Single Movements, Movement by Line

joining lines, Joining Two Lines with J

Joy, Bill, Author and History

ju (jump) command,





K


k (move cursor) command, Single Movements, Movement by Line

\k, \K metacharacters, Extended Regular Expressions

keystrokes, remembering with :map, Using the map Command, More Examples of Mapping Keys, Mapping Function Keys

function keys and special keys, Mapping Function Keys

useful examples of, More Examples of Mapping Keys





keyword completion, Categories of Features, Keyword and Dictionary Word Completion, Tag Stacking

keyword display mode (elvis), Syntax Highlighting

kill ring, Making Use of Buffers (see deleting text, buffers for)

kind keyword (ctags), The New tags Format

Kirkendall, Steve, Elvis





L


L (last line) command, Movement Within a Screen

l (move cursor) command, Single Movements, Movement on the current line

\l metacharacter, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings

\L metacharacter, Metacharacters Used in Replacement Strings

-l option, Command-Line Options

-L option, Command-Line Options

l: Vim variable, Variables

:last command (elvis, Vim), Using the Argument List

last line of file, Movement Within a Screen, Line Addressing Symbols

$ symbol for (ex), Line Addressing Symbols

moving to, Movement Within a Screen





LaTeX formatter, The vi Text Editor

left/right scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling

elvis editor, Left-Right Scrolling

nvi editor, Left-Right Scrolling

vile editor, Left-Right Scrolling





leftright option (nvi), Left-Right Scrolling, Left-Right Scrolling

:let command, The exists() Function

line editors, The vi Text Editor, The vi Text Editor

line numbers, Movement Within a Line, Movement by Line Number, Movement by Line Number, Advancing to a Specific Place, ex Commands, Line Addresses, Defining a Range of Lines, Defining a Range of Lines, Line Addressing Symbols, Line Addressing Symbols, Redefining the Current Line Position, Redefining the Current Line Position

displaying, Movement by Line Number, Defining a Range of Lines

in ex commands, ex Commands, Line Addresses, Defining a Range of Lines, Line Addressing Symbols, Line Addressing Symbols, Redefining the Current Line Position, Redefining the Current Line Position

ranges of lines, Defining a Range of Lines, Redefining the Current Line Position

redefining current line, Redefining the Current Line Position

relative addressing, Line Addressing Symbols

symbols for, Line Addressing Symbols





moving by, Movement by Line Number

opening files at specific, Advancing to a Specific Place





line-editing mode, Problems Opening Files

lines, Movement Within a Line, Movement Within a Line, Changing Text, Lines, Lines, Substituting text, Changing Case, Words, Lines, Problems with deletions, Copying Text, Joining Two Lines with J, Review of Basic vi Commands, Movement Within a Screen, Movement by Line, Current Line Searches, Movement by Line Number, Advancing to a Specific Place, ex Commands, Editing with ex, Collecting Lines, The :set Command, More Examples of Mapping Keys, More Examples of Mapping Keys, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Visual Mode

(see also characters; text; words)

case conversions, Changing Case

collecting with :g command, Collecting Lines

deleting by, Lines, Problems with deletions

undoing deletions, Problems with deletions





ex commands for, Editing with ex

joining, Joining Two Lines with J

length limitations, More Examples of Mapping Keys, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data

elvis editor, Arbitrary Length Lines and Binary Data

nvi editor, Arbitrary Length Lines and Binary Data

vile editor, Arbitrary Length Lines and Binary Data





marking with ' (vile), Visual Mode

moving by, Movement Within a Line, Movement by Line

moving to specific, Movement Within a Screen, Movement by Line Number

moving within, Movement Within a Line

opening files at specific, Advancing to a Specific Place

placing C/C++ comments around (example), More Examples of Mapping Keys

printing, ex Commands

replacing (changing), Changing Text, Lines, Lines, Substituting text

searching within, Current Line Searches

to start/end of, Words (see words)

visible on screen, option for, The :set Command

yanking, Copying Text





linewrap option (vile), Left-Right Scrolling

Linux, getting Vim for, Getting Vim for Unix and GNU/Linux, Getting Vim for Windows Environments

:loadview command, Folding and Outlining (Outline Mode)

local .exrc files, Alternate Environments, Initialization

localoptions parameter (sessionoptions option), The mksession Command

long insertions, Repeat, More Examples of Mapping Keys, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data

elvis editor, Arbitrary Length Lines and Binary Data

nvi editor, Arbitrary Length Lines and Binary Data

vile editor, Arbitrary Length Lines and Binary Data





loops in shell scripts, Looping in a Shell Script

lowercase, converting to uppercase, Changing Case, Metacharacters Used in Replacement Strings

lpc, lpcrlf options (elvis), Display Modes

lpcolor option (elvis), Display Modes

lpcolumns option (elvis), Display Modes

lpcontrast option (elvis), Display Modes

lpconvert option (elvis), Display Modes

lpff, lpformfeed options (elvis), Display Modes

lplines option (elvis), Display Modes

lpo, lpout options (elvis), Display Modes

lpopt, lpoptions options (elvis), Display Modes

:lpr command (elvis), Display Modes

lprows option (elvis), Display Modes

lptype option (elvis), Display Modes

lpw, lpwrap options (elvis), Display Modes

:ls command, Buffers and Their Interaction with Windows, Buffer Command Synopsis

buffers, using, Buffer Command Synopsis





M


m (mark place) command, Marking Your Place

M (middle line) command, Movement Within a Screen

:m (move) command (ex), Editing with ex

-m option, Command-Line Options

-M option, Command-Line Options

Mac OS X, installing Vim, Where to Get Vim

macros, Macros

magic option, Some Useful Options

major modes, vile, Major Modes

Make button (elvis), The Toolbar

:make command (elvis), The Toolbar, Edit-Compile Speedup

make program, Compiling and Checking Errors with Vim

makeprg option, Compiling and Checking Errors with Vim, Edit-Compile Speedup

elvis editor, Edit-Compile Speedup





man display mode (elvis), Display Modes, Display Modes

manual folding, Manual Folding, Outlining

manual method, creating folds, Folding and Outlining (Outline Mode)

:map command (ex), The .exrc File, Using the map Command, More Examples of Mapping Keys,

commands in .exrc files, The .exrc File

useful examples of, More Examples of Mapping Keys





maps, Using the map Command, More Examples of Mapping Keys, Mapping Keys for Insert Mode, Mapping Function Keys, @-Functions

function keys and special keys, Mapping Function Keys

for insert mode, Mapping Keys for Insert Mode

named buffer contents as, @-Functions

useful examples of, More Examples of Mapping Keys





margins, Movement Within a Line, Repeat

repeating long insertions, Repeat

setting, Movement Within a Line





marker method, creating folds, Folding and Outlining (Outline Mode)

marking your place, Marking Your Place

marks (vile visual mode), Visual Mode

matching brackets, A Special Search Command

:menu command, Basic menu customization, Toolbars, GUI Options and Command Synopsis

toolbars, Toolbars





menu support for xvile, Adding menus

menus, using gvim, Useful Menus, Menus, Toolbars, More menu customization

customizing, More menu customization





meta-information, Categories of Features

metacharacters, Pattern-Matching Rules, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

extended regular expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

elvis editor, Extended Regular Expressions, Extended Regular Expressions

nvi editor, Extended Regular Expressions, Extended Regular Expressions

vile editor, Extended Regular Expressions, Extended Regular Expressions

Vim editor, Extended Regular Expressions, Extended Regular Expressions





Microsoft Windows, gvim in Microsoft Windows (see MS Windows)

middle line, moving to, Movement Within a Screen

mini-hilite option (vile), Command-Line History and Completion

minus sign, Line Addressing Symbols (see hyphen)

mksession command, The mksession Command

:mkview command, Folding and Outlining (Outline Mode)

mode indicators (vi clones), Mode Indicators

:modeline-format command (vile), Miscellaneous Small Features

modeline option, Editing Binary Files

modes, Modus Operandi

Moolenaar, Bram, Vim (vi Improved): An Introduction, vi Quotes

Morgan, Clark, vile: vi Like Emacs

Mortice Kern Systems, Editing Program Source Code

mouse behavior, Using the Mouse, Useful Menus, Mouse Behavior

elvis editor, Mouse Behavior

gvim, Using the Mouse, Useful Menus





:move command (ex), Editing with ex

:move-next-window-down command (vile), Multiwindow Editing

:move-next-window-up command (vile), Multiwindow Editing

:move-window-left command (vile), Multiwindow Editing

:move-window-right command (vile), Multiwindow Editing

movement commands, Movement Commands

moving, Simple Edits, Moving Text, Making Use of Buffers, Editing with ex, Invoking vi on Multiple Files, Block Move by Patterns, Switching Items in a Textual Database

among multiple files, Invoking vi on Multiple Files

lines, Editing with ex

switching database items (example), Switching Items in a Textual Database

text (delete-and-put), Simple Edits, Moving Text, Making Use of Buffers

numbered deletion/yank buffers, Moving Text, Making Use of Buffers





text blocks by patterns, Block Move by Patterns





moving the cursor, Moving the Cursor, Movement by Text Blocks, Movement Within a Screen, Movement by Text Blocks, Movement by Searches, Movement by Line Number, Review of vi Motion Commands, Advancing to a Specific Place, Marking Your Place, Setting the cursor position and mouse motions

commands for, Review of vi Motion Commands

to marks, Marking Your Place

opening files at specific place, Advancing to a Specific Place

by searching for patterns, Movement by Searches, Movement by Line Number

by text blocks, Movement by Text Blocks, Movement by Text Blocks

xvile interface, Setting the cursor position and mouse motions





MS Windows, using gvim, Graphical Vim (gvim), gvim in Microsoft Windows

mugs with vi logo, vi for Java Lovers

multiwindow editing, Multiwindow Editing, Multiwindow Editing, Multiple Windows in Vim, Summary, Initiating Multiwindow Editing, Opening Windows, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing

elvis editor, Multiwindow Editing, Multiwindow Editing

initiation, Initiating Multiwindow Editing, Opening Windows

nvi editor, Multiwindow Editing, Multiwindow Editing

vile editor, Multiwindow Editing, Multiwindow Editing

Vim editor, Multiple Windows in Vim, Summary





N


:n (next file) command (ex), Invoking vi on Multiple Files

n (search again) command, Repeating Searches, Confirming Substitutions

N (search again) command, Repeating Searches

n flag (mouse option), Using the Mouse

\n metacharacter, Extended Regular Expressions

-N option, Important Command-Line Arguments, Command-Line Options

vile editor, Important Command-Line Arguments





-n option, Command-Line Options

named buffers, Copying Text, Yanking to Named Buffers, Edits Between Files, @-Functions, Interesting Features

arbitrarily naming (nvi), Interesting Features

executing contents of, @-Functions





nested folds, Folding and Outlining (Outline Mode)

:new command, Options During Splits, Multiwindow Editing, Window Commands (Vim),

elvis, Multiwindow Editing





“[new file]” message, Problems Opening Files

newline characters, Movement Within a Line, Arbitrary Length Lines and Binary Data

NEXINIT environment variable, Initialization

.nexrc file (nvi), Initialization

:Next command (nvi), Multiwindow Editing

:next-tag command (vile), Tag Stacks

:next-window command (vile), Multiwindow Editing

:no (:normal) command (elvis), Display Modes, Display Modes

“No Toolkit” vile interface, GUI Interfaces

“No write since last change” message, Problems Opening Files, Saving and Exiting Files

noexpandtab option, Editing Binary Files

noh command,

noignorecase option, Some Useful Options

nolinewrap option (vile), Left-Right Scrolling

nomagic option, Some Useful Options

non-ASCII characters, Digraphs: Non-ASCII Characters

“Non-ascii file” message, Problems Opening Files

nonu (nonumber) option, Defining a Range of Lines

--noplugin option, Command-Line Options

:normal (:no) command (elvis), Display Modes, Display Modes

normal display mode (elvis), Display Modes

normal mode (gvim), Using the Mouse

“Not a typewriter” message, Problems Opening Files

notagstack option (elvis), Tag Stacks

nowrap option, What’s My Line (Size)?, Left-Right Scrolling

elvis editor, Left-Right Scrolling





nowrapscan option, Repeating Searches, Some Useful Options

nroff formatting package, The vi Text Editor

nu option, Movement Within a Line, Movement by Line Number,

num command, Changing and deleting text

numbered deletions/yanks buffers, Moving Text, Making Use of Buffers

numbers for lines, Movement Within a Line (see line numbers)

numeric arguments for commands, Numeric Arguments, Numeric Arguments for Insert Commands

nvi (vi clone), Word Abbreviation, Extended Regular Expressions, Arbitrary Length Lines and Binary Data, Infinite Undo, Left-Right Scrolling, Mode Indicators, Editor Comparison Summary, nvi: New vi, Sources and Supported Operating Systems, Important Command-Line Arguments, Important Command-Line Arguments, Online Help and Other Documentation, Initialization, Multiwindow Editing, Multiwindow Editing, Extended Regular Expressions, Extended Regular Expressions, Improvements for Editing, Left-Right Scrolling, Tag Stacks, Tag Stacks, Interesting Features, Sources and Supported Operating Systems, nvi 1.79 Options

documentation and online help, Online Help and Other Documentation

extended regular expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

feature summary, Editor Comparison Summary

important command-line arguments, Important Command-Line Arguments, Important Command-Line Arguments

improvements over vi, Improvements for Editing, Left-Right Scrolling

infinite undo facility, Infinite Undo

initialization of, Initialization

interesting features, Interesting Features

line length, Arbitrary Length Lines and Binary Data

mode indicators, Mode Indicators

multiwindow editing, Multiwindow Editing, Multiwindow Editing

obtaining source code, Sources and Supported Operating Systems

set command options (list), nvi 1.79 Options

sideways scrolling, Left-Right Scrolling

tag stacks, Tag Stacks, Tag Stacks

word abbreviations, Word Abbreviation





O


o (open line) command, More Ways to Insert Text, Insert Commands

O (open line) command, More Ways to Insert Text, Insert Commands

-o option, Important Command-Line Arguments, Command-Line Options

elvis editor, Important Command-Line Arguments





-O option, Command-Line Options

obtaining source code, Sources and Supported Operating Systems, Sources and Supported Operating Systems, Sources and Supported Operating Systems

elvis editor, Sources and Supported Operating Systems

nvi editor, Sources and Supported Operating Systems

vile editor, Sources and Supported Operating Systems





“one line” command, Manual Folding

online help, Online Help and Other Documentation, Online Help and Other Documentation, Online Help and Other Documentation, Online vi Tutorial

elvis editor, Online Help and Other Documentation

nvi editor, Online Help and Other Documentation

vi tutorial, Online vi Tutorial

vile editor, Online Help and Other Documentation





“[open mode]” message, Problems Opening Files

open mode (elvis), Interesting Features

opening files, Advancing to a Specific Place, Read-Only Mode, Invoking vi on Multiple Files, Calling in New Files, Switching Files from vi

multiple files at once, Invoking vi on Multiple Files, Calling in New Files

previous file, Switching Files from vi

read-only mode, Read-Only Mode

at specific place, Advancing to a Specific Place





options parameter (sessionoptions option), The mksession Command

options, set command, The :set Command, The :set Command, Setting Options

(see also :set command)

list, Setting Options

viewing current, The :set Command





options, vi command, Options When Starting vi

other display mode (elvis), Syntax Highlighting

outline mode, Folding and Outlining (Outline Mode), Auto and Smart Indenting, Outlining

output (Unix), reading into files, Executing Unix Commands

overstrike mode, Substituting text





P


:p (print) command (ex), ex Commands,

p (put) command, Simple Edits, Problems with deletions, Moving Text, Copying Text, Yanking to Named Buffers, Edits Between Files

with named buffers, Copying Text, Yanking to Named Buffers, Edits Between Files





P (put) command, Moving Text, Copying Text, Yanking to Named Buffers, Edits Between Files

with named buffers, Copying Text, Yanking to Named Buffers, Edits Between Files





:p (put) command (ex), Edits Between Files

\p, \P metacharacters, Extended Regular Expressions, Extended Regular Expressions

PAGE UP, PAGE DOWN keys, mapping, Mapping Other Special Keys

pana values (lptype option), Display Modes

paragraphs, Movement by Text Blocks, Movement by Text Blocks

delimiters for, Movement by Text Blocks

moving by, Movement by Text Blocks





parentheses (), Movement by Text Blocks, Movement by Text Blocks, Metacharacters Used in Search Patterns, More Examples of Mapping Keys, A Special Search Command, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

( (move cursor) command, Movement by Text Blocks

) (move cursor) command, Movement by Text Blocks

\(...\) metacharacters, Metacharacters Used in Search Patterns, Extended Regular Expressions, Extended Regular Expressions

finding and removing, More Examples of Mapping Keys

as grouping metacharacter, Extended Regular Expressions, Extended Regular Expressions

matching, A Special Search Command





parts of files, saving, Saving Part of a File

:paste-to-clipboard command (xvile), Clipboard

PATH environment variable, installing Vim, Where to Get Vim

“Pattern not found” message, Movement by Searches

pattern searching, Movement by Searches, Movement by Searches, Repeating Searches, Changing through searching, Current Line Searches, Advancing to a Specific Place, Search Patterns, Global Searches, Pattern-Matching Rules, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples, The :set Command, Some Useful Options, A Special Search Command, Incremental Searching, Incremental Searching, Incremental Searching

configuration options for, Some Useful Options

ex commands for, Search Patterns, Global Searches

global pattern-matching rules, Pattern-Matching Rules, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples

examples, Pattern-Matching Examples

replacement-string metacharacters, Metacharacters Used in Replacement Strings

search-pattern metacharacters, Metacharacters Used in Search Patterns

substitution tricks, More Substitution Tricks





incremental searching (vi clones), Incremental Searching, Incremental Searching, Incremental Searching

nvi editor, Incremental Searching

vile editor, Incremental Searching





making case-insensitive, The :set Command

matching brackets, A Special Search Command

opening files at specific place, Advancing to a Specific Place

replacing text and, Changing through searching (see replacing text)

within lines, Current Line Searches

wrapping searches, Movement by Searches, Repeating Searches





percent sign (%), Line Addressing Symbols, Calling in New Files, Global Replacement, A Special Search Command, Categories of Features, Buffers and Their Interaction with Windows

buffers, describing, Buffers and Their Interaction with Windows

for current filename, Calling in New Files

every line symbol (ex), Global Replacement

matching brackets, A Special Search Command

meta-information, extracting, Categories of Features

representing every line (ex), Line Addressing Symbols





period (.), Repeat, Line Addressing Symbols, Confirming Substitutions, Metacharacters Used in Search Patterns, Categories of Features (see dot)

current line symbol (ex), Line Addressing Symbols

metacharacter, Metacharacters Used in Search Patterns

repeat command, Repeat, Confirming Substitutions





“Permission denied” message, Problems Opening Files, Problems Saving Files

pin-tagstack option (vile), Tag Stacks

pipe (|), Buffer Commands (see vertical bar)

piping into vile, Miscellaneous Small Features

place marking, Marking Your Place

plug-ins for Vim, Categories of Features

plus sign (+), Single Movements, Movement by Line, Movement by Line, Advancing to a Specific Place, Line Addressing Symbols, Extended Regular Expressions, Extended Regular Expressions, Buffers and Their Interaction with Windows, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Command-Line Options

\+ metacharacter, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

buffers, describing, Buffers and Their Interaction with Windows

metacharacter, Extended Regular Expressions, Extended Regular Expressions

move cursor command, Single Movements, Movement by Line, Movement by Line

for next file lines (ex), Line Addressing Symbols

running commands when starting vi, Advancing to a Specific Place





:po command (Solaris vi), Solaris vi

:pop (:po) command, Tag Stacks, Tag Stacks

elvis editor, Tag Stacks

vile editor, Tag Stacks





:position-window command (vile), Multiwindow Editing

POSIX standards, Compare and Contrast with vi

post-read, post-write files (elvis), Initialization Steps, Pre- and Post-Operation Control Files

postprocessing (Vim), Categories of Features

pound sign (#), Defining a Range of Lines, Calling in New Files, Categories of Features, Buffers and Their Interaction with Windows

for alternate filename, Calling in New Files

buffers, describing, Buffers and Their Interaction with Windows

meta-information, extracting, Categories of Features

show line numbers command, Defining a Range of Lines





:pre command, Problems Saving Files, Recovering a Buffer,

ex, Problems Saving Files, Recovering a Buffer





pre-read, pre-write files (elvis), Initialization Steps, Pre- and Post-Operation Control Files

prep display mode (elvis), Syntax Highlighting

prev command,

:Previous command (nvi), Multiwindow Editing

previous file, switching to, Switching Files from vi

:previous-window command (vile), Multiwindow Editing

printing, ex Commands, Display Modes

elvis print management, Display Modes

lines, ex Commands





procedure language, vile, The Procedure Language

programming assistance, Editing Program Source Code, Indentation Control, A Special Search Command, Using Tags, Enhanced Tags, Exuberant ctags and Vim, Programming Assistance, Syntax Highlighting, Edit-Compile Speedup, Syntax Highlighting, Categories of Features, Vim Enhancements for Programmers, Some Final Thoughts on Vim for Writing Programs, Programming Assistance, Syntax Highlighting, Edit-Compile Speedup, Syntax Highlighting, Display Modes, Display Modes, Programming Assistance, Syntax Highlighting, Edit-Compile Speedup, Syntax Highlighting

edit-compile speedup, Edit-Compile Speedup, Edit-Compile Speedup, Edit-Compile Speedup

elvis editor, Edit-Compile Speedup

vile editor, Edit-Compile Speedup





elvis editor, Programming Assistance, Syntax Highlighting

source code editing, Editing Program Source Code, Indentation Control, A Special Search Command, Using Tags

indentation control, Indentation Control

matching brackets, A Special Search Command

using tags, Using Tags





syntax highlighting, Syntax Highlighting, Syntax Highlighting, Display Modes, Display Modes, Syntax Highlighting

elvis display modes, Syntax Highlighting, Display Modes, Display Modes

vile editor, Syntax Highlighting





using tags, Enhanced Tags, Exuberant ctags and Vim

vile editor, Programming Assistance, Syntax Highlighting

Vim editor, Categories of Features





prompt line, Opening a File

ps, ps2 values (lptype option), Display Modes

:pu (put) command,

putting text, Simple Edits, Moving Text, Copying Text, Copying Text, Yanking to Named Buffers, Edits Between Files

deleting and (cut-and-paste), Moving Text

from named buffers, Copying Text, Yanking to Named Buffers, Edits Between Files

yanking and (copy-and-paste), Copying Text





Q


:q (quit) command (ex), Saving and Quitting a File, Saving and Exiting Files, Saving and Exiting Files

:q! command, Saving and Exiting Files





Q command, Problem Checklist

:q (quoted motion) command (vile), Visual Mode

:q! command, Problems Opening Files, Quitting Without Saving Edits, Command-Line Options

quitting, Problems Opening Files





qa command,

:qall command (elvis), Multiwindow Editing

question mark (?), The vi Text Editor, Movement by Searches, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

\? metacharacter, Extended Regular Expressions, Extended Regular Expressions

metacharacter, Extended Regular Expressions, Extended Regular Expressions

search command, The vi Text Editor, Movement by Searches





quickfix buffer, Vim’s Special Buffers

Quickfix List window, Compiling and Checking Errors with Vim

quipty option, GUI Options and Command Synopsis

Quit button (elvis), The Toolbar

:quit command, Closing and Quitting Windows

quitting vi, Saving and Exiting Files

XXX_DQUOTE (yank from buffer) command, Recovering Deletions, Yanking to Named Buffers

quote (XXX_DQUOTE) command, Recovering Deletions, Yanking to Named Buffers

quoted motion (q) command (vile), Visual Mode

quotes about vi, vi Quotes





R


:r (read) command (ex), Copying a File into Another File,

r (replace character) command, Characters, Numeric Arguments for Insert Commands

R (replace character) command, Substituting text, More Ways to Insert Text, Insert Commands

\r metacharacter, Extended Regular Expressions

-R option, Read-Only Mode, Recovering a Buffer, Important Command-Line Arguments, Command-Line Options

vile editor, Important Command-Line Arguments





-r option, Recovering a Buffer, Important Command-Line Arguments, Important Command-Line Arguments

elvis editor, Important Command-Line Arguments

nvi editor, Important Command-Line Arguments





range of lines, Defining a Range of Lines, Redefining the Current Line Position

rcp (remote copy), Editing Files in Other Places

:read command (ex), Copying a File into Another File, Executing Unix Commands

reading Unix command output, Executing Unix Commands





read-hook option (vile), The Procedure Language

“Read Only” files, Problems Opening Files

“[Read only]” message, Problems Opening Files

read-only mode, Read-Only Mode

read-only registers (Vim), Categories of Features

rec command,

recovering deletions, Problems with deletions, Recovering Deletions

recovering the buffer, Recovering a Buffer

red command,

redrawing screen, Redrawing the Screen

reformatting text (vile), Miscellaneous Small Features

regular expressions, Pattern-Matching Rules, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

elvis editor, Extended Regular Expressions, Extended Regular Expressions

metacharacters, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks

in replacement strings, Metacharacters Used in Replacement Strings

in search patterns, Metacharacters Used in Search Patterns

substitution tricks, More Substitution Tricks





nvi editor, Extended Regular Expressions, Extended Regular Expressions

pattern-matching examples, Pattern-Matching Examples

vile editor, Extended Regular Expressions, Extended Regular Expressions

Vim editor, Extended Regular Expressions, Extended Regular Expressions





relative line addressing (ex), Line Addressing Symbols

relative pathnames, Opening a File

renaming buffer (ex), Renaming the Buffer

repeating commands, Repeat, Repeat, Repeating Searches, Current Line Searches, Recovering Deletions, More Substitution Tricks, Using :g to Repeat a Command

:g command for (example), Using :g to Repeat a Command

global substitutions, More Substitution Tricks

pattern searches, Repeating Searches, Current Line Searches

searching numbered buffers, Recovering Deletions





replacing text, Simple Edits, Changing Text, Words, Words, Lines, Lines, Characters, Substituting text, Changing through searching, Global Replacement, Confirming Substitutions, Context-Sensitive Replacement, Metacharacters Used in Replacement Strings, More Substitution Tricks

by characters, Characters

globally, Global Replacement, Confirming Substitutions, Context-Sensitive Replacement, Metacharacters Used in Replacement Strings, More Substitution Tricks

confirming substitutions, Confirming Substitutions

context sensitivity, Context-Sensitive Replacement

replacement-string metacharacters, Metacharacters Used in Replacement Strings

substitution tricks, More Substitution Tricks





by lines, Lines, Lines, Substituting text

searching and, Changing through searching

by words, Words, Words





repositioning screen, Repositioning the Screen with z

res command,

:resize command, Window Resize Commands, Multiwindow Editing

nvi, Multiwindow Editing





resize parameter (sessionoptions option), The mksession Command

:resize-window command (vile), Multiwindow Editing

:restore-window command (vile), Multiwindow Editing

:reverse-incremental-search command (vile), Incremental Searching

rew command,

:rew, :rewind commands (ex), Using the Argument List

right margin, setting, Movement Within a Line

right/left scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling

elvis editor, Left-Right Scrolling

nvi editor, Left-Right Scrolling

vile editor, Left-Right Scrolling





rm command (Unix), Problems Saving Files

ruler option, Mode Indicators





S


s (substitute) command, Substituting text, More Ways to Insert Text, Numeric Arguments for Insert Commands, Insert Commands

S (substitute) command, Substituting text, More Ways to Insert Text, Numeric Arguments for Insert Commands, Insert Commands

s (substitute) command (ex), ex Commands, Global Replacement, Global Replacement, Context-Sensitive Replacement, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples, The vile Editing Model

context-sensitive replacement, Context-Sensitive Replacement

pattern-matching examples, Pattern-Matching Examples

replacement-string metacharacters, Metacharacters Used in Replacement Strings

search-pattern metacharacters, Metacharacters Used in Search Patterns

substitution tricks, More Substitution Tricks

vile editor, The vile Editing Model





-s option, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Command-Line Options

elvis editor, Important Command-Line Arguments, Important Command-Line Arguments

nvi editor, Important Command-Line Arguments, Important Command-Line Arguments

vile editor, Important Command-Line Arguments





-S option, Command-Line Options

-SS option (elvis), Important Command-Line Arguments

\s, \S metacharacters, Extended Regular Expressions, Extended Regular Expressions

s: Vim variable, Variables

:safely command (elvis), Interesting Features

:sall (:sa) command (elvis), Multiwindow Editing

sam editor, The vi Text Editor

:save-window command (vile), Multiwindow Editing

saving commands, Saving Commands

saving edits, Saving and Quitting a File, Recovering a Buffer, Saving and Exiting Files, Saving Part of a File, Appending to a Saved File, More Examples of Mapping Keys, Saving and Exiting

appending to saved files, Appending to a Saved File

iterating through list of files, More Examples of Mapping Keys

preserving the buffer, Recovering a Buffer

saving parts of files, Saving Part of a File





sb command,

:sbfirst command, Buffer Command Synopsis

:sbmod command, Buffer Command Synopsis

sbn command,

:sbnext command, Buffer Command Synopsis

:sbNext command, Buffer Command Synopsis

:sbprevious command, Buffer Command Synopsis

:sbuffer command, Buffer Command Synopsis

scope keyword (ctags), The New tags Format

scp (secure remote copy over SSH), Editing Files in Other Places

scratch buffer, Vim’s Special Buffers

screen editors, The vi Text Editor

screens, Movement by Screens, Repositioning the Screen with z, Redrawing the Screen, Movement Within a Screen, The :set Command, Multiwindow Editing, Multiwindow Editing, Left-Right Scrolling, Multiwindow Editing, Multiwindow Editing, Left-Right Scrolling, Multiwindow Editing, Multiwindow Editing, Left-Right Scrolling, Multiwindow Editing, Multiwindow Editing, Left-Right Scrolling

left/right scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling

elvis editor, Left-Right Scrolling

nvi editor, Left-Right Scrolling

vile editor, Left-Right Scrolling





moving cursor, Movement Within a Screen (see moving the cursor)

multiwindow editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing, Multiwindow Editing

elvis editor, Multiwindow Editing, Multiwindow Editing

nvi editor, Multiwindow Editing, Multiwindow Editing

vile editor, Multiwindow Editing, Multiwindow Editing





redrawing, Redrawing the Screen

repositioning, Repositioning the Screen with z

scrolling, Movement by Screens

setting number of lines shown, The :set Command





scripting for Vim, Categories of Features

scripts, Using ex Scripts, Vim Scripts, Resources

ex, Using ex Scripts

Vim, Vim Scripts, Resources





:scroll-next-window-down command (vile), Multiwindow Editing

:scroll-next-window-up command (vile), Multiwindow Editing

scrollbars, Scrollbars, Scrollbars, Scrollbars

gvim, Scrollbars

xvile, Scrollbars





scrolling, Movement by Screens, Repositioning the Screen with z

without moving cursor, Repositioning the Screen with z





scrolling right/left, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling

elvis editor, Left-Right Scrolling

nvi editor, Left-Right Scrolling

vile editor, Left-Right Scrolling





se command,

searchincr option (nvi), Incremental Searching, Incremental Searching, Incremental Searching

searching, Pattern-Matching Rules, Search for General Class of Words

for class of words, Search for General Class of Words

metacharacters for, Pattern-Matching Rules





searching for patterns, Movement by Searches, Movement by Searches, Repeating Searches, Changing through searching, Current Line Searches, Advancing to a Specific Place, Search Patterns, Global Searches, Pattern-Matching Rules, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples, The :set Command, Some Useful Options, A Special Search Command, Incremental Searching, Incremental Searching, Incremental Searching

configuration options for, Some Useful Options

ex commands for, Search Patterns, Global Searches

global pattern-matching rules, Pattern-Matching Rules, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples

examples, Pattern-Matching Examples

replacement-string metacharacters, Metacharacters Used in Replacement Strings

search-pattern metacharacters, Metacharacters Used in Search Patterns

substitution tricks, More Substitution Tricks





incremental searching (vi clones), Incremental Searching, Incremental Searching, Incremental Searching

nvi editor, Incremental Searching

vile editor, Incremental Searching





making case-insensitive, The :set Command

matching brackets, A Special Search Command

opening files at specific place, Advancing to a Specific Place

replacing text and, Changing through searching (see replacing text)

within lines, Current Line Searches

wrapping searches, Movement by Searches, Repeating Searches





searching numbered buffers, Recovering Deletions

sections, moving by, Movement by Text Blocks

security, elvis, Interesting Features

sed stream editor, Beyond ex

select mode (gvim), Using the Mouse

selecting text with xvile, Selections

semicolon (;), Current Line Searches, Redefining the Current Line Position

for line ranges (ex), Redefining the Current Line Position

repeat search command, Current Line Searches





sentences, Movement by Text Blocks, Movement by Text Blocks

delimiters for, Movement by Text Blocks

moving by, Movement by Text Blocks





sesdir parameter (sessionoptions option), The mksession Command

session context for Vim, Categories of Features

session files, elvis, The Session File

sessionoptions option, The mksession Command

sessions (Vim), Multiple Windows in Vim

:set command, Customizing vi, The :set Command, The .exrc File, Categories of Features, Using the Mouse, The :set Command, Setting Options

commands in .exrc files, The .exrc File

ex, Customizing vi, The :set Command, Setting Options

list of options for, Setting Options

viewing current options, The :set Command





mouse options and, Using the Mouse





:set-window command (vile), Multiwindow Editing

:sfind command, Options During Splits

sftp (secure FTP), Editing Files in Other Places

:sh (create shell) command (ex), Executing Unix Commands

:sh command (ex), Problems Saving Files,

shell, Unix, Executing Unix Commands

shiftwidth, using outline modes, Outlining

shmode mode (vile; example), Major Modes

:show-history command (vile), Command-Line History and Completion

:show-tagstack command (vile), Tag Stacks

:show-commands command (vile), Online Help and Other Documentation

showmode option, Mode Indicators

:shrink-window command (vile), Multiwindow Editing

sidescroll option (nvi), Left-Right Scrolling

sidescroll value, Left-Right Scrolling, Left-Right Scrolling

sidescrolloff option, What’s My Line (Size)?

sideways scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling, Left-Right Scrolling

elvis editor, Left-Right Scrolling

nvi editor, Left-Right Scrolling

vile editor, Left-Right Scrolling





slash (/), The vi Text Editor, Opening a File, Movement by Searches, Advancing to a Specific Place, Visual Mode

pathname separator, Opening a File

referring to marks (vile), Visual Mode

search command, The vi Text Editor, Movement by Searches, Advancing to a Specific Place

opening files at specific place, Advancing to a Specific Place





slash parameter (sessionoptions option), The mksession Command

:slast (:sl) command (elvis), Multiwindow Editing

smart indenting, Auto and Smart Indenting, Keyword and Dictionary Word Completion

smartindent method, Auto and Smart Indenting

sn command,

:snew (:sne) command (elvis), Multiwindow Editing

:sNext (:sN) command (elvis), Multiwindow Editing, Multiwindow Editing

:so command (ex), Alternate Environments

Solaris vi, Word Abbreviation, Using Tags, Solaris vi, Exuberant ctags and Vim, Solaris vi Options

set command options (list), Solaris vi Options

tag stacks, Using Tags, Solaris vi, Exuberant ctags and Vim

word abbreviations, Word Abbreviation





sort command (Unix), Executing Unix Commands

sorting, Sorting Text Blocks: A Sample ex Script

text blocks (example), Sorting Text Blocks: A Sample ex Script





source code editing, Editing Program Source Code, Indentation Control, A Special Search Command, Using Tags, Enhanced Tags, Exuberant ctags and Vim

indentation control, Indentation Control

matching brackets, A Special Search Command

using tags, Using Tags, Enhanced Tags, Exuberant ctags and Vim





sourced, finding startup files, Starting gvim

sp command,

spaces, Opening a File (see whitespace)

special buffers, Vim’s Special Buffers

spellchecking, The vi Text Editor

Split button (elvis), The Toolbar

:split command, Multiwindow Editing Inside Vim, New Windows, Buffers and Their Interaction with Windows, Multiwindow Editing, Multiwindow Editing

buffers, using, Buffers and Their Interaction with Windows

elvis, Multiwindow Editing

opening new windows, New Windows

vile, Multiwindow Editing





:split-current-window command (vile), Multiwindow Editing, Multiwindow Editing

split windows, Initiating Multiwindow Editing (see multiwindow editing)

spr command,

:srewind (:sre) command (elvis), Multiwindow Editing

st command,

:stack (:stac) command (elvis), Tag Stacks

stacks, tags, Using Tags, Tag Stacks, Exuberant ctags and Vim, Solaris vi, Exuberant ctags and Vim, Tag Stacks, Tag Stacks, Tag Stacks, Tag Stacks

elvis editor, Tag Stacks

nvi editor, Tag Stacks, Tag Stacks

Solaris vi, Using Tags, Solaris vi, Exuberant ctags and Vim

vile editor, Tag Stacks





:stag (:sta) command (elvis), Multiwindow Editing

:stag[!] tag, Playing Tag with Windows

starting vi, Options When Starting vi (see invoking vi)

state transitions for Vim, Categories of Features

status line, Opening a File (see prompt line)

status-line commands, Status-Line Commands

statusline option, A Nice Vim Piggybacking Trick

stevie editor, Author and History, Author and History

stopshell option (elvis), Options

strftime() function, Using the strftime() function

string display mode (elvis), Syntax Highlighting

struct keyword (ctags), The New tags Format

sts command, Tag Stacking

stty command, A Brief Historical Perspective

su command,

substitute (:s) command (ex), ex Commands, Global Replacement, Global Replacement, Context-Sensitive Replacement, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Pattern-Matching Examples, The vile Editing Model

context-sensitive replacement, Context-Sensitive Replacement

pattern-matching examples, Pattern-Matching Examples

replacement-string metacharacters, Metacharacters Used in Replacement Strings

search-pattern metacharacters, Metacharacters Used in Search Patterns

substitution tricks, More Substitution Tricks

vile editor, The vile Editing Model





substituting text, Substituting text (see changing text)

:sunhide command, Buffer Command Synopsis

sv command,

:sview command, Options During Splits

switching database items (example), Switching Items in a Textual Database

switching words (example), Using the map Command, More Examples of Mapping Keys

:syntax command, Getting Started

syntax display mode (elvis), Display Modes

syntax extensions for Vim, Categories of Features

syntax files, Overriding syntax files

syntax folding method, A Few Words About the Other Fold Methods

syntax highlighting, Syntax Highlighting, Syntax Highlighting, Compiling and Checking Errors with Vim, Customization, Syntax Highlighting, Display Modes, Display Modes, Syntax Highlighting

customizing, Customization

elvis display modes, Syntax Highlighting, Display Modes, Display Modes

vile editor, Syntax Highlighting





syntax method, creating folds, Folding and Outlining (Outline Mode)

system failure, recovering after, Recovering a Buffer





T


:t (copy) command (ex), Editing with ex

t (search line) command, Current Line Searches

T (search line) command, Current Line Searches

^T command, Tag Stacking

\t metacharacter, Extended Regular Expressions

-t option, Important Command-Line Arguments, Important Command-Line Arguments, Important Command-Line Arguments, Command-Line Options

elvis editor, Important Command-Line Arguments

nvi editor, Important Command-Line Arguments

vile editor, Important Command-Line Arguments





-T option, Command-Line Options

t: Vim variable, Variables

:Ta, Tag commands (nvi), Multiwindow Editing, Tag Stacks

ta, tag commands (nvi), Tag Stacks

:ta, tag commands (Solaris vi), Solaris vi

<TAB>, using menu entries, Basic menu customization

:tabclose command, Tabbed Editing

:tabnew command, Tabbed Editing

:tabonly command, Tabbed Editing

tabpages parameter (sessionoptions option), The mksession Command

tabs, editing, Tabbed Editing

:tag (:ta) command, Tag Stacks, Tag Stacks

elvis editor, Tag Stacks

vile editor, Tag Stacks





:tag command, Tag Stacks, Exuberant ctags and Vim, Tag Stacks

:tag command (ex), Using Tags

tag stacks, Using Tags, Tag Stacks, Exuberant ctags and Vim, Solaris vi, Exuberant ctags and Vim, Tag Stacking, Syntax Highlighting, Tag Stacks, Tag Stacks, Tag Stacks, Tag Stacks

elvis editor, Tag Stacks

nvi editor, Tag Stacks, Tag Stacks

Solaris vi, Using Tags, Solaris vi, Exuberant ctags and Vim

vile editor, Tag Stacks





tag windowing commands, Playing Tag with Windows

tagignorecase option (vile), Tag Stacks

taglength option, Solaris vi, Tag Stacks, Tag Stacks, Tag Stacks

elvis editor, Tag Stacks

Solaris vi, Solaris vi

vile editor, Tag Stacks





:tagp, tagpop commands (nvi), Tag Stacks

tagpath option, Solaris vi, Tag Stacks

elvis editor, Tag Stacks

Solaris vi, Solaris vi





tagprg option (elvis), Tag Stacks

tagrelative option (vile), Tag Stacks

:tags command (Solaris vi), Exuberant ctags and Vim

tags file format, The New tags Format, The New tags Format, Tag Stacks

tags option, Solaris vi, Tag Stacks, Tag Stacks, Tag Stacks

elvis editor, Tag Stacks

nvi editor, Tag Stacks

Solaris vi, Solaris vi

vile editor, Tag Stacks





tagstack option, Solaris vi, Tag Stacks

elvis editor, Tag Stacks

Solaris vi, Solaris vi





:tagt, tagtop commands (nvi), Tag Stacks

tagword option (vile), Tag Stacks

TERM environment variable, A Brief Historical Perspective, Problems Opening Files, Problems Opening Files

opening files and, Problems Opening Files





termcap entries, Problems Opening Files, Customizing vi

“Termcap entry too long” message, Problems Opening Files

termcap library, A Brief Historical Perspective

terminal type, Problems Opening Files

terminfo entries, Problems Opening Files, Customizing vi

terminfo library, A Brief Historical Perspective

tex display mode (elvis), Display Modes, Display Modes

Tex formatter, The vi Text Editor

text, Modus Operandi, vi Commands, vi Commands, Simple Edits, Simple Edits, Simple Edits, Simple Edits, Simple Edits, Appending Text, Changing Text, Changing Case, Deleting Text, Words, Lines, Characters, Problems with deletions, Moving Text, Moving Text, Transposing two letters, Copying Text, Copying Text, Repeat, More Ways to Insert Text, Review of Basic vi Commands, Movement by Searches, Changing through searching, Current Line Searches, Making Use of Buffers, Recovering Deletions, Yanking to Named Buffers, Search Patterns, Edits Between Files, Global Replacement, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings, Switching Items in a Textual Database, Filtering Text Through a Command, More Examples of Mapping Keys, More Examples of Mapping Keys, Indentation Control, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Miscellaneous Small Features

(see also characters; lines; words)

case conversions, Changing Case, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings

copying (yank-and-put), Simple Edits, Copying Text

deleting, vi Commands, Simple Edits, Deleting Text, Words, Lines, Characters, Problems with deletions, Moving Text, Copying Text, Current Line Searches, Making Use of Buffers, Recovering Deletions, Yanking to Named Buffers, Search Patterns, Edits Between Files

by characters, vi Commands, Characters

with ex editor, Search Patterns

by lines, Lines

named buffers for, Copying Text, Yanking to Named Buffers, Edits Between Files

numbered buffers for, Moving Text, Making Use of Buffers

recovering deletions, Recovering Deletions

undoing deletions, Problems with deletions

by words, Words





filtering through Unix commands, Filtering Text Through a Command

finding and deleting parentheses, More Examples of Mapping Keys

indentation control, Indentation Control

inserting, Modus Operandi, vi Commands, Simple Edits, Appending Text, Repeat, More Ways to Insert Text, More Examples of Mapping Keys, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data

a (append) command, Simple Edits, Appending Text

handling long insertions, Repeat, More Examples of Mapping Keys, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data, Arbitrary Length Lines and Binary Data

in insert mode, Modus Operandi, vi Commands





moving, Moving Text, Switching Items in a Textual Database

switching database items (example), Switching Items in a Textual Database





moving (delete-and-put), Simple Edits

reformatting (vile), Miscellaneous Small Features

replacing (changing), Simple Edits, Changing Text, Changing through searching, Global Replacement

globally, Global Replacement





searching for, Movement by Searches (see pattern searching)

transposing characters, Transposing two letters





text blocks, Defining a Range of Lines, Redefining the Current Line Position, Saving Part of a File, Block Move by Patterns, Filtering Text Through a Command, Sorting Text Blocks: A Sample ex Script

filtering through Unix commands, Filtering Text Through a Command

moving by patterns, Block Move by Patterns

range of lines (ex), Defining a Range of Lines, Redefining the Current Line Position

saving parts of files, Saving Part of a File

sorting (example), Sorting Text Blocks: A Sample ex Script





text blocks, moving by, Movement by Text Blocks, Movement by Text Blocks

text editors, The vi Text Editor

textwidth option, Editing Binary Files

thesaurus option, Completion by thesaurus

tilde (~), Opening a File, Changing Case, Metacharacters Used in Search Patterns, Metacharacters Used in Replacement Strings, More Substitution Tricks, Extended Regular Expressions, Manual Folding

:~ (substitute using last search pattern) command (ex), More Substitution Tricks

along left screen margin, Opening a File

case conversion command, Changing Case

folding, Manual Folding

as last replacement text, Metacharacters Used in Search Patterns

metacharacter, Metacharacters Used in Replacement Strings, Extended Regular Expressions





tl (taglength) option, Solaris vi, Tag Stacks

elvis editor, Tag Stacks

Solaris vi, Solaris vi





/tmp (special filename, nvi), Interesting Features

:toggle-buffer-list command (vile), Multiwindow Editing

toggle options (ex), setting, The :set Command

TOhtml command, HTML Your Text

toolbar option, GUI Options and Command Synopsis

toolbar, elvis, The Toolbar

toolbars, Toolbars

tools, programming, Vim Enhancements for Programmers, Some Final Thoughts on Vim for Writing Programs

:topleft command, Conditional Split Commands

transitions (state) for Vim, Categories of Features

transparent edition, Categories of Features

transposing characters, Transposing two letters

transposing words, Transposing two letters

transposing words (example), Using the map Command, More Examples of Mapping Keys

troff, The vi Text Editor, A Complex Mapping Example, More Examples of Mapping Keys, Sorting Text Blocks: A Sample ex Script

alphabetizing glossary (example), Sorting Text Blocks: A Sample ex Script

converting glossary to (example), A Complex Mapping Example

formatting package, The vi Text Editor

put emboldening codes around words, More Examples of Mapping Keys





troubleshooting, Problems with deletions, Characters

deleting text, Problems with deletions, Characters





:tselect command, Playing Tag with Windows

type-over, Lines (see c command)





U


u (undo) command, Problems with deletions, Undo, Undo, Recovering Deletions

buffer recovery, Recovering Deletions





U (undo) command, Problems with deletions, Undo

-U gvimrc option, GUI Options and Command Synopsis

\u metacharacter, Metacharacters Used in Replacement Strings, Metacharacters Used in Replacement Strings

\U metacharacter, Metacharacters Used in Replacement Strings

-u option, Command-Line Options

u status flag, Buffers and Their Interaction with Windows

underscore (_), using in file names, Opening a File

undoing, Problems with deletions, Problems with deletions, Undo, Undo, Recovering Deletions, Infinite Undo, Infinite Undo, Infinite Undo, Infinite Undo

infinitely (vi clones), Infinite Undo, Infinite Undo, Infinite Undo, Infinite Undo

elvis editor, Infinite Undo

nvi editor, Infinite Undo

vile editor, Infinite Undo





recovering deletions, Problems with deletions, Recovering Deletions

text deletions, Problems with deletions





undolevels option, Undoing Undos, Infinite Undo

elvis editor, Infinite Undo





undolimit option (vile), Infinite Undo

undos, Undoing Undos

:unhide command, Buffer Command Synopsis

Unix, Executing Unix Commands, Getting Vim for Unix and GNU/Linux

commands, Executing Unix Commands

Vim, installing, Getting Vim for Unix and GNU/Linux





unix parameter (sessionoptions option), The mksession Command

“Unknown terminal type” message, Problems Opening Files

unm command,

uppercase, converting to lowercase, Changing Case, Metacharacters Used in Replacement Strings

/usr/tmp directory, Problems Saving Files





V


-v option, Important Command-Line Arguments, Command-Line Options

vile editor, Important Command-Line Arguments





-V option, Command-Line Options

-V option (elvis), Important Command-Line Arguments

v, V commands (elvis block mode), Visual Mode

v: Vim variable, Variables

v:fname_in variable, What’s the Difference?

v:fname_new variable, What’s the Difference?

v:fname_out variable, What’s the Difference?

/var/tmp directory, Problems Saving Files

variable display mode (elvis), Syntax Highlighting

variables, Variables, Variables, Variables, Tuning a Vim Script with Global Variables, Buffer Variables, More About Variables

buffer, Buffer Variables

global, using Vim scripts, Tuning a Vim Script with Global Variables

types, More About Variables

Vim, Variables





--version option, Command-Line Options

versions of vi, And These Are My Brothers, Darrell, Darrell, and Darrell (see clones, vi)

vertical bar (|), Movement on the current line, Combining ex Commands, Extended Regular Expressions, Extended Regular Expressions, Manual Folding, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

alternation metacharacter, Extended Regular Expressions, Extended Regular Expressions

\| metacharacter, Extended Regular Expressions, Extended Regular Expressions, Extended Regular Expressions

for combining ex commands, Combining ex Commands

cursor movement command, Movement on the current line

manual folding and, Manual Folding





vertically splitting windows, Multiwindow Editing Inside Vim

:vi command, Problem Checklist, Command-Line Options

vi command (Unix), Options When Starting vi, Invoking vi on Multiple Files

command-line options, Options When Starting vi

editing multiple files, Invoking vi on Multiple Files





vi commands, The vi Text Editor, vi Commands, Numeric Arguments, Words, Repeating or Undoing Your Last Command, Repeating or Undoing Your Last Command, Numeric Arguments for Insert Commands, Advancing to a Specific Place

bottom-line, The vi Text Editor

general form of, Words

numeric arguments for, Numeric Arguments, Numeric Arguments for Insert Commands

repeating, Repeating or Undoing Your Last Command (see repeating commands)

running when starting vi, Advancing to a Specific Place

undoing, Repeating or Undoing Your Last Command (see undoing)





“vi Powered” logo, vi Powered!

vi text editor, Options When Starting vi, Customizing vi, Filtering text with vi, Editor Comparison Summary, vi and the Internet, Tastes Great, Less Filling, vi Quotes

clones of, Editor Comparison Summary (see clones, vi)

customizing editing environment, Customizing vi

Emacs editor versus, Tastes Great, Less Filling

filtering text with, Filtering text with vi

Internet and, vi and the Internet

quotes about, vi Quotes

starting, Options When Starting vi (see invoking vi)





vi.exrc file (nvi), Initialization

view command (Unix), Read-Only Mode

:view-file command (vile), Multiwindow Editing

view mode, Problems Opening Files

vile (vi clone), Recovering a Buffer, Word Abbreviation, Arbitrary Length Lines and Binary Data, Infinite Undo, Left-Right Scrolling, Mode Indicators, Editor Comparison Summary, vile: vi Like Emacs, Sources and Supported Operating Systems, Important Command-Line Arguments, Important Command-Line Arguments, Online Help and Other Documentation, Initialization, Multiwindow Editing, Multiwindow Editing, Extended Regular Expressions, Extended Regular Expressions, Improved Editing Facilities, Visual Mode, Tag Stacks, Programming Assistance, Syntax Highlighting, Interesting Features, Miscellaneous Small Features, The vile Editing Model, The Procedure Language, Sources and Supported Operating Systems, vile 9.6 Options

documentation and online help, Online Help and Other Documentation

editing model, The vile Editing Model

extended regular expressions, Extended Regular Expressions, Extended Regular Expressions

feature summary, Editor Comparison Summary

important command-line arguments, Important Command-Line Arguments, Important Command-Line Arguments

improvements over vi, Improved Editing Facilities, Visual Mode

infinite undo facility, Infinite Undo

initialization of, Initialization

interesting features, Interesting Features, Miscellaneous Small Features

line length, Arbitrary Length Lines and Binary Data

mode indicators, Mode Indicators

multiwindow editing, Multiwindow Editing, Multiwindow Editing

obtaining source code, Sources and Supported Operating Systems

procedure language for, The Procedure Language

programming assistance, Programming Assistance, Syntax Highlighting

set command options (list), vile 9.6 Options

sideways scrolling, Left-Right Scrolling

tag stacks, Tag Stacks

word abbreviations, Word Abbreviation





VILEINIT environment variable (vile), Initialization

.vilemenu file, Initialization, Adding menus

VILE_HELP_FILE environment variable (vile), Online Help and Other Documentation

VILE_STARTUP_FILE environment variable (vile), Initialization

VILE_STARTUP_PATH environment variable (vile), Online Help and Other Documentation

Vim, Word Abbreviation, Arbitrary Length Lines and Binary Data, Infinite Undo, Left-Right Scrolling, Mode Indicators, Editor Comparison Summary, Vim (vi Improved): An Introduction, Summary, Extended Regular Expressions, Extended Regular Expressions, Multiple Windows in Vim, Summary, Vim 7.1 Options

extended regular expressions, Extended Regular Expressions, Extended Regular Expressions

feature summary, Editor Comparison Summary

infinite undo facility, Infinite Undo

line length, Arbitrary Length Lines and Binary Data

mode indicators, Mode Indicators

multiple windows in, Multiple Windows in Vim, Summary

set command options (list), Vim 7.1 Options

sideways scrolling, Left-Right Scrolling

word abbreviations, Word Abbreviation





vimdiff command, A Few Words About the Other Fold Methods, What’s the Difference?

viminfo option, The viminfo Option

.vimrc startup file, Starting gvim

VimResized command, Autocommands

visual (block) mode, Visual Mode, Visual Mode, Visual Mode

elvis editor, Visual Mode

vile editor, Visual Mode





visual match facility (vile), Incremental Searching

visual mode, Using the Mouse, Problems Getting to Visual Mode

problems getting to, Problems Getting to Visual Mode





“Visual needs addressable cursor or upline capability” message, Problems Opening Files

Visual Studio, Vim Enhancements for Programmers

:viusage command (nvi), Online Help and Other Documentation

:vnew command, Options During Splits

:vsplit command, Multiwindow Editing Inside Vim, Options During Splits





W


w (move word) command, Movement by Text Blocks

W (move word) command, Movement by Text Blocks

:w (write) command, Calling in New Files

:w (write) command (ex), Saving and Quitting a File, Saving and Exiting Files, Saving and Exiting Files, Renaming the Buffer, Saving Part of a File

renaming buffer, Renaming the Buffer

saving parts of files, Saving Part of a File

:w! command, Saving and Exiting Files





^W command, Moving Around Windows (Getting Your Cursor from Here to There)

cursors, moving around in windows and, Moving Around Windows (Getting Your Cursor from Here to There)





^W key sequence, Multiwindow Editing Inside Vim

-w option, Important Command-Line Arguments, Command-Line Options

nvi editor, Important Command-Line Arguments





-W option, Command-Line Options

\w, \W metacharacters, Extended Regular Expressions

^W- command, Resizing Command Synopsis

w: Vim variable, Variables

^W< command, Resizing Command Synopsis

^W= command, Resizing Command Synopsis

^W> command, Resizing Command Synopsis

^Wc command, Closing and Quitting Windows

web sites for vi, vi Web Sites

^Wf command, Playing Tag with Windows

^Wg] command, Playing Tag with Windows

^Wg^J command, Playing Tag with Windows

^WH command, Moving Windows and Changing Their Layout

whitespace, Opening a File, Movement Within a Line, Words, Movement by Text Blocks, ex Commands, Indentation Control, Arbitrary Length Lines and Binary Data

deleting words and, Words

indentation, Indentation Control

newline characters, Movement Within a Line, Arbitrary Length Lines and Binary Data

sentence delimiters, Movement by Text Blocks

spaces in filenames, Opening a File, ex Commands





windo command, Buffer Commands

:window (:wi) command (elvis), Multiwindow Editing

Window menus, gvim’s Window menu

window option, The :set Command

windows, Opening Windows, Moving Around Windows (Getting Your Cursor from Here to There), Opening Windows, Moving Around Windows (Getting Your Cursor from Here to There), Moving Windows Around, Resizing Windows, Resizing Windows, Buffers and Their Interaction with Windows, Playing Tag with Windows, Closing and Quitting Windows

(see also multiwindow editing)

closing and quitting, Closing and Quitting Windows

cursors, moving around in, Moving Around Windows (Getting Your Cursor from Here to There)

moving around, Moving Windows Around, Resizing Windows

opening, Opening Windows, Moving Around Windows (Getting Your Cursor from Here to There)

resizing, Resizing Windows, Buffers and Their Interaction with Windows

tag commands, Playing Tag with Windows





Windows (Microsoft), gvim in Microsoft Windows (see MS Windows)

Windows files, editing with vile, Miscellaneous Small Features

WinEnter command, Autocommands

winheight option, Multiwindow Initiation from the Command Line (Shell), Window Sizing Options

WinLeave autocommand, Options During Splits

WinLeave command, Autocommands

winminheight option, Resizing Command Synopsis

winminwidth option, Resizing Command Synopsis

winpos parameter (sessionoptions option), The mksession Command

winsize parameter (sessionoptions option), The mksession Command

winvile editor, Building winvile, winvile Basic Appearance and Functionality

winwidth option, Multiwindow Initiation from the Command Line (Shell), Window Sizing Options

^WJ command, Moving Windows and Changing Their Layout, Playing Tag with Windows

^WK command, Moving Windows and Changing Their Layout

^WL command, Moving Windows and Changing Their Layout

wm (wrapmargin) option, Movement Within a Line, Repeat, Some Useful Options, More Examples of Mapping Keys

disabling for long insertions, More Examples of Mapping Keys

repeating long insertions, Repeat





word abbreviations, Word Abbreviation

word completion, Keyword and Dictionary Word Completion, Tag Stacking

words, Movement by Text Blocks, Changing Text, Words, Words, Words, Words, Problems with deletions, Transposing two letters, Review of Basic vi Commands, Movement by Text Blocks, Search for General Class of Words, Using the map Command, More Examples of Mapping Keys, More Examples of Mapping Keys, More Examples of Mapping Keys

(see also characters; lines; text)

deleting by, Words, Problems with deletions

undoing deletions, Problems with deletions





deleting parentheses around (example), More Examples of Mapping Keys

moving by, Movement by Text Blocks, Movement by Text Blocks

replacing (changing), Changing Text, Words, Words

searching for general class of, Search for General Class of Words

to start/end of, Words (see characters)

transposing, Transposing two letters, Using the map Command, More Examples of Mapping Keys

troff emboldening codes around, More Examples of Mapping Keys





:wq command, Saving and Quitting a File

^Wq command, Closing and Quitting Windows

:wquit command (elvis), Multiwindow Editing

^Wr command, Window Move Commands: Synopsis

^WR command, Window Move Commands: Synopsis

wrap option, Left-Right Scrolling, What’s My Line (Size)?

elvis editor, Left-Right Scrolling





wrapmargin (wm) option, Movement Within a Line, Repeat, Some Useful Options, More Examples of Mapping Keys, Editing Binary Files

disabling for long insertions, More Examples of Mapping Keys

repeating long insertions, Repeat





wrapping searches, Movement by Searches, Repeating Searches

wrapscan option, Repeating Searches, Advancing to a Specific Place, Some Useful Options

write-hook option (vile), The Procedure Language

write permission, Problems Opening Files, Problems Saving Files

writebackup option, Backups with Vim

writing the buffer, Read-Only Mode, Recovering a Buffer

autowrite and autosave options, Recovering a Buffer

overriding read-only mode, Read-Only Mode





“writing the buffer”, saving edits and, Opening and Closing Files

^Ws command, Options During Splits

^WS command, Options During Splits

^WT command, Moving Windows and Changing Their Layout

^Wx command, Window Move Commands: Synopsis

^W^F command, Playing Tag with Windows

^W^J command, Playing Tag with Windows

^W^Q command, Closing and Quitting Windows

^W^R command, Window Move Commands: Synopsis

^W^S command, Options During Splits

^W^X command, Window Move Commands: Synopsis

^W^_ command, Resizing Command Synopsis

^W_ command, Resizing Command Synopsis

^W| command, Resizing Command Synopsis





X


x (delete character) command, Characters, Transposing two letters, Changing and deleting text

xp command, Transposing two letters





X (delete character) command, Characters, Changing and deleting text

:x (write and quit) command (ex), Saving and Exiting Files, Command-Line Options

-x option, Command-Line Options

X resources for elvis, Options

X Window System, The vi Text Editor, Graphical Vim (gvim), gvim in the X Window System

using gvim, Graphical Vim (gvim), gvim in the X Window System





X11 interface, Initialization Steps, GUI Interfaces, Options, GUI Interfaces

elvis, Initialization Steps, GUI Interfaces, Options

vile, GUI Interfaces





XEmacs text editor, The vi Text Editor

xscrollbar option (elvis), Options

xvile editor, GUI Interfaces, Adding menus

XVILE_MENU environment variable (vile), Initialization





Y


Y (yank line) command, Copying Text, Copying and moving

y (yank) command, Simple Edits, Moving Text, Copying Text, Copying Text, Copying Text, Review of Basic vi Commands, More Command Combinations, Making Use of Buffers, Yanking to Named Buffers, Edits Between Files

examples of use, Review of Basic vi Commands, More Command Combinations

with named buffers, Copying Text, Yanking to Named Buffers, Edits Between Files

numbered buffers for, Moving Text, Making Use of Buffers

yy command, Copying Text





y (yank) command (ex), Edits Between Files

-y option, Command-Line Options

y$ command, Copying and moving

yanking text, Simple Edits, Moving Text, Copying Text, Making Use of Buffers, Yanking to Named Buffers, Edits Between Files

named buffers for, Copying Text, Yanking to Named Buffers, Edits Between Files

numbered buffers for, Moving Text, Making Use of Buffers





ye command, Copying and moving

yw command, Copying and moving

yy command, Copying and moving





Z


z command, Repositioning the Screen with z

-Z option, Command-Line Options

zA fold command, The Fold Commands

za fold command, The Fold Commands

zC fold command, The Fold Commands

zc fold command, The Fold Commands, Manual Folding, Manual Folding

zD fold command, The Fold Commands, A Few Words About the Other Fold Methods

zd fold command, The Fold Commands

zE fold command, The Fold Commands

zf fold command, The Fold Commands, Manual Folding

cursors, creating folds from, Manual Folding





zi fold command, The Fold Commands

Zintz, Walter, Using :g to Repeat a Command

zj fold command, The Fold Commands

zk fold command, The Fold Commands

zM fold command, The Fold Commands

zm fold command, The Fold Commands, Outlining

zN fold command, The Fold Commands

zn fold command, The Fold Commands

zo command, Manual Folding

zO fold command, The Fold Commands

zo fold command, The Fold Commands

zr fold command, The Fold Commands, Outlining

ZZ (quit vi) command, Saving and Quitting a File

ZZ command, Saving and Exiting





About the Authors


Arnold Robbins, an Atlanta native, is a professional programmer and technical author. He has been working with Unix systems since 1980, when he was introduced to a PDP-11 running a version of Sixth Edition Unix. His experience also includes multiple commercial Unix systems, from Sun, IBM, HP and DEC. He has been working with GNU/Linux systems since 1996. He likes his Macintosh laptop, but it has been commandeered by one of his daughters.



Arnold has also been a heavy awk user since 1987, when he became involved with gawk, the GNU project's version of awk. As a member of the POSIX 1003.2 balloting group, he helped shape the POSIX standard for awk. He is currently the maintainer of gawk and its documentation.



O'Reilly has been keeping him busy: He is author and/or coauthor of the bestselling titles: Unix In A Nutshell, Effective awk Programming, sed & awk, Classic Shell Scripting, and several pocket references.

Elbert is a professional software engineer and software architect recently finishing a 21-year career in the telcom industry. He wrote a full screen editor in assembler in 1983 as his first professional assignment, and has had special interest in editors since. He loves connecting Unix to anything and once wrote a stream editor program to automate JCL edits for mainframe monthly configurations by streaming mainframeJCL to a stream editor on an RJE connected Unix box.



He loves tinkering with everything Unix and considers any environment incomplete without his suite of Unix work-alike tools and the latest version of vim. He is a Unix Shell specialist, writing entire applications with only the shell.



His telcom honored him with their highest award for money-saving applications that he authored using a set of mainframe screen-scraping tools he wrote himself. They continue to use those applications today. He was also one of three founding team members that brought web 1.0 to the corporate consciousness in his telco position, and his team featured on the cover of CIO Magazine for their innovative and pioneering works.



He also served a brief stint on the original Microsoft NT beta support team in 1992.



He loves bicycling, music, and reading. Today he lives in the Chicago area where he occasionally takes on short term projects and works on personal software products.

Linda Lamb is a former employee of O'Reilly Media, where she worked in various capacities, including technical writer, editor of technical books, and marketing manager. She also worked on O'Reilly's series of consumer health books, Patient Centered Guides.





Colophon


The animal on the cover of Learning the vi and Vim Editors, Seventh Edition, is a tarsier, a nocturnal mammal related to the lemur. Its generic name, Tarsius, is derived from the animal’s very long ankle bone, the tarsus. The tarsier is a native of the East Indies jungles from Sumatra to the Philippines and Sulawesi, where it lives in the trees, leaping from branch to branch with extreme agility and speed.

A small animal, the tarsier’s body is only 6 inches long, followed by a 10-inch tufted tail. It is covered in soft, brown or gray silky fur, and has a round face and huge eyes. Its arms and legs are long and slender, as are its digits, which are tipped with rounded, fleshy pads to improve its grip on trees. Tarsiers are active only at night, hiding during the day in tangles of vines or in the tops of tall trees. They subsist mainly on insects and, though very curious animals, tend to be loners.

The cover image is a 19th-century engraving from the Dover Pictorial Archive. The cover font is Adobe’s ITC Garamond. The text font is Linotype Birka, the heading font is Adobe Myriad Condensed, and the code font is LucasFont’s TheSansMonoCondensed.





SPECIAL OFFER: Upgrade this ebook with O’Reilly





Upgrade this ebook today for $4.99 at oreilly.com and get access to additional DRM-free formats, including PDF and EPUB, along with free lifetime updates.





