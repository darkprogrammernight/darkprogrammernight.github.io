Chapter 3. Moving Around in a Hurry





You will not use vi just to create new files. You’ll spend a lot of your time in vi editing existing files. You rarely want to simply open to the first line in the file and move through it line by line; you want to get to a specific place in a file and start working.

All edits start with you moving the cursor to where you want to begin the edit (or, with ex line editor commands, by identifying the line numbers to be edited). This chapter shows you how to think about movement in a variety of ways (by screens, by text, by patterns, or by line numbers). There are many ways to move in vi, since editing speed depends on getting to your destination with only a few keystrokes.

This chapter covers:

Movement by screens



Movement by text blocks



Movement by searches for patterns



Movement by line number





Movement by Screens





When you read a book, you think of “places” in the book in terms of pages: the page where you stopped reading or the page number in an index. You don’t have this convenience when you’re editing files. Some files take up only a few lines, and you can see the whole file at once. But many files have hundreds (or thousands!) of lines.

You can think of a file as text on a long roll of paper. The screen is a window of (usually) 24 lines of text on that long roll.

In insert mode, as you fill up the screen with text, you will end up typing on the bottom line of the screen. When you reach the end and press ENTER, the top line rolls out of sight, and a blank line appears on the bottom of the screen for new text. This is called scrolling.

In command mode, you can move through a file to see any text in it by scrolling the screen ahead or back. And, since cursor movements can be multiplied by numeric prefixes, you can move quickly to anywhere in your file.





Scrolling the Screen





There are vi commands to scroll forward and backward through the file by full and half screens:

^F

Scroll forward one screen.



^B

Scroll backward one screen.



^D

Scroll forward half screen (down).



^U

Scroll backward half screen (up).





(In this list of commands, the ^ symbol represents the CTRL key. So ^F means to hold down the CTRL key and press the f key simultaneously.)

There are also commands to scroll the screen up one line (^E) and down one line (^Y). However, these two commands do not send the cursor to the beginning of the line. The cursor remains at the same point in the line as when the command was issued.





Repositioning the Screen with z





If you want to scroll the screen up or down, but you want the cursor to remain on the line where you left it, use the z command.

z ENTER

Move current line to top of screen and scroll.



z.

Move current line to center of screen and scroll.



z-

Move current line to bottom of screen and scroll.





With the z command, using a numeric prefix as a multiplier makes no sense. (After all, you would need to reposition the cursor to the top of the screen only once. Repeating the same z command wouldn’t move anything.) Instead, z understands a numeric prefix as a line number that it will use in place of the current line. For example, z ENTER moves the current line to the top of the screen, but 200z ENTER moves line 200 to the top of the screen.





Redrawing the Screen





Sometimes while you’re editing, messages from your computer system will display on your screen. These messages don’t become part of your editing buffer, but they do interfere with your work. When system messages appear on your screen, you need to redisplay, or redraw, the screen.

Whenever you scroll, you redraw part of (or all of) the screen, so you can always get rid of unwanted messages by scrolling them off the screen and then returning to your previous position. But you can also redraw the screen without scrolling, by typing CTRL-L.





Movement Within a Screen





You can also keep your current screen, or view of the file, and move around within the screen using:

H

Move to home—the top line on screen.



M

Move to middle line on screen.



L

Move to last line on screen.



n H

Move to n lines below top line.



n L

Move to n lines above last line.





H moves the cursor from anywhere on the screen to the first, or “home,” line. M moves to the middle line, L to the last. To move to the line below the first line, use 2H.

KeystrokesResults

L With a screen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of your edits as you make them. Screen editors are very popular, since they allow you to make changesas you read through a file.

Move to the last line of the screen with the L command.



2H With a screen editor you canscroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of your edits as you make them. Screen editors are very popular, since they allow you to make changes as you read through a file.

Move to the second line of the screen with the 2H command. (H alone moves to the top line of the screen.)





Movement by Line





Within the current screen there are also commands to move by line. You’ve already seen j and k. You can also use:

ENTER

Move to first character of next line.



+

Move to first character of next line.



-

Move to first character of previous line.





These three commands move down or up to the first character of the line, ignoring any spaces or tabs. j and k, by contrast, move the cursor down or up to the first position of a line, even if that position is blank (and assuming that the cursor started at the first position).





Movement on the current line





Don’t forget that h and l move the cursor to the left and right, and that 0 (zero) and $ move the cursor to the beginning or end of the line. You can also use:

^

Move to first nonblank character of current line.



n |

Move to column n of current line.





As with the line movement commands shown earlier, ^ moves to the first character of the line, ignoring any spaces or tabs. 0, by contrast, moves to the first position of the line, even if that position is blank.





Movement by Text Blocks





Another way that you can think of moving through a vi file is by text blocks—words, sentences, paragraphs, or sections.

You have already learned to move forward and backward by word (w, W, b or B). In addition, you can use these commands:

e

Move to end of word.



E

Move to end of word (ignore punctuation).



(

Move to beginning of current sentence.



)

Move to beginning of next sentence.



{

Move to beginning of current paragraph.



}

Move to beginning of next paragraph.



[[

Move to beginning of current section.



]]

Move to beginning of next section.





To find the end of a sentence, vi looks for one of these punctuation marks: ?, ., or !. vi locates the end of a sentence when the punctuation is followed by at least two spaces or when it appears as the last nonblank character on a line. If you have left only a single space following a period, or if the sentence ends with a quotation mark, vi won’t recognize the sentence.

A paragraph is defined as text up to the next blank line, or up to one of the default paragraph macros (.IP, .PP, .LP, or .QP) from the troff MS macro package. Similarly, a section is defined as text up to the next default section macro (.NH, .SH, .H 1, or .HU). The macros that are recognized as paragraph or section separators can be customized with the :set command, as described in Chapter 7.

Remember that you can combine numbers with movement. For example, 3) moves ahead three sentences. Also remember that you can edit using movement commands: d) deletes to the end of the current sentence, 2y} copies (yanks) two paragraphs ahead.





Movement by Searches





One of the most useful ways to move around quickly in a large file is by searching for text, or more properly, a pattern of characters. Sometimes a search can be performed to find a misspelled word or to find each occurrence of a variable in a program.

The search command is the special character / (slash). When you enter a slash, it appears on the bottom line of the screen; you then type in the pattern that you want to find: /pattern.

A pattern can be a whole word or any other sequence of characters (called a “character string”). For example, if you search for the characters red, you will match red as a whole word, but you’ll also match occurred. If you include a space before or after pattern, the spaces will be treated as part of the word. As with all bottom-line commands, press ENTER to finish. vi, like all other Unix editors, has a special pattern-matching language that allows you to look for variable text patterns: for example, any word beginning with a capital letter, or the word The at the beginning of a line.

We’ll talk about this more powerful pattern-matching syntax in Chapter 6. For right now, think of a pattern simply as a word or phrase.

vi begins the search at the cursor and searches forward, wrapping around to the start of the file if necessary. The cursor will move to the first occurrence of the pattern. If there is no match, the message “Pattern not found” will be shown on the status line.[14]

Using the file practice, here’s how to move the cursor by searches:

KeystrokesResults

/edits With a screen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of youredits as you make them.

Search for the pattern edits. Press ENTER to enter. The cursor moves directly to that pattern.



/scr With ascreen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of your edits as you make them.

Search for the pattern scr. Press ENTER to enter. Note that there is no space after scr.





The search wraps around to the front of the file. Note that you can give any combination of characters; a search does not have to be for a complete word.

To search backward, type a ? instead of a /:

?pattern

In both cases, the search wraps around to the beginning or end of the file, if necessary.





Repeating Searches





The last pattern that you searched for stays available throughout your editing session. After a search, instead of repeating your original keystrokes, you can use a command to search again for the last pattern:

n

Repeat search in same direction.



N

Repeat search in opposite direction.



/ ENTER

Repeat search forward.



? ENTER

Repeat search backward.





Since the last pattern stays available, you can search for a pattern, do some work, and then search again for the same pattern without retyping it by using n, N, /, or ?. The direction of your search (/ is forward, ? is backward) is displayed at the bottom left of the screen. (nvi does not show the direction for the n and N commands. Vim puts the search text into the command line too, and lets you scroll through a saved history of search commands, using the up and down arrow keys.)

To continue with the previous example, since the pattern scr is still available for search, you can do the following:

KeystrokesResults

n With a screen editor you canscroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of your edits as you make them.

Move to the next instance of the pattern scr (from screen to scroll) with the n (next) command.



?you With a screen editoryou can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results of your edits as you make them.

Search backward with ? from the cursor to the first occurrence of you. You need to press ENTER after typing the pattern.



N With a screen editor you can scroll the page, move the cursor, delete lines, insert characters, and more, while seeing the results ofyour edits as you make them.

Repeat the previous search for you but in the opposite direction (forward).





Sometimes you want to find a word only if it is further ahead; you don’t want the search to wrap around earlier in the file. vi has an option, wrapscan, that controls whether searches wrap. You can disable wrapping like this:

:set nowrapscan

When nowrapscan is set and a forward search fails, the status line displays the message:

Address search hit BOTTOM without matching pattern

When nowrapscan is set and a backward search fails, the message displays “TOP” instead of “BOTTOM.”





Changing through searching





You can combine the / and ? search operators with the commands that change text, such as c and d. Continuing with the previous example:

KeystrokesResults

d?move With a screen editor you can scroll the page,your edits as you make them.

Delete from before the cursor up to and through the word move.





Note how the deletion occurs on a character basis, and whole lines are not deleted.

This section has given you only the barest introduction to searching for patterns. Chapter 6, will teach you more about pattern matching and its use in making global changes to a file.





Current Line Searches





There are also miniature versions of the search commands that operate within the current line. The command fx moves the cursor to the next instance of the character x (where x stands for any character). The command tx moves the cursor to the character before the next instance of x. Semicolons can then be used repeatedly to “find” your way along.

The inline search commands are summarized here. None of these commands will move the cursor to the next line:

f x

Find (move cursor to) next occurrence of x in the line, where x stands for any character.



F x

Find (move cursor to) previous occurrence of x in the line.



t x

Find (move cursor to) character before next occurrence of x in the line.



T x

Find (move cursor to) character after previous occurrence of x in the line.



;

Repeat previous find command in same direction.



,

Repeat previous find command in opposite direction.





With any of these commands, a numeric prefix n locates the nth occurrence. Suppose you are editing in practice, on this line:

With a screen editor you can scroll the

KeystrokesResults

fo With a screen editor you can scroll the

Find the first occurrence of o in your current line with f.



; With a screen editor you can scroll the

Move to the next occurrence of o with the ; command (find next o).





dfx deletes up to and including the named character x. This command is useful in deleting or yanking partial lines. You might need to use dfx instead of dw if there are symbols or punctuation within the line that make counting words difficult. The t command works just like f, except that it positions the cursor before the character searched for. For example, the command ct. could be used to change text up to the end of a sentence, leaving the period.





* * *



[14] The exact message varies with different vi clones, but their meanings are the same. In general, we won’t bother noting everywhere that the text of a message may be different; in all cases the information conveyed is the same.





Movement by Line Number





Lines in a file are numbered sequentially, and you can move through a file by specifying line numbers.

Line numbers are useful for identifying the beginning and end of large blocks of text you want to edit. Line numbers are also useful for programmers, since compiler error messages refer to line numbers. Finally, line numbers are used by ex commands, which you will learn in the next chapters.

If you are going to move by line numbers, you must have a way to identify them. Line numbers can be displayed on the screen using the :set nu option described in Chapter 7. In vi, you can also display the current line number on the bottom of the screen.

The command CTRL-G causes the following to be displayed at the bottom of your screen: the current line number, the total number of lines in the file, and what percentage of the total the present line number represents. For example, for the file practice, CTRL-G might display:

"practice" line 3 of 6 --50%--

CTRL-G is useful either for displaying the line number to use in a command or for orienting yourself if you have been distracted from your editing session.

Depending upon the implementation of vi you’re using, you may see additional information, such as what column the cursor is on, and an indication as to whether the file has been modified but not yet written out. The exact format of the message will vary as well.





The G (Go To) Command





You can use line numbers to move the cursor through a file. The G (go to) command uses a line number as a numeric argument and moves directly to that line. For instance, 44G moves the cursor to the beginning of line 44. G without a line number moves the cursor to the last line of the file.

Typing two backquotes (``) returns you to your original position (the position where you issued the last G command), unless you have done some edits in the meantime. If you have made an edit and then moved the cursor using some command other than G, `` will return the cursor to the site of your last edit. If you have issued a search command (/ or ?), `` will return the cursor to its position when you started the search. A pair of apostrophes ('') works much like two backquotes, except that it returns the cursor to the beginning of the line instead of the exact position on that line where your cursor had been.

The total number of lines shown with CTRL-G can be used to give yourself a rough idea of how many lines to move. If you are on line 10 of a 1,000-line file:

"practice" line 10 of 1000 --1%--

and you know that you want to begin editing near the end of that file, you could give an approximation of your destination with 800G.

Movement by line number is a tool that can move you quickly from place to place through a large file.





Review of vi Motion Commands





Table 3-1 summarizes the commands covered in this chapter.

Table 3-1. Movement commands

MovementCommand

Scroll forward one screen

^F

Scroll backward one screen

^B

Scroll forward half screen

^D

Scroll backward half screen

^U

Scroll forward one line

^E

Scroll backward one line

^Y

Move current line to top of screen and scroll

z ENTER

Move current line to center of screen and scroll

z.

Move current line to bottom of screen and scroll

z-

Redraw the screen

^L

Move to home—the top line of screen

H

Move to middle line of screen

M

Move to bottom line of screen

L

Move to first character of next line

ENTER

Move to first character of next line

+

Move to first character of previous line

-

Move to first nonblank character of current line

^

Move to column n of current line

n |

Move to end of word

e

Move to end of word (ignore punctuation)

E

Move to beginning of current sentence

(

Move to beginning of next sentence

)

Move to beginning of current paragraph

{

Move to beginning of next paragraph

}

Move to beginning of current section

[[

Move to beginning of next section

]]

Search forward for pattern

/ pattern

Search backward for pattern

? pattern

Repeat last search

n

Repeat last search in opposite direction

N

Repeat last search forward

/

Repeat last search backward

?

Move to next occurrence of x in current line

f x

Move to previous occurrence of x in current line

F x

Move to just before next occurrence of x in current line

t x

Move to just after previous occurrence of x in current line

T x

Repeat previous find command in same direction

;

Repeat previous find command in opposite direction

,

Go to given line n

n G

Go to end of file

G

Return to previous mark or context

``

Return to beginning of line containing previous mark

''

Show current line (not a movement command)

^G





