Chapter 9. Vim (vi Improved): An Introduction





This part of the book describes Vim, the other vi. We briefly introduce Vim and the most noteworthy of its many technical advances over vi, along with a bit of history. We’ll finish this chapter with some pointers to special Vim modes and teaching tools for new users. The following chapters cover:

Editing enhancements over vi



Multiwindow editing



Vim scripts



The Vim graphical user interface (GUI)



Programming enhancements



Editing patterns



Other cool stuff





Vim stands for “vi improved.” It was written and is maintained by Bram Moolenaar. Today, Vim is perhaps the most widely used vi clone, and there exists a separate Internet domain (vim.org) dedicated to it. The current version is 7.1.

Unconstrained by standards or committees, Vim continues to grow in functionality. An entire community has grown up around it. Collectively, they decide what new features to add and what existing features to modify, by nominating and voting for suggestions during development cycles.

Inspired by Bram’s dedicated energy and the voting system, Vim enjoys a strong following. It maintains its value by growing and changing with the computing industry and, correspondingly, with editing needs. For instance, its context-specific language editing started with C and has grown to encompass C++, Java, and now C#.

Vim includes many new features that facilitate the editing of code in many new languages. In fact, many features promised at the release of this book’s previous edition are now fully implemented. The computing landscape has changed dramatically and dynamically these last 10 years, and Vim has matched it stride for stride.

Today Vim is so ubiquitous, especially among Unix and its variants (e.g., BSD and GNU/Linux), that for many users Vim has become synonymous with vi. Indeed, many distributions of GNU/Linux come with a default installation of Vim as the /bin/vi binary!

Vim provides features not in vi that are considered essential in modern-day text editors, such as ease of use, graphical terminal support, color, syntax highlighting and formatting, as well as extended customization.





Overview





Author and History[49]





Bram started work on Vim after buying an Amiga computer. As a Unix user he’d been using the vi-like editor called stevie, one he considered far from perfect. Fortunately, it came with the source code, and he began by making the editor more compatible with vi and fixing bugs. After a while the program became quite usable, and Vim version 1.14 was published on Fred Fish disk 591 (a collection of free software for the Amiga).

Other people began to use the program, liked it, and started helping with its development. A port to Unix was followed by ports to MS-DOS and other systems, and subsequently Vim became one of the most widely available vi clones. More features were added gradually: multilevel undo, multiwindowing, etc. Some features were unique to Vim, but many were inspired by other vi clones. The goal has always been to provide the best features to the user.

Today Vim is one of the most full-featured of the vi-style editors anywhere. The online help is extensive.

One of the more obscure features of Vim is its support for typing from right to left, which is useful for languages such as Hebrew and Farsi and illustrates Vim’s versatility. Being a rock-stable editor on which professional software developers can rely is another of Vim’s design goals. Vim crashes are rare, and when they happen you can recover your changes.

Development on Vim continues. The group of people helping to add features and port Vim to more platforms is growing, and the quality of the ports to different computer systems is increasing. The Microsoft Windows version has dialogs and a file-selector, which opens up the hard-to-learn vi commands to a large group of users.





Why Vim?





Vim so dramatically extends the traditional vi functionality that one might more easily ask, “Why not Vim?” vi introduced the standard from which others borrowed (vile, elvis, nvi), and Vim took the baton and ran with it. Vim dared to radically extend features, sometimes pushing processors to the edge of their ability to perform Vim’s work with adequate response time. We don’t know whether it was an article of faith by Bram that processor and memory speeds would improve enough to catch up with Vim’s demands, but fortunately, modern processors and computers handle even the toughest Vim tasks well.





Compare and Contrast with vi





Vim is more universally available than vi. There is at least some version of Vim available on virtually all operating systems, whereas vi is available only on Unix or Unix work-alike systems.

vi is the original and has changed little over the years. It is the POSIX standard-bearer and fulfills its role well. Vim starts where vi leaves off, providing all of vi’s functionality and then extending that to add graphical interfaces and features such as complex options and scripting that go far beyond vi’s original capabilities.

Vim ships with its own built-in documentation in the form of a directory of specialized text files. A casual inspection of this directory (using the standard Unix word count tool, wc -c *.txt) shows 129 files comprising almost 122,000 lines of documentation! This is the first hint at the scope of Vim’s features. Vim accesses these files via its internal “help” command, another feature not available in vi. We look more closely at Vim’s help system later and offer tips and tricks to maximize your learning experience.

One way to contrast Vim’s features with vi’s is to look more closely at the included directory of help files. Vim flags options, commands, and functions in these files with an annotation of “not in vi” or “not available in vi”. A nonscientific scan of the help files (using a quick grep -i 'not.. *in vi') yields over 700 hits. Even if these hits were redundant by a factor of two, it’s clear Vim has many features vi does not.

The following chapters cover some of the more interesting Vim features. From extensions of the historic Vim to new functionality, we describe the best and most popular productivity features. We cover topics universally recognized as useful enhancements, such as syntax color highlighting. We also look at some more obscure features that are useful for added productivity. For example, we show a way to customize the Vim status line to show a real-time update of the date and time each time you move the cursor.





Categories of Features





Vim’s features span the range of activities common to virtually any text-editing task. Some features just extend what users wanted the original vi to do; others are completely new and not in vi. And if you need something that’s not there, Vim offers built-in scripting for unlimited extensibility and customization. Some categories of Vim features include:

Syntax extensions

Vim lets you control indentation and syntax-based color coding of your text. And you have many options to define this automatic format. If you don’t like the color highlighting, you can change it. If you need a certain style of indentation, Vim provides it, or if you have a specialized need, it lets you customize your environment.



Programmer assistance

Although Vim doesn’t try to provide all programming needs, it offers many features normally found in Integrated Development Environments (IDEs). From quick edit-compile-debug cycles to autocompletion of keywords, Vim has specialized features to let you do more than edit quickly—it helps you program.



Graphical user interface (GUI) features

Vim extends usability to a more general population by allowing point-and-click editing, like many modern easy-to-use editors. All of the power-user functionality gets the boost of simple GUI accessibility for lighter and simpler editing tasks.



Scripting and plug-ins

You can write your own Vim extensions or download plug-ins from the Internet. You can even contribute to the Vim community by publishing your extensions for others to use.



Initialization

Vim, like vi, uses configuration files to define sessions at startup time, but Vim has a vastly expanded repertoire of definable behaviors. You can keep it as simple as setting a few options, as you would in vi, or you can write an entire suite of customizations that define your session based on any context you define. For example, you can script your initialization files to precompile code based on which directory you’re editing files in, or you can retrieve information from some real-time source and incorporate it into your text at startup.



Session context

Vim keeps session information in a file, .viminfo. Ever wonder “Where was I?” when revisiting and editing a file? This fixes that! You can define how much and what kind of information to sustain across sessions. For example, you can define how many “recent documents” or last-edited files to track, how many edits (deletions, changes) to remember per file, how many commands to remember from the command history, and how many buffers and lines to keep from previous edit actions (“puts,” “deletes,” etc.). Not only does Vim remember edits in your last session for a file, it remembers basic things between files. This is handy for editing activities such as grabbing a sequence of lines in one file (with y [yank], or d [delete]) and “putting” them in another. Whatever is in the unnamed buffer is remembered and available from one file to the next. Also, Vim remembers the last search pattern, so you can simply use the command n (find next occurrence) when beginning a session to find the last-used search pattern.

Vim also remembers which line you were on for each of your most recently edited files. If you exit your edit session with the cursor on line 25, it repositions you on line 25 the next time you edit that file.



Postprocessing

In addition to performing presession functions, Vim lets you define what to do after you’ve edited a file. You can write cleanup routines to delete temporary files accumulated from compiles, or do real-time edits to the file before it’s written back to storage. You have complete control to customize any postedit activities



Transitions

Vim manages state transitions. When you move within a session from buffer to buffer or window to window (usually the same thing), Vim automatically does pre- and post- housekeeping.



Transparent editing

Vim detects and automatically unbundles archived or compressed files. For example, you can directly edit a zipped file such as myfile.tar.gz. You can even edit directories. Vim lets you navigate a directory and select files to edit using familiar Vim navigation commands.



Meta-information

Vim offers four handy read-only registers from which the user may extract meta-information for “puts”: the current filename (%), the alternate filename (#), the last command-line command executed (:), and the last inserted text (., a period).



The black-hole register

This is an obscure but useful extension of editing registers. Normally, text deletions put this text into buffers using a rotation scheme, which is useful for cycling through old deletes to get back old and deleted text. Vim provides the “black-hole” register as a place to throw deleted text away, without affecting the rotation of deleted text in the normal registers. If you’re a Unix user, this register is Vim’s version of /dev/null.



Keyword completion

Vim lets you complete partially typed words with context-sensitive completion rules. For example, Vim can look up words in a dictionary or in a file containing keywords specific to a language.





Vim also lets you drop back to a vi-compatible mode with its compatible option (:set compatible). Most of the time you’ll probably want Vim’s extra features, but it’s a thoughtful touch to provide for backward compatibility if you need it.





Philosophy





Vim’s philosophy aligns closely with vi’s. Both provide power and elegance in editing. Both rely on modality (command mode versus input mode). And both bring editing to the keyboard: that is, users can perform all of their editing work quickly and efficiently and never touch a mouse (or a ^X ^C). We like to think of this as “touch editing,” which is analogous to “touch typing,” reflecting the corresponding increase in speed and efficiency that both bring to their respective tasks.

Vim extends that philosophy by permitting and providing features for less experienced users (GUI, visual highlight mode) and power options for the power users (scripting, extended regular expressions, configurable syntax, and configurable indenting).

And for the super power users who like to code, Vim comes with source code. Users are free (even encouraged) to improve on the improvements. Philosophically, Vim strikes a balance for all users’ needs.





* * *



[49] This section is adapted from material supplied by Bram Moolenaar, Vim’s author. We thank him.





Where to Get Vim





If your environment is some variant of Unix—including Mac OS X—you may be in luck and already have Vim installed. If it’s available and executable in your predefined PATH environment variable, you should be able to type vim at the shell command line and open a Vim window. If you get the following typical Unix error message:

sh: command not found: vim

try vi and see whether a Vim welcome message appears. Your installation may actually substitute Vim for vi.

On many systems you’ll find old versions of Vim. This section may therefore be useful to help you install the latest version, even if you have Vim already. Once you are in the editor, check not only that you are running Vim but also the version with the :version command. Vim will provide a screen resembling this:

:version VIM - Vi IMproved 7.0 (2006 May 7, compiled Aug 30 2006 21:54:03) Included patches: 1-76 Compiled by corinna@cathi Huge version without GUI. Features included (+) or not (-): +arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent -clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments +cryptv +cscope +cursorshape ... +profile -python +quickfix +reltime +rightleft -ruby +scrollbind +signs +smartindent -sniff +statusline -sun_workshop +syntax +tag_binary +tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp -xterm_clipboard -xterm_save system vimrc file: "$VIM/vimrc" user vimrc file: "$HOME/.vimrc" user exrc file: "$HOME/.exrc" fall-back for $VIM: "/usr/share/vim" Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 Linking: gcc -L/usr/local/lib -o vim.exe -lncurses -liconv -lint

Some of this output is discussed in Chapter 10 in the context of helping you compile Vim with customizations.





Note


Interestingly, on one of the authors’ Mac Mini, with OS X version 10.4.10 installed, not only does a vi command invoke Vim but the documentation (the “manpage”) documents Vim!



If you haven’t found Vim so far, here are a few common directories you may want to search before you try to download and install it. If you find the executable, add its directory as part of your PATH and you’re ready to go:

/usr/bin (this should be in PATH anyway)

/bin (so should this)

/opt/local/bin

/usr/local/bin

If none of those work, you probably don’t have Vim. Happily, Vim is available in many forms for many platforms and is (usually and relatively) easy to retrieve and install. The following sections guide you to getting Vim for your platform. We discuss how to install Vim for these platforms, in order:

Unix and variants, including GNU/Linux



Windows XP, 2000, Vista



Macintosh





Getting Vim for Unix and GNU/Linux





Many modern Unix environments already come with some version of Vim. Most GNU/Linux distributions simply link the default vi location /bin/vi to a Vim executable. Most Unix users won’t ever need to install it.

Because there are so many variants of Unix and so many flavors of some variants (e.g., Sun Solaris HP-UX, *BSD, all the distributions of GNU/Linux), the most straightforward and recommended way to get Vim is to download its source, compile it, and install it.





Note


The installation procedure described here requires a development environment capable of compiling source code. Although most Unix variants provide compilers and related tools, some (notably current releases of the Ubuntu GNU/Linux distribution) require you to download and install additional packages before you can experience the pleasures of compiling code.

The Vim home page refers to a new installation procedure it recommends, called aap. It provides a link and brief introduction. Because aap is new and the old method of installing by downloading and compiling works well, we are not recommending aap as the installation procedure of choice. By the time you read this book, use of aap may be well established.

There are also prepackaged Vim bundles offering easy standard installations for GNU/Linux (Red Hat RPMs, Debian pkgs), IRIX (SoftwareManager), Sun Solaris (Companion Software), and HP-UX. The Vim home page provides links for all of these systems.



Vim source code is available from the Vim home page, http://www.vim.org. Source code is bundled in tarballs compressed in either GZIP (.gz) or BZIP2 (.bz2) format. Virtually all operating systems recognize and handle GZIP files nowadays, and most Unix variants have the utilities to handle BZIP2 as well. Download the source and unpack the compressed file as follows, substituting the name of the file you downloaded if you are installing a different version:

.gz file

$gunzip vim-7.1.tar.gz



.bz2 file

$bunzip2 vim-7.1.tar.gz





After the command completes, the file vim-7.1.tar (or a comparable file reflecting the version you downloaded) remains. Now untar the tar file:

$tar xvf vim-7.1.tar vim71 vim71/README.txt vim71/runtime vim71/README_unix.txt vim71/README_lang.txt vim71/src vim71/Makefile vim71/Filelist vim71/README_src.txt ... vim71/runtime/doc/vimtutor-ru.1 vim71/runtime/doc/xxd-ru.1 vim71/runtime/doc/evim-ru.UTF-8.1 vim71/runtime/doc/vim-ru.UTF-8.1 vim71/runtime/doc/vimdiff-ru.UTF-8.1 vim71/runtime/doc/vimtutor-ru.UTF-8.1 vim71/runtime/doc/xxd-ru.UTF-8.1

You can now remove the vim-7.1.tar file. Change directories to the Vim directory created by the tar command:

$cd vim71

The configure file is a script that configures the compilation parameters. Most configuration work should be left to the script, which examines the host environment and turns on and off features according to software installed on the system.

You can decide at this point whether to use the defaults or selectively choose (or not choose) features. For example, you may want to compile with the perl interface turned on where the configure script otherwise would not have done so, anticipating future installation of perl scripting tools:

$./configure --enable-perlinterp

Or, you may decide you have no use for a perl interface and turn that feature off with the configure options:

$./configure --disable-perlinterp





Warning


Current versions of Vim offer slightly different ways to customize your installation. Instead of putting all of the --disable-XXX and --enable-XXX options in configure options, the INSTALL file points you to making changes in the feature.h file. Unless you have compelling reasons to make changes in that file, we recommend you compile with available options (described in README.txt) and customize your editing needs in Vim configuration files.



The normal configure output (default, with no options) looks something like:

$configure /home/ehannah/Desktop/vim/vim71/src configure: loading cache auto/config.cache checking whether make sets $(MAKE)... (cached) yes checking for gcc... (cached) gcc checking for C compiler default output file name... a.out checking whether the C compiler works... yes checking whether we are cross compiling... no checking for suffix of executables... ... checking for NLS... no "po/Makefile" - disabled checking for dlfcn.h... (cached) yes checking for dlopen()... no checking for dlopen() in -ldl... yes checking for dlsym()... yes checking for setjmp.h... (cached) yes checking for GCC 3 or later... yes configure: creating auto/config.status config.status: creating auto/config.mk config.status: creating auto/config.h config.status: auto/config.h is unchanged

Now build Vim with the make utility:

$make Starting make in the src directory. If there are problems, cd to the src directory and run make there cd src && /usr/local/lib/cw/make first /home/ehannah/Desktop/vim/vim71/src make[1]: Entering directory `/home/ehannah/Desktop/vim/vim71/src' gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 -o objects/ charset.o charset.c gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 -o objects/ diff.o diff.c gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 -o objects/ digraph.o digraph.c gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 -o objects/ edit.o edit.c ... make[2]: Entering directory `/home/ehannah/Desktop/vim/vim71/src' creating auto/pathdef.c gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 -o objects/ pathdef.o auto/ pathdef.c make[2]: Leaving directory `/home/ehannah/Desktop/vim/vim71/src' link.sh: Using auto/link.sed file to remove a few libraries gcc -o vim objects/buffer.o objects/charset.o objects/diff.o objects/digraph.o objects/edit.o objects/eval.o objects/ex_cmds.o objects/ex_cmds2.o objects/ex_docmd.o objects/ex_eval.o objects/ex_getln.o objects/fileio.o objects/fold.o objects/getchar.o objects/hardcopy.o objects/hashtab.o objects/if_cscope.o objects/if_xcmdsrv.o objects/main.o objects/mark.o objects/memfile.o objects/memline.o objects/menu.o objects/message.o objects/misc1.o objects/misc2.o objects/move.o objects/mbyte.o objects/normal.o objects/ops.o objects/option.o objects/os_unix.o objects/pathdef.o objects/popupmnu.o objects/quickfix.o objects/regexp.o objects/screen.o objects/search.o objects/spell.o objects/syntax.o objects/tag.o objects/term.o objects/ui.o objects/undo.o objects/window.o objects/netbeans.o objects/version.o -lncurses -lgpm -ldl link.sh: Linked fine with a few libraries removed cd xxd; CC="gcc" CFLAGS=" -g -O2" \ 	/usr/local/lib/cw/make -f Makefile /home/ehannah/Desktop/vim/vim71/src/xxd make[2]: Entering directory `/home/ehannah/Desktop/vim/vim71/src/xxd' gcc -g -O2 -DUNIX -o xxd xxd.c make[2]: Leaving directory `/home/ehannah/Desktop/vim/vim71/src/xxd' make[1]: Leaving directory `/home/ehannah/Desktop/vim/vim71/src'

If all has gone well, you now have an executable Vim binary in the src directory. Vim is now ready for use, but you have to either invoke it by specifying a full pathname or add the directory in which Vim was placed to each user’s executable path. If you can’t install programs as an administrator, this will have to do.

To finish installing Vim as a general resource to all users of the machine, you must have administrator (root) privileges. If you do, become root and enter:

#make install Starting make in the src directory. If there are problems, cd to the src directory and run make there cd src && make install /home/ehannah/Desktop/vim/vim71/src make[1]: Entering directory `/home/ehannah/Desktop/vim/vim71/src' if test -f /usr/local/bin/vim; then \ mv -f /usr/local/bin/vim /usr/local/bin/vim.rm; \ rm -f /usr/local/bin/vim.rm; \ fi cp vim /usr/local/bin strip /usr/local/bin/vim chmod 755 /usr/local/bin/vim cp vimtutor /usr/local/bin/vimtutor chmod 755 /usr/local/bin/vimtutor /bin/sh ./installman.sh install /usr/local/man/man1 "" /usr/local/ share/vim /usr/local/share/vim/vim71 /usr/local/share/vim ../ runtime/doc 644 vim vimdiff evim installing /usr/local/man/man1/vim.1 installing /usr/local/man/man1/vimtutor.1 installing /usr/local/man/man1/vimdiff.1 ... if test -d /usr/local/share/icons/hicolor/48x48/apps -a -w /usr/ local/share/icons/hicolor/48x48/apps \ 	-a ! -f /usr/local/share/icons/hicolor/48x48/apps/gvim.png; then \ cp ../runtime/vim48x48.png /usr/local/share/icons/hicolor/48x48/ apps/gvim.png; \ fi if test -d /usr/local/share/icons/locolor/32x32/apps -a -w /usr/ local/share/icons/locolor/32x32/apps \ 	-a ! -f /usr/local/share/icons/locolor/32x32/apps/gvim.png; then \ cp ../runtime/vim32x32.png /usr/local/share/icons/locolor/32x32/ apps/gvim.png; \ fi if test -d /usr/local/share/icons/locolor/16x16/apps -a -w /usr/ local/share/icons/locolor/16x16/apps \ 	-a ! -f /usr/local/share/icons/locolor/16x16/apps/gvim.png; then \ cp ../runtime/vim16x16.png /usr/local/share/icons/locolor/16x16/ apps/gvim.png; \ fi make[1]: Leaving directory `/home/ehannah/Desktop/vim/vim71/src'

Installation is complete; as long as users’ PATH variables are set correctly, they should all have access to Vim.





Getting Vim for Windows Environments





There are two main options for Microsoft Windows. The first is the self-installing executable, gvim.exe, available from the Vim home page. Download and run this, and it should do the rest. We have installed Vim using this executable on different Windows machines, and it’s always worked cleanly. The binary should install correctly on Windows XP, 2000, NT, ME, 98, and 95.





Note


At one point in the install process, a DOS window pops up and gives a warning about something not being verifiable. We have never seen this become a problem.



Another option for Windows users is to install Cygwin (http://www.cygwin.com/), a suite of common GNU tools ported to the Windows platform. It’s an amazingly full implementation of virtually all mainstream software used on Unix platforms. Vim is part of the standard Cygwin installation and can run from a Cygwin shell window.

Using Vim with Cygwin

The text-based console Vim works fine in Cygwin, but Cygwin’s gvim expects an X Window System server to be running and will degrade gracefully into running text-based Vim if started without this server.

To get Cygwin’s gvim working (assuming you wish to run it on a local screen), start Cygwin’s X server from the command line in a Cygwin shell as follows:

$X -multiwindow &

The -multiwindow option tells the X server to let Windows manage the Cygwin applications. There are many other ways to use Cygwin’s X server, but that discussion is outside the scope of this book. Installation of Cygwin’s X server is also outside the scope; if it is not installed, see the Cygwin home page for further information. A graphical “X” icon should appear in the Windows systray. This assures that the X server is in fact running.

It is confusing to have both Cygwin’s Vim and www.vim.org’s Vim installed at the same time. Some of the configuration files referenced for Vim configuration may reside in different places, thus resulting in seemingly identical versions of Vim that start up with completely different options. For instance, Cygwin and Windows may have different notions of what is the home directory.





Getting Vim for the Macintosh Environment





Mac OS X comes with Vim 6.2 installed, but not with any GUI version. Users can download .tar.bz2 files to compile versions 6.4 and 7.1 with a GUI.

When downloading the source, however, the maintainer recommends downloading from CVS (a source control system) to ensure up-to-date source code along with the most recent patches. This isn’t difficult, but the idea of downloading via command line may seem a bit foreign to newer users.

Once files are downloaded, the procedure for installation is very similar to the Unix compilation and installation procedure described earlier in the section Getting Vim for Unix and GNU/Linux.





Other Operating Systems





Vim’s home page lists more environments for which Vim ostensibly works, but it offers the caveat to use them at your own risk. These other Vims are for:

QNX, a real-time operating system (RTOS)



Agenda



Sharp Zaurus, a Linux-based handheld device



HP Jornada, a Linux-based handheld device



Windows CE, a Windows version for handheld devices



Compaq Tru64 Unix on Alpha



Open VMS, Digital’s VMS with POSIX



Amiga



OS/2



RISC OS, an OS-based on a reduced instruction set CPU (RISC)



MorphOS, an OS-based on the Amiga OS built on top of the Quark kernel





Aids and Easy Modes for New Users





Recognizing that both vi and Vim make some learning demands on new users, Vim provides several features that make it easier to use for some:

Graphical Vim (gvim)

When the user invokes the gvim command, a rich graphical window is displayed, offering Vim with some of the point-and-click features made popular by modern GUI programs. In many environments, gvim is a different binary file created by compiling Vim with all of the GUI options turned on. It can also be invoked through vim -g.



“Easy” Vim (evim)

The evim command substitutes some simple behaviors for standard vi features, which some users who are unfamiliar with vi might find to be a more intuitive way to edit files. Expert users probably won’t find this mode easy, because they’re already used to standard vi behavior. It can also be invoked through vim -e.



vimtutor

Vim comes with vimtutor, a separate command that essentially starts Vim with a special help file. This invocation of Vim gives users another starting point for learning the editor. vimtutor takes about 30 minutes to complete.





Summary





vi is still the standard text-editing tool on Unix. vi was almost revolutionary in its time, with its dual mode and touch-edit philosophy. Vim continues where vi stops, and it is the next evolutionary step for powerful editing and text management:

Vim extends vi, building on the excellent standard set by the older editor. Although other editors have also built upon the original, Vim has emerged as the most popular and widely used vi clone.



Vim offers far more than vi, enough more to become the new standard.



Vim is for beginners and for power users. For beginners, it offers various learning tools and “easy” modes, whereas for experts it offers powerful extensions to vi, along with a platform on which power users can enhance and tune Vim to their exact needs.



Vim runs everywhere. As discussed earlier, in environments where Vim wasn’t available, others stepped in and ported it to most useful OS platforms. Vim may not literally be everywhere, but it’s close!



Vim is free. Furthermore, as mentioned in the previous release of this book, Vim is charityware. The work Bram Moolenaar has done creating, improving, maintaining, and sustaining Vim is one of the truly remarkable feats in the free software market. If you like his work, Bram invites you to learn about his favorite cause, helping children in Uganda. More information is available at the web site, http://iccf-holland.org/, or simply use Vim’s built-in help command, topic “uganda” (:help uganda).





