Chapter 17. Elvis





elvis was written and is maintained by Steve Kirkendall. An earlier version became the basis for nvi. This chapter was originally written using elvis.





Author and History





With our thanks for his help, we’ll let Steve Kirkendall give the history in his own words:

I started writing elvis 1.0 after an early clone called stevie crashed on me, causing me to lose a few hours’ work and totally destroying my confidence in that program. Also, stevie stored the edit buffer in RAM, which simply wasn’t practical in Minix. So I started writing my own clone, which stored its edit buffer in a file. And even if my editor crashed, the edited text could still be retrieved from that file.

elvis 2.x is almost completely separate from 1.x. I wrote this, my second vi clone, because my first one inherited too many limitations from the real vi, and from Minix. The biggest change is the support for multiple edit buffers and multiple windows, neither of which could be retrofitted into 1.x very easily. I also wanted to shed the line-length limitation, and have online help written in HTML.





As to the name “elvis,” Steve says that at least part of the reason he chose the name was to see how many people would ask him why he chose the name![55] It is also common for vi clones to have the letters “vi” somewhere in their names.





* * *



[55] ☺ In around eight years, I was only number four! —A.R.





Important Command-Line Arguments





elvis is not typically installed as vi, though it can be. If invoked as ex, it operates as a line editor and allows the Q command from vi mode to switch into ex mode.

elvis has a number of command-line options. The most useful are described here:

-a

Load each file named on the command line into a separate window.



-c command

Execute command upon startup. This is the POSIX version of the historical +command syntax. (The old syntax is also accepted.)



-f filename

Use filename for the session file instead of the default name. Session files are discussed later in this chapter.



-G gui

Use the given interface. The default is the termcap interface. Other choices include x11, windows, curses, open, and quit. Not all the interfaces may be compiled into your version of elvis.



-i

Start editing in input mode instead of in command mode. This may be easier for novice users.



-o logfile

Redirect the startup messages out to a file, instead of stdout/stderr. This is of critical importance to MS Windows users because Windows discards anything written to standard output and standard error, which made WinElvis configuration problems almost impossible to diagnose. With -ofilename you can send the diagnostic info to a file and view it later.



-r

Perform recovery after a crash.



-R

Start editing each file in read-only mode.



-s

Read an ex script from standard input and execute (per the POSIX standard). This bypasses all initialization scripts.



-S

Set the option security=safer for the whole session, not just execution of .exrc files. This adds a certain amount of security, but it should not necessarily be trusted blindly.



-SS

Set the option security=restricted, which is even more paranoid than security=safer.



-t tag

Start editing at the specified tag.



-V

Output more verbose status information. Useful for diagnosing problems with initialization files.



-?

Print a summary of the possible options.





Online Help and Other Documentation





elvis is very interesting in this department. The online help is comprehensive and written entirely in HTML. This makes is easy to view in your favorite web browser. elvis also has an HTML display mode (discussed later), which makes it easy and pleasant to view the online help from within elvis itself.

When viewing HTML files, you use the tag commands (^] and ^T) to go to different topics and then return, making it easy to browse the help files. We applaud this innovation in online help.

Of course, elvis also comes with Unix manpages.





Initialization





This section describes elvis’s session files and itemizes the steps it takes during initialization.





The Session File





elvis is intended to eventually meet Common Open System Environment (COSE) standards. These require that programs be able to save their state and return to that saved state at a later time.

To be able to do this, elvis maintains all its state in a session file. Normally elvis creates the session file when it starts and removes it when it exits, but if elvis crashes, a left-over session file can be used to implement recovery of the edited files.





Initialization Steps





elvis performs the following initialization steps. Interestingly, much of the customization for elvis is moved out of editor options and into initialization files:

Initialize all hardcoded options.



Select an interface from those compiled into elvis. elvis will choose the “best” of the ones that are compiled in and that can work. For example, the X11 interface is considered to be better than the termcap interface, but it may not be usable if the X Window System is not currently running.

The selected interface can process the command line for initialization options that are specific to it.



Create the session file if it doesn’t exist; otherwise, read it (in preparation for recovery).



Initialize the elvispath option from the ELVISPATH environment variable. Otherwise, give it a default value. "~/.elvislib:/usr/local/lib/elvis" is a typical value, but the actual value will depend on how elvis was configured and built.



Search elvispath for an ex script named elvis.ini and run it. The default elvis.ini file performs the following actions:

Chooses a digraph table based on the current operating system. (Digraphs are a way to define the system’s extended ASCII character set and how characters from the extended set should be entered.)



Sets options based on the program’s name (for example, ex versus vi mode).



Handles system-dependent tweaks, such as setting the colors for X11 and adding menus to the interface.



Picks an initialization filename, either .exrc for Unix or elvis.rc for non-Unix systems. Call this file f.



If the EXINIT environment variable exists, executes its value. Otherwise, it executes :source~/f, where f is the filename chosen previously.



If the exrc option has been set, runs the safely source command on f in the current directory.



For X11, sets the normal, bold, and italic fonts, if they have not been set already.





Load the pre- and post-read and pre- and post-write command files, if they exist. Also load the elvis.msg file. All of these files are described later in this chapter.



Load and display the first file named on the command line.



If the -a option was given, load and display the rest of the files, each in its own window.





Multiwindow Editing





To create a new window in elvis, you use the ex command :split. You then use one of the regular ex commands, such as :efilename or :n to edit a new file. This is the simplest method; other, shorter methods are described later in this chapter. You can switch back and forth between windows with CTRL-WCTRL-W:

<preface id="VI6-CH-0"> <title>Preface </title> <para> Text editing is one of the most common uses of any computer system, and <command>vi</command> is one of the most useful standard text editors on your system. With <command>vi</command> you can create new files, or edit any existing Unix text file. _____________________________________________________________________ # Makefile for vi book # # Arnold Robbins CHAPTERS = ch00_6.sgm ch00_5.sgm ch00.sgm ch01.sgm ch02.sgm ch03.sgm \ ch04.sgm ch05.sgm ch06.sgm ch07.sgm ch08.sgm APPENDICES = appa.sgm appb.sgm appc.sgm appd.sgm POSTSCRIPT = ch00_6.ps ch00_5.ps ch00.ps ch01.ps ch02.ps ch03.ps \ ch04.ps ch05.ps ch06.ps ch07.ps ch08.ps \ appa.ps appb.ps appc.ps appd.ps

The split screen is the result of typing elvis ch00.sgm followed by :split Makefile.

Like nvi, elvis gives each window its own status line. elvis is unique in that it uses a highlighted line of underscores, instead of reverse video, for the status line. ex colon commands are carried out on each window’s status line.

Table 17-1 describes the windowing ex mode commands and what they do.

Table 17-1. elvis window management commands

CommandFunction

sp[lit] [file] Create a new window, and load it with file if supplied. Otherwise, the new window shows the current file.



new Create a new empty buffer, and then create a new window to show that buffer.



sne[w]

sn[ext] [file...] Create a new window, showing the next file in the argument list. The current file is not affected.



sN[ext] Create a new window, showing the previous file in the argument list. The current file is not affected.



sre[wind][!] Create a new window, showing the first file in the argument list. Reset the “current” file to be the first one with respect to the :next command. The current file is not affected.



sl[ast] Create a new window, showing the last file in the argument list. The current file is not affected.



sta[g][!] tag Create a new window showing the file where the requested tag is found.



sa[ll] Create a new window for any files named in the argument list that don’t already have a window.



wi[ndow] [target] With no target, list all windows. The possible values for target are described in Table 17-2.



close Close the current window. The buffer that the window was displaying remains intact. If it was modified, the other elvis commands that quit will prevent you from quitting until you explicitly save or discard the buffer.



wquit Write the buffer back to the file and close the window. The file is saved, regardless of whether it has been modified.



qall Issues a :q command for each window. Buffers without windows are not affected.





Table 17-2 describes the windowing ex arguments and their meanings.

Table 17-2. Arguments to the elvis window command

ArgumentMeaning

+ Switch to the next window, like ^W k.



++ Switch to the next window, wrapping like ^W ^W.



- Switch to the previous window, like ^W j.



-- Switch to the previous window, wrapping.



num Switch to the window whose windowid=num.



buffer-name Switch to the window editing the named buffer.





elvis provides a number of vi mode commands for moving between windows. They are summarized in Table 17-3.

Table 17-3. elvis window commands from vi command mode

CommandFunction

^W c Hide the buffer and close the window. This is identical to the :close command.



^W d Toggle the display mode between syntax mode and the other display modes (html, man, tex) if that’s appropriate. This makes editing web pages a little more convenient. This is a per-window option. Display modes are discussed in the later section Display Modes.



^W j Move down to the next window.



^W k Move up to the previous window.



^W n Create a new window, and create a new buffer to be displayed in the window. It is similar to the :snew command.



^W q Save the buffer and close the window, identical to ZZ.



^W s Split the current window, equivalent to :split.



^W S Toggle the wrap option. This option controls whether long lines wrap or whether the whole screen scrolls to the right. This is a per-window option. This option is discussed in the later section Left-Right Scrolling.



^W ] Create a new window, then look up the tag underneath the cursor. It is similar to the :stag command.



[count] ^W ^W Move to next window, or to the countth window.



^W + Increase the size of the current window (termcap interface only).



^W - Reduce the size of the current window (termcap interface only).



^W \ Make the current window as large as possible (termcap interface only).





GUI Interfaces





The screenshots and explanation for this section were supplied by Steve Kirkendall. We thank him.

elvis’s X11 interface provides a scrollbar and mouse support, and it allows you to select which fonts to use. There is no way to change fonts after elvis has created the first window. The fonts must all be monospace fonts, typically some variation of a Courier or other fixed-width font.

elvis’s X11 interface supports multiple fonts and colors, a blinking cursor that changes shape to indicate your editing mode (insert versus command), a scrollbar, anti-aliased text, an image file to use for the background (with optional tint), a user-specified icon image, and mouse actions. The mouse can be used for selecting text, cutting and pasting between applications, and performing tag searches. In addition, there is a configurable toolbar, dialog windows, a status bar, and the -client flag.





Note


The MS Windows GUI interface also supports a background image file, using the same command and using XPM format files, so that the same background image file may be used in both environments.





The Basic Window





The basic elvis window is shown in Figure 17-1.





Figure 17-1. The elvis GUI window



elvis provides a separate text search pop-up dialog box, which is shown in Figure 17-2.





Figure 17-2. The elvis search dialog



The look and feel are intended to resemble Motif, but elvis doesn’t actually use the Motif libraries.

Command-line options let you choose the four different fonts that elvis uses: normal, italic, bold, and “control,” which is the font for the toolbar text and button labels. You may also specify foreground and background colors, the initial window geometry, and whether elvis should start out iconified.

The -client option causes elvis to look for an already running elvis process and send it a message requesting it to start editing the files named on the command line. Doing it this way allows you to share yanked text and other information between the files elvis is currently editing and the new files.

Besides the toolbar, there is also a status bar that displays status messages and any available information about toolbar buttons.





Mouse Behavior





The mouse behavior tries to strike a balance between xterm and what makes sense for an editor. To do this correctly, elvis distinguishes between clicking and dragging.

Dragging the mouse always selects text. Dragging with button 1 pressed selects characters, dragging with button 2 selects a rectangular area, and dragging with button 3 selects whole lines. (Buttons 1, 2, and 3 correspond to the left, middle, and right buttons for a right-handed user. The order will be the opposite for a left-handed user.) These operations correspond to elvis’s v, ^V, and V commands, respectively. (These commands are described later in this chapter.) When you release the button at the end of the drag, the selected text is immediately copied into an X11 cut buffer, so you can paste it into another application, such as xterm. The text remains selected, so you can apply an operator command to it.

Clicking button 1 cancels any pending selection and moves the cursor to the clicked-on character. Clicking button 3 moves the cursor without canceling the pending selection; you use this to extend a pending selection.

Clicking button 2 “pastes” text from the X11 cut buffer (such as xterm). If you’re entering an ex command line, the text will be pasted into the command line as though you had typed it. If you’re in visual command mode or input mode, the text will be pasted into your edit buffer. When pasting, it doesn’t matter where you click in the window; elvis always inserts the text at the position of the text cursor.

Double-clicking button 1 simulates a ^] keystroke, causing elvis to perform tag lookup on the clicked-on word. If elvis happens to be displaying an HTML document, then tag lookup pursues hypertext links, so you can double-click on any underlined text to view the topic that describes that text. Double-clicking button 3 simulates a ^T keystroke, taking you back to where you did the last tag lookup.





The Toolbar





The X11 interface supports a user-configurable toolbar. By default, the toolbar is enabled unless your ~/.exrc file has a set notoolbar command.

The default toolbar already has some buttons defined. You use the :gui command to reconfigure the toolbar.

There are a number of commands. In particular, you can reconfigure the toolbar to suit your tastes, deleting one or all of the existing buttons, adding new ones, and controlling the spacing between buttons or groups of buttons. Here is a simple example:

:gui Make:make :gui Make " Rebuild the program :gui Quit:q :gui Quit?!modified

These commands add two new buttons. The first line adds a button named Make, which will execute the :make command when pressed. (The :make command is described later in this chapter.) The second line adds descriptive text for the Make button that shows up in the status line when the button is pressed. In this case, the " does not start a comment; rather it is an operator for the :gui command.

The second button, named Quit, is created by the third line. It exits the program. The fourth line changes its behavior. If the condition (!modified) is true, the button will behave normally. But if it’s false, the button will ignore any mouse clicks, and it will also be displayed as being “flat” instead of having the normal 3-D appearance. Thus, if the current file is modified, you won’t be able to use the Quit button to exit.

You can create pop-up dialogs that appear when a toolbar button is pressed. The dialog can set the value(s) of predefined variables (options) that can then be tested from the ex command associated with the button. There are 26 predefined variables, named a–z, that are set aside for user “programs” of this sort to use. This example associates a dialog with a new button named Split:

:gui Split"Create a new window, showing a given file :gui Split;"File to load:" (file) f = filename :gui Split:split (f)

The first command associates descriptive text with the Split button. The second command creates the pop-up dialog: its prompt is File to load: and it will set the filename option. The (file) indicates that any string may be entered, but that the TAB key may be used for filename completion. The f = filename copies the value of filename into f. Finally, the third command actually executes the :split command on the value of f, which will be the new filename supplied by the user.

The facility is quite flexible; see the online help for the full details.





Options





A large number of options control the X11 interface. You typically set these in your .exrc file. There are options and abbreviations for setting the various fonts, and for enabling and configuring the toolbar, status bar, scrollbars, and the cursor. Other options control the cursor’s behavior when you switch windows with ^W ^W and whether the cursor goes back to the original xterm when elvis exits.

The online documentation describes all of the X11-related ex options. Here, we describe some of the more interesting ones:

autoiconify

Normally, when the ^W ^W command switches focus to an iconified window, that window is de-iconified. When autoiconify is true, elvis will iconify the old window, so that the number of open elvis windows remains constant.



blinktime

The value is a number between 1 and 10 that indicates for how many 10ths of a second the cursor should be visible and then invisible. A value of 0 disables blinking.



firstx, firsty, stagger

firstx and firsty control the position of the first window that elvis creates. If not set, the -geometry option or the window manager controls placement. If stagger is set to a nonzero value, any new windows are created that many pixels down and to the right of the current window. Setting it to zero lets the window manager do the placement.



stopshell

Stores a command that runs an interactive shell, for the ex commands :shell and :stop, and for the ^Z visual command. The default value is xterm &, which starts an interactive terminal emulator in another window.



xscrollbar

Values left and right place the scrollbar on the indicated side of the window, and none disables the scrollbar. The default is right.





elvis can be configured via X resources.[56] The resource values can be overridden by command-line flags, or by explicit :set or :color commands in the initialization scripts. elvis’s resources are listed in Table 17-4.

Table 17-4. elvis X resources

Resource class (name is lowercase of class)TypeDefault value

Elvis.Toolbar Boolean true

Elvis.Statusbar Boolean true

Elvis.Font Font fixed

Elvis.Geometry Geometry 80x34

Elvis.Foreground Color black

Elvis.Background Color gray90

Elvis.MultiClickTimeout Timeout 3

Elvis.Control.Font Font variable

Elvis.Cursor.Foreground Color red

Elvis.Cursor.Selected Color red

Elvis.Cursor.BlinkTime Timeout 3

Elvis.Tool.Foreground Color black

Elvis.Tool.Background Color gray75

Elvis.Scrollbar.Foreground Color gray75

Elvis.Scrollbar.Background Color gray60

Elvis.Scrollbar.Width Number 11

Elvis.Scrollbar.Repeat Timeout 4

Elvis.Scrollbar.Position Edge right





The “Timeout” type gives a time value, in 10ths of a second. The “Edge” type gives a scrollbar position, one of left, right, or none.

For example, if your X resource database contains the line elvis.font: 10x20, the default text font would be 10x20. This value would be used if the normalfont option was unset.





* * *



[56] X resources are a way to configure X11 applications based on a set of name/value pairs stored in memory by the X server. They are not used very much by the current crop of desktop environments, such as KDE and GNOME. Nonetheless, you can still set them using the xrdb command.





Extended Regular Expressions





We introduced extended regular expressions earlier in the section Extended Regular Expressions. The additional metacharacters available in elvis are:

\|

Indicates alternation.



\(...\)

Used for grouping, to allow the application of additional regular expression operators.



\+

Matches one or more of the preceding regular expressions.



\?

Matches zero or one of the preceding regular expressions.



\@

Matches the word under the cursor.



\=

Indicates where to put the cursor when the text is matched. For instance, hel\=lo would put the cursor on the second l in the next occurrence of hello.



\{...\}

Describes an interval expression, such as x\{1,3\} to match x, xx, or xxx.





POSIX bracket expressions (character classes, etc.) are available.





Improved Editing Facilities





This section describes the features of elvis that make simple text editing easier and more powerful.





Command-Line History and Completion





Everything you type on the ex command line is saved in a buffer named Elvisexhistory. This is accessible like any other elvis buffer, but it is not directly useful when just viewed in a window.

To access the history, you use the arrow keys to display previous commands and to edit them. Use ↑ and ↓ to page through the list, and ← and → to move around on a command line. You can insert characters by typing, and you can erase them by backspacing over them. Much as when editing in a regular vi buffer, the backspace does remove the characters, but the line is not updated as you type, so be careful!

When entering text into the Elvis ex history buffer (i.e., on the colon command line), the TAB key can be used for filename expansion. The preceding word is assumed to be a partial filename, and elvis searches for all matching files. If there are multiple matches, it fills in as many characters of the name as possible, and then beeps; or, if no additional characters are implied by the matching filenames, elvis lists all matching names and redisplays the command line. If there is a single match, elvis completes the name and appends a tab character. If there are no matches, elvis simply inserts a tab character.

To get a real tab character, precede it with a ^V. You can also disable filename completion entirely by setting the Elvis ex history buffer’s inputtab option to tab, via the following command:

:(Elvis ex history)set inputtab=tab





Tag Stacks





Tag stacking is described earlier in the section Tag Stacks. In elvis, tag stacking is very straightforward, as shown in Tables 17-5 and 17-6.

Table 17-5. elvis tag commands

CommandFunction

ta[g][!] [tagstring] Edit the file containing tagstring as defined in the tags file. The ! forces elvis to switch to the new file if the current buffer has been modified but not saved.



stac[k] Display the current tag stack.



po[p][!] Pop a cursor position off the stack, restoring the cursor to its previous position.





Table 17-6. elvis command mode tag commands

CommandFunction

^] Look up the location of the identifier under the cursor in the tags file, and move to that location. The current location is automatically pushed onto the tag stack.



^T Return to the previous location in the tag stack, i.e., pop off one element.





Unlike traditional vi, when you type ^], elvis looks up the entire word containing the cursor, not just the part of the word from the cursor location forward.

In HTML mode (discussed in the later section Display Modes), the commands all work the same, except that :tag expects to be given a URL instead of a tag name. URLs don’t depend on having a tags file, so the tags file is ignored when in HTML mode. elvis supports file:, http:, and ftp: URLs. It can also write via FTP. Simply give a URL wherever elvis expects a filename. To access your own account on an FTP site (instead of the anonymous account), the directory name portion of the URL must begin with /~. elvis will read your ~/.netrc file to find the right name and password. The html display mode makes good use of these features! (The network functions work in Windows and OS/2, too.)

Several :set options affect how elvis works with tags, as described in Table 17-7.

Table 17-7. elvis options for tag management

OptionFunction

taglength, tl Control the number of significant characters in a tag that is to be looked up. The default value of zero indicates that all characters are significant.



tags, tagpath The value is a list of directories and/or filenames in which to look for tags files. elvis looks for a file named tags in any entry that is a directory. Entries in the list are colon-separated (or semicolon-separated on DOS/Windows), in order to allow spaces in directory names. The default value is just tags, which looks for a file named tags in the current directory. This can be overridden by setting the TAGPATH environment variable.



tagstack When set to true, elvis stacks each location on the tag stack. Use :set notagstack to disable tag stacking.





elvis supports the extended tags file format described in Chapter 8. elvis comes with its own version of ctags (named elvtags, to avoid conflict with the standard version). It generates the enhanced format described earlier. Here is an example of the special !_TAG_ lines it produces:

!_TAG_FILE_FORMAT 2 /supported features/ !_TAG_FILE_SORTED 1 /0=unsorted, 1=sorted/ !_TAG_PROGRAM_AUTHOR Steve Kirkendall /kirkenda@cs.pdx.edu/ !_TAG_PROGRAM_NAME Elvis Ctags // !_TAG_PROGRAM_URL ftp://ftp.cs.pdx.edu/pub/elvis/README.html // !_TAG_PROGRAM_VERSION 2.1 //

In elvis, each window has its own tag stack.

In general, elvis does some innovative things with tags. When reading overloaded tags, it tries to guess which one you’re looking for and presents the most likely one first. If you reject it (by hitting ^] again, or typing :tag again), it then presents you with the next most likely match, and so on. It also notes the attributes of the tags that you reject or accept and uses those to improve its guessing heuristic for later searches.

The :tag command’s syntax has been extended to allow you to search for tags by features other than just the tag name. There are too many details to go into here; see the chapter in the online help that describes the use of tags.

There is also a :browse command, which finds all matching tags at once and builds an HTML table from them. From this table, you can follow hypertext links to any matching tags you want.

Finally, there is the tagprg option, which, if set, discards the built-in tag searching algorithm and instead runs an external program to perform the search.





Infinite Undo





With elvis, before being able to undo and redo multiple levels of changes, you must first set the undolevels option to the number of levels of “undo” that elvis should allow. A negative value disallows any undoing (which is not terribly useful). The elvis documentation warns that each level of undo uses around 6K bytes of the session file (the file that describes your editing session), and thus can eat up disk space rather quickly. It recommends not setting undolevels any higher than 100 and “probably much lower.”

Once you’ve set undolevels to a nonzero value, you enter text as normal. Then, each successive u command undoes one change. To redo (undo the undo), you use the (rather mnemonic) ^R (Ctrl-R) command.

In elvis, the default value of undolevels is zero, which causes elvis to mimic Unix vi. The option applies per buffer being edited; see the earlier section Initialization Steps for a description of how to set it for every file that you edit.

Once undolevels has been set, adding a count to either the u or ^R commands undoes or redoes the given number of changes.





Arbitrary Length Lines and Binary Data





elvis can edit files with arbitrary length lines and with an arbitrary number of lines.

Under Unix, elvis does not treat a binary file differently from any other file. On other systems, it uses the elvis.brf file to set the binary option. This avoids newline translation issues. You can enter 8-bit text by typing ^X followed by two hexadecimal digits. Using the hex display mode is an excellent way to edit binary files. The elvis.brf file and the hex display mode are described in the later section Interesting Features.





Left-Right Scrolling





You enable left-right scrolling in elvis using :set nowrap. The value of sidescroll controls the number of characters by which elvis shifts the screen when scrolling left to right. The ^W S command toggles the value of this option.





Visual Mode





elvis allows you to select regions one character at a time, one line at a time, or rectangularly, using the commands shown in Table 17-8.

Table 17-8. elvis block mode command characters

CommandFunction

v Start region selection, character-at-a-time mode.



V Start region selection, line-at-a-time mode.



^V Start region selection, rectangular mode.





elvis highlights the text (using reverse video) as you are selecting it. To make your selection, simply use the normal motion keys. The screen here shows a rectangular region:

The 6th edition of <citetitle>Learning the vi Editor</citetitle> brings thebook into the late 1990&rsquo;s. In particular, besides the &ldquo;original&rdquo; version of <command>vi</command> that comes as a standard part of every Unix system, there are now a number of freely available &ldquo;clones&rdquo; or work-alike editors.

elvis permits only a few operations on selected areas of text. Some operations work only on whole lines, even if you’ve selected a region that does not contain whole lines (see Table 17-9).

Table 17-9. elvis block mode operations

CommandOperation

c, d, y Change, delete, or yank text. Only d works exactly on rectangles.



<, >, ! Shift text left or right, and filter text. These operate on the whole lines containing the marked region.





After using the d command to delete the region, the screen now looks like this:

The 6th edition of <citetitle>Learning the vi Editor</citetitle>brings the 90&rsquo;s. In particulo;original&rdquo; version of <command>vi as a standard part of every system, there are n available &ldquo;clones&rdquo; or work-alike editors.





Programming Assistance





elvis’s programming assistance capabilities are described in this section.





Edit-Compile Speedup





elvis provides commands that make it easier to stay within the editor while working on a program. You can recompile a single file, rebuild your entire program, and work through compiler errors one at a time. The elvis commands are summarized in Table 17-10.

Table 17-10. elvis program development commands

CommandOptionFunction

cc[!] [args] ccprg Run the C compiler. Useful for recompiling an individual file.



mak[e][!] [args] makeprg Recompile everything that needs recompiling (usually via make).



er[rlist][!] [file] Move to the next error’s location.





The cc command recompiles an individual source file. You run it from the colon command line. For example, if you are editing the file hello.c and you type :cc, elvis will compile hello.c for you.

If you supply additional arguments to the :cc command, those arguments will be passed on to the C compiler. In this case, you need to supply all the arguments, including the filename.

The :cc command works by executing the text of the ccprg option. The default value is "cc ($1?$1:$2)". elvis sets $2 to the name of the current source file, and $1 to the arguments you give to the :cc command. The value of ccprg thus uses your arguments if they are present; otherwise, it just passes the current file’s name to the system cc command. (You can, of course, change ccprg to suit your taste.)

Similarly, the :make command is intended to recompile everything that needs recompiling. It does this by executing the contents of the makeprg option, which by default is "make $1". Thus, you could type :make hello to make just the hello program, or just :make to make everything.

elvis captures the output of the compile or make and looks for things that look like filenames and line numbers. When it finds likely candidates, it treats them as such and moves to the location of the first error. The :errlist command moves to each successive error location in turn. elvis displays the error message text in the status line as you move to each location.

If you supply a filename argument to :errlist, elvis will load a fresh batch of error messages from that file, and move to the location of the first error.

The vi mode command * (asterisk) is equivalent to :errlist. This is more convenient to use when you have a lot of errors to step through.

Finally, one really nice feature is that elvis compensates for changes in the file. As you add or delete lines, elvis keeps track, so that when you go to the next error, you end up on the correct line—which is not necessarily the one with the same absolute line number as in the compiler’s error message.





Syntax Highlighting





To cause elvis to do syntax highlighting, use the :display syntax command. This is a per-window command. (The other elvis display modes are described in Display Modes.)

You specify the appearance of text directly, using the :color command. You first give the type of text to highlight. For example, in the syntax display mode, some of the possibilities are:

comment

How to display comments



function

How to display identifiers that are function names



keyword

How to display identifiers that are keywords



prep

How to display C and C++ preprocessor directives



string

How to display string constants (such as "Don't panic!" in awk)



variable

How to display for variables, fields, and so on



other

How to display things that don’t fall into the other categories but that should not be displayed in the normal font (e.g., type names defined with the C typedefkeyword)





Next, you indicate the font face, one of normal, bold, italic, underlined, emphasized, boxed, graphic, proportional, or fixed. (These can be abbreviated to a single letter.) You can then follow the face with a color. For example:

:color function bold yellow

The description of each language’s comments, functions, keywords, etc., is stored in the elvis.syn file. This file comes with a number of specifications in it already. As an example, here is the syntax specification for awk:

# Awk. This is actually for Thompson Automation's AWK compiler, which is # somewhat beefier than the standard AWK interpreter. language tawk awk extension .awk keyword BEGIN BEGINFILE END ENDFILE INIT break continue do else for function keyword global if in local next return while comment # function ( string " regexp / useregexp (,~ other allcaps

The format is mostly self-explanatory and is fully documented in the elvis online documentation.

The reason elvis associates fonts and colors with different parts of a file’s syntax is its ability to print files as they’re shown on the screen (see the discussion of the :lpr command in the later section Display Modes).

On a nonbitmapped display, such as the Linux console, all of the fonts map into the one used by the console driver. This makes it rather difficult to distinguish normal from italic, for example. However, on some displays (such as the Linux console), elvis compensates by changing the color of the different fonts. If you have a GNU/Linux system with elvis, use it to edit a convenient C source file and you will see different parts of the code in different colors. The effect is rather pleasant; we regret that we can’t reproduce it here in print.

In elvis, the syntax colors are per-window attributes. You can change the color for the italic font in one window, and it will not affect the color for the italic font in another window. This is true even if both windows are showing the same file.

Syntax coloring makes program editing much more interesting and lively. But you have to be careful in your choice of colors!





Interesting Features





elvis has a number of interesting features:

Internationalization support

Like nvi, elvis also has a home-grown method for allowing translations of messages into different languages. The elvis.msg file is searched for along the elvispath and loaded into a buffer named Elvis messages.

Messages have the form “terse message:long message.” Before printing a message, elvis looks up the terse form, and if there is a corresponding long form, that message is used. Otherwise, the terse message is used.



Display modes

This is perhaps the most interesting of elvis’s features. For certain kinds of files, elvis formats the file content on the screen, giving a surprisingly good approximation of a WYSIWYG effect. elvis can also use the same formatting for printing the buffer to several kinds of printers. Display modes get their own subsection later in this chapter.



Pre- and post-operation command files

elvis loads four files (if they exist) that allow you to customize its behavior before and after reading and writing a file. This feature also gets its own subsection, later.



Open mode

elvis is the only one of the clones that actually implements vi’s open mode. (Think of open mode as like vi, but with only a one-line window. The “advantage” of open mode is that it can be used on terminals that don’t have cursor motion capabilities.)



Security

The :safely command sets the security option for execution of non-home-directory.exrc files, or any other untrusted files. When security=safer is set, “certain commands are disabled, wildcard expansion in filenames is disabled, and certain options are locked (including the security option itself).” The elvisdocumentation provides the details; however, don’t blindly trust elvis to provide complete security for you.



Built-in calculator

elvis extends the ex command language with a built-in calculator (sometimes referred to as an expression evaluator in the documentation). It understands C expression syntax, and is most used in the :if, :calc, and :eval commands. See the online help for details, as well as examples in the elvis distribution’s sample initialization files.



Macro debugger

elvis has a debugger for vi macros (the :map command). This can be useful when writing complicated input or command maps.



Macros for ex mode

The :alias command provides for defining ex macros. It is intended to resemble the alias command in csh. For example, there is a :safer alias for the :safely command, which provides backward compatibility with earlier versions of elvis.



Smarter % command

The visual % command has been extended to recognize #if, #else, and #endif directives if you’re using the syntax display mode.



Built-in spellchecker

In syntax display mode, the spellchecker is smart enough to check the tags file for program symbols and a natural-language dictionary for comments. See :help set spell.



Text folding

Text folding allows you to hide and reveal certain parts of a file, which is useful for working with structured text. See :help :fold.



Highlighting selected lines

Steve tells us: “elvis can add a highlight to selected lines. See :help :region. For example, the commands :load since and then :rcssince will highlight lines that have been changed since the last time the file was checked into RCS.”





Display Modes





elvis has several display modes. Depending on the kind of file, elvis produces a formatted version of the file, producing a WYSIWYG effect. The display modes are outlined in Table 17-11.

Table 17-11. elvis display modes

ModeDisplay appearance

normal No formatting; displays your text as it exists in the file.



syntax Like normal, but with syntax coloring turned on.



hex An interactive hex dump, reminiscent of mainframe hex dumps. Good for editing binary files.



html A simple web page formatter. The tag commands can be used to follow links and return to the original starting point.



man Simple manpage formatter. Like the output of nroff -man.



tex A simple subset of the TeX formatter.





The :normal command will switch the display from one of the formatted views to normal mode. Use :displaymode to switch back. As a shortcut, the ^W d command will toggle the display modes for the window.

Of the available modes, html and man are the most WYSIWYG in nature. The online documentation clearly defines the subset of both markup languages that elvis understands.

elvis uses the html mode for displaying its online help, which is written in HTML and has many cross-referencing links within it.

The example here shows elvis editing one of the HTML help files. The screen is split. Both windows show the same buffer; the bottom window is using the html display mode, whereas the top is using the normal display mode:

<html><head> <title>Elvis 2.0 Sessions</title> </head><body> <h1>10. SESSIONS, INITIALIZATION, AND RECOVERY</h1> This section of the manual describes the life-cycle of an edit session. We begin with the definition of an <a href="#SESSION">edit session</a> and what that means to elvis. This is followed by sections discussing <a href="#INIT">initialization</a> and <a href="#RECOVER">recovery after a crash.</a> _____________________________________________________________________10.0 SESSIONS, INITIALIZATION, AND RECOVERY This section of the manual describes the life-cycle of an edit session. We begin with the definition of an edit session and what that means to elvis. This is followed by sections discussing initialization andrecovery after a crash.10.1 Sessions

The man mode is also interesting, since normally you have to format and print a manpage to be sure you’ve done a decent job of laying it out. The following quote from the online help seems appropriate:

Troff source was never designed to be interactively edited, and although I did the best I could, attempting to edit in man mode is still a disorienting experience. I suggest you get in the habit of using normal mode when making changes, and man mode to preview the effect of those changes. The ^W d command makes switching between modes a pretty easy thing to do.





As an interesting adjunct, both the html and man modes also work with the :color command described later in Syntax Highlighting. This is particularly nice with man mode. For example, by default on a Linux console, only bold text (.B) is distinguishable from normal text. But with syntax coloring on, both bold and italic (.I) text become distinct. The mode commands are summarized in Table 17-12.

Table 17-12. elvis display mode commands

CommandFunction

di[splay] [mode [lang]] Change the display mode to mode. Use lang for syntax mode.



no[rmal] Same as :display normal, but much easier to type.





Associated with each window is the bufdisplay option, which should be set to one of the supported display modes. The standard elvis.arf file (see the next subsection) will look at the extension of the buffer’s filename and attempt to set the display to a more interesting mode than normal.

Finally, elvis can also apply its WYSIWYG formatting to printing the contents of a buffer. The :lpr command formats a line range (or the whole buffer, by default) for printing. You can print to a file or down a pipe to a command. By default, elvis prints to a pipe that executes the system print spooling command.

The :lpr command is controlled by several options, described in Table 17-13.

Table 17-13. elvis options for print management

OptionFunction

lptype, lp The printer type.



lpconvert, lpcvt If set, convert Latin-8 extended ASCII to PC-8 extended ASCII.



lpcrlf, lpc The printer needs CR/LF to end each line.



lpout, lpo The file or command to print to.



lpcolumns, lpcols The printer’s width.



lpwrap, lpw Simulate line wrapping.



lplines, lprows The length of the printer’s page.



lpformfeed, lpff Send a form feed after the last page.



lpoptions, lpopt Control of various printer features. This matters only for PostScript printers.



lpcolor, lpcl Enables color printing for PostScript and MS Windows printers.



lpcontrast, lpct Controls shading and contrast; for use with the lpcolor option.





Most of the options are self-explanatory. elvis supports several printer types, as described in Table 17-14.

Table 17-14. Values for the lptype option

NamePrinter Type

ps PostScript, one logical page per sheet of paper.



ps2 PostScript, two logical pages per sheet of paper.



epson Most dot-matrix printers; no graphic characters supported.



pana Panasonic dot-matrix printers.



ibm Dot-matrix printers with IBM graphic characters.



hp Hewlett-Packard printers, and most non-PostScript laser printers.



cr Line printers; overtyping is done with carriage return.



bs Overtyping is done via backspace characters. This setting is the closest to traditional Unix nroff.



dumb Plain ASCII, no font control.





If you have a PostScript printer, by all means use an lptype of ps or ps2. Use the latter to save paper, which is particularly handy when printing drafts.





Pre- and Post-Operation Control Files





elvis gives you the ability to control its actions at four points when reading and writing files: before and after reading a file, and before and after writing a file. It does this by executing the contents of four ex scripts at those respective points. These scripts are searched for using the directories listed in the elvispath option:

elvis.brf

This file is executed Before Reading a File (.brf). The default version looks at the file’s extension and attempts to guess whether the file is binary. If it is, the binary option is turned on, to prevent elvis from converting newlines (which may be actual CR/LF pairs in the file) into line feeds internally.



elvis.arf

This file is executed After Reading a File (.arf). The default version examines the file’s extension in order to turn on syntax highlighting.



elvis.bwf

This file is executed Before Writing a File (.bwf), in particular, before completely replacing an original file with the contents of the buffer. The default version implements copying the original file to a file with a .bak extension. You must set the backup option for this to work.



elvis.awf

This file is executed After Writing a File (.awf). There is no default file for this, although it might be a good place to add hooks into a source code control system.





The use of command files to control these actions is quite powerful. It allows you to easily tailor elvis’s behavior to suit your needs; in other editors these kinds of features are much more hardwired into the code.

In addition, elvis supports Vim-style autocommands with :autocmd. See the online help for details.





elvis Futures





Steve Kirkendall informs us that there are a few things he has implemented but not yet released, as described in the following list:

An interface to the GDB (GNU debugger) for use in software development



A persistence feature similar to Vim’s viminfo file



The ability to embed one syntax within another, such as JavaScript embedded in HTML





Sources and Supported Operating Systems





The official WWW location for elvis is ftp://ftp.cs.pdx.edu/pub/elvis/README.html. From there, you can download the elvis distribution or get it directly, using ftp from ftp://ftp.cs.pdx.edu/pub/elvis/elvis-2.2_0.tar.gz.

The source code for elvis is freely distributable. elvis is distributed under the terms of perl’s Artistic License. The licensing terms are described in the doc/license.html file in the distribution.

elvis works under Unix, OS/2, MS-DOS, and modern versions of MS Windows. The Unix and Windows ports provide a graphical user interface. The MS-DOS version includes mouse support.

Compiling elvis is straightforward. Retrieve the distribution via ftp or via a web browser. Uncompress and untar it,[57] run the configure program, and then run make:

$gzip -d < elvis-2.2_0.tar.gz | tar -xvpf - ... $ cd elvis-2.2_0; ./configure ... $ make ...

elvis should configure and build with no problems. Use make install to install it.





Note


The default configuration causes elvis to install itself in standard system directories, such as /usr/bin, /usr/share, and so on. If you wish to have things installed in /usr/local, use the --prefix option to the configure script.



Should you need to report a bug or problem in elvis, the person to contact is Steve Kirkendall at kirkenda@cs.pdx.edu.





* * *



[57] The untar.c program available from the elvis ftp site is a very portable, simple program for unpacking gziped tar files on non-Unix systems.





