Chapter 4. Beyond the Basics





You have already been introduced to the basic vi editing commands, i, a, c, d, and y. This chapter expands on what you already know about editing. It covers:

Descriptions of additional editing facilities, with a review of the general command form



Additional ways to enter vi



Making use of buffers that store yanks and deletions



Marking your place in a file





More Command Combinations





In Chapter 2, you learned the edit commands c, d, and y, as well as how to combine them with movements and numbers (such as 2cw or 4dd). In Chapter 3, you added many more movement commands to your repertoire. Although the fact that you can combine edit commands with movement is not a new concept to you, Table 4-1 gives you a feel for the many editing options you now have.

Table 4-1. More editing commands

ChangeDeleteCopyFrom cursor to...

cH dH yH Top of screen

cL dL yL Bottom of screen

c+ d+ y+ Next line

c5| d5| y5| Column 5 of current line

2c) 2d) 2y) Second sentence following

c{ d{ y{ Previous paragraph

c/ pattern d/ pattern y/ pattern Pattern

cn dn yn Next pattern

cG dG yG End of file

c13G d13G y13G Line number 13





Notice how all of the sequences in Table 4-1 follow the general pattern:

(number)(command)(text object)





number is the optional numeric argument. command in this case is one of c, d, or y. text object is a movement command.

The general form of a vi command is discussed in Chapter 2. You may wish to review Tables 2-1 and 2-2 as well.





Options When Starting vi





So far, you have invoked the vi editor with the command:

$vifile

There are other options to the vi command that can be helpful. You can open a file directly to a specific line number or pattern. You can also open a file in read-only mode. Another option recovers all changes to a file that you were editing when the system crashed.





Advancing to a Specific Place





When you begin editing an existing file, you can call the file in and then move to the first occurrence of a pattern or to a specific line number. You can also specify your first movement by search or by line number right on the command line:[15]

$ vi +n file

Opens file at line number n.



$ vi + file

Opens file at last line.



$ vi +/pattern file

Opens file at the first occurrence of pattern.





In the file practice, to open the file and advance directly to the line containing the word Screen, enter:

KeystrokesResults

vi +/Screen practice With a screen editor you can scroll the page, move the cursor, delete lines, and insert characters, while seeing the results of your edits as you make them.Screen editors are very popular, since they allow you to make changes as you read

Give the vi command with the option +/ pattern to go directly to the line containing Screen.





As you see in this example, your search pattern will not necessarily be positioned at the top of the screen. If you include spaces in the pattern, you must enclose the whole pattern within single or double quotes:[16]

+/"you make"

or escape the space with a backslash:

+/you\ make

In addition, if you want to use the general pattern-matching syntax described in Chapter 6, you may need to protect one or more special characters from interpretation by the shell with either single quotes or backslashes.

Using +/pattern is helpful if you have to leave an editing session before you’re finished. You can mark your place by inserting a pattern such as ZZZ or HERE. Then, when you return to the file, all you have to remember is /ZZZ or /HERE.





Note


Normally, when you’re editing in vi, the wrapscan option is enabled. If you’ve customized your environment so that wrapscan is always disabled (see Repeating Searches), you might not be able to use +/pattern. If you try to open a file this way, vi opens the file at the last line and displays the message, “Address search hit BOTTOM without matching pattern.”





Read-Only Mode





There will be times when you want to look at a file but want to protect that file from inadvertent keystrokes and changes. (You might want to call in a lengthy file to practice vi movements, or you might want to scroll through a command file or program.) You can enter a file in read-only mode and use all the vi movement commands, but you won’t be able to change the file.

To look at a file in read-only mode, enter either:

$vi -Rfile

or:

$viewfile

(The view command, like the vi command, can use any of the command-line options for advancing to a specific place in the file.[17]) If you do decide to make some edits to the file, you can override read-only mode by adding an exclamation point to the write command:

:w!

or:

:wq

If you have a problem writing out the file, see the problem checklists summarized in Appendix C.





Recovering a Buffer





Occasionally a system failure may happen while you are editing a file. Ordinarily, any edits made after your last write (save) are lost. However, there is an option, -r, which lets you recover the edited buffer at the time of a system crash.

On a traditional Unix system with the original vi, when you first log on after the system is running again, you will receive a mail message stating that your buffer has been saved. In addition, if you type the command:

$ex -r

or:

$vi -r

you will get a list of any files that the system has saved.

Use the -r option with a filename to recover the edited buffer. For example, to recover the edited buffer of the file practice after a system crash, enter:

$vi -r practice

It is wise to recover the file immediately, lest you inadvertently make edits to the file and then have to resolve a version skew between the preserved buffer and the newly edited file.

You can force the system to preserve your buffer even when there is not a crash by using the command :pre (short for :preserve). You may find it useful if you have made edits to a file and then discover that you can’t save your edits because you don’t have write permission. (You could also just write out a copy of the file under another name or into a directory where you do have write permission. See Problems Saving Files.)





Note


Recovery may work differently for the various clones and can change from version to version. It is best to check your local documentation. vile does not support any kind of recovery. The vile documentation recommends the use of the autowrite and autosave options. How to do this is described in Customizing vi.





* * *



[15] According to the POSIX standard, vi should use -c command instead of +command as shown here. Typically, for backward compatibility, both versions are accepted.



[16] It is the shell that imposes the quoting requirement, not vi.



[17] Typically view is just a link to vi.





Making Use of Buffers





You have seen that while you are editing, your last deletion (d or x) or yank (y) is saved in a buffer (a place in stored memory). You can access the contents of that buffer and put the saved text back in your file with the put command (p or P).

The last nine deletions are stored by vi in numbered buffers. You can access any of these numbered buffers to restore any (or all) of the last nine deletions. (Small deletions, of only parts of lines, are not saved in numbered buffers, however. These deletions can be recovered only by using the p or P command immediately after you’ve made the deletion.)

vi also allows you to place yanks (copied text) into buffers identified by letters. You can fill up to 26 (a–z) buffers with yanked text and restore that text with a put command at any time in your editing session.





Recovering Deletions





Being able to delete large blocks of text in a single bound is all very well and good, but what if you mistakenly delete 53 lines that you need? You can recover any of your past nine deletions, for they are saved in numbered buffers. The last delete is saved in buffer 1, the second-to-last in buffer 2, and so on.

To recover a deletion, type " (double quote), identify the buffered text by number, then give the put command. To recover your second-to-last deletion from buffer 2, type:

"2p

The deletion in buffer 2 is placed after the cursor.

If you’re not sure which buffer contains the deletion you want to restore, you don’t have to keep typing "np over and over again. If you use the repeat command (.) with p after u, it automatically increments the buffer number. As a result, you can search through the numbered buffers using:

"1pu.u.uetc.

to put the contents of each succeeding buffer in the file one after the other. Each time you type u, the restored text is removed; when you type a dot (.), the contents of the next buffer is restored to your file. Keep typing u and . until you’ve recovered the text you’re looking for.





Yanking to Named Buffers





You have seen that you must put (p or P) the contents of the unnamed buffer before you make any other edit, or the buffer will be overwritten. You can also use y and d with a set of 26 named buffers (a–z) that are specifically available for copying and moving text. If you name a buffer to store the yanked text, you can retrieve the contents of the named buffer at any time during your editing session.

To yank into a named buffer, precede the yank command with a double quote (") and the character for the name of the buffer you want to load. For example:

"dyyYank current line into buffer d. "a7yyYank next seven lines into buffer a.

After loading the named buffers and moving to the new position, use p or P to put the text back:

"dPPut the contents of buffer d before cursor. "apPut the contents of buffer a after cursor.

There is no way to put part of a buffer into the text—it is all or nothing.

In the next chapter, you’ll learn how to edit multiple files. Once you know how to travel between files without leaving vi, you can use named buffers to selectively transfer text between files. When using the multiple-window feature of the various clones, you can also use the unnamed buffer to transfer data between files.

You can also delete text into named buffers using much the same procedure:

"a5ddDelete five lines into buffer a.

If you specify a buffer name with a capital letter, your yanked or deleted text will be appended to the current contents of that buffer. This allows you to be selective in what you move or copy. For example:

"zd)

Delete from cursor to end of current sentence and save in buffer z.



2)

Move two sentences further on.



"Zy)

Add the next sentence to buffer z. You can continue adding more text to a named buffer for as long as you like, but be warned: if you forget once, and yank or delete to the buffer without specifying its name in capitalized form, you’ll overwrite the buffer, losing whatever you had accumulated in it.





Marking Your Place





During a vi session, you can mark your place in the file with an invisible “bookmark,” perform edits elsewhere, and then return to your marked place. In command mode:

m x

Marks the current position with x (x can be any letter). (The original vi allows only lowercase letters. Vim distinguishes between uppercase and lowercase letters.)



' x

(Apostrophe.) Moves the cursor to the first character of the line marked by x.



` x

(Backquote.) Moves the cursor to the character marked by x.



``

(Backquotes.) Returns to the exact position of the previous mark or context after a move.



''

(Apostrophes.) Returns to the beginning of the line of the previous mark or context.





Note


Place markers are set only during the current vi session; they are not stored in the file.





Other Advanced Edits





There are other advanced edits that you can execute with vi, but to use them you must first learn a bit more about the ex editor by reading the next chapter.





Review of vi Buffer and Marking Commands





Table 4-2 summarizes the command-line options common to all versions of vi. Tables 4-3 and 4-4 summarize the buffer and marking commands.

Table 4-2. Command-line options

OptionMeaning

+ n file Open file at line number n.

+ file Open file at last line.

+/ pattern file Open file at first occurrence of pattern (traditional version of POSIX -c).



-c command file Run command after opening file; usually a line number or search (POSIX version of +).



-R Operate in read-only mode (same as using view instead of vi).

-r Recover files after a crash.





Table 4-3. Buffer names

Buffer namesBuffer use

1–9 The last nine deletions, from most to least recent.

a–z Named buffers for you to use as needed. Uppercase letters append to the buffer.





Table 4-4. Buffer and marking commands

CommandMeaning

" b command Do command with buffer b.

m x Mark current position with x.

' x Move cursor to first character of line marked by x.

` x Move cursor to character marked by x.

`` Return to exact position of previous mark or context.

'' Return to beginning of the line of previous mark or context.





